# Generated from Solidity.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,134,1075,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,194,8,0,10,0,12,0,197,9,
        0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,206,8,1,1,1,1,1,1,2,1,2,1,2,3,
        2,213,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,225,8,3,1,
        3,1,3,1,3,1,3,3,3,231,8,3,5,3,233,8,3,10,3,12,3,236,9,3,1,3,1,3,
        1,3,1,3,3,3,242,8,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,5,5,251,8,5,10,5,
        12,5,254,9,5,1,6,3,6,257,8,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,265,8,6,
        10,6,12,6,268,9,6,3,6,270,8,6,1,6,1,6,5,6,274,8,6,10,6,12,6,277,
        9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,287,8,7,10,7,12,7,290,9,
        7,3,7,292,8,7,1,7,1,7,5,7,296,8,7,10,7,12,7,299,9,7,1,7,1,7,1,8,
        1,8,1,8,1,8,5,8,307,8,8,10,8,12,8,310,9,8,1,8,1,8,1,9,1,9,1,9,1,
        9,1,9,3,9,319,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,329,
        8,10,1,11,1,11,1,11,1,11,3,11,335,8,11,1,12,1,12,5,12,339,8,12,10,
        12,12,12,342,9,12,1,12,1,12,1,12,3,12,347,8,12,1,12,1,12,1,13,1,
        13,5,13,353,8,13,10,13,12,13,356,9,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,14,1,14,5,14,366,8,14,10,14,12,14,369,9,14,1,14,1,14,1,14,1,
        14,3,14,375,8,14,1,14,1,14,1,15,1,15,1,15,1,15,5,15,383,8,15,10,
        15,12,15,386,9,15,1,15,1,15,1,16,1,16,3,16,392,8,16,1,16,1,16,1,
        16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,5,18,406,8,18,10,
        18,12,18,409,9,18,1,18,3,18,412,8,18,1,19,1,19,1,19,1,19,1,19,1,
        19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,
        22,1,22,1,22,1,22,3,22,436,8,22,1,22,1,22,1,22,1,23,1,23,1,23,3,
        23,444,8,23,1,23,3,23,447,8,23,1,24,5,24,450,8,24,10,24,12,24,453,
        9,24,1,24,1,24,3,24,457,8,24,1,24,1,24,3,24,461,8,24,1,24,1,24,3,
        24,465,8,24,1,24,1,24,1,24,1,24,1,24,3,24,472,8,24,1,25,1,25,1,25,
        3,25,477,8,25,1,25,1,25,5,25,481,8,25,10,25,12,25,484,9,25,1,25,
        1,25,1,25,1,25,1,25,3,25,491,8,25,1,26,1,26,1,26,3,26,496,8,26,1,
        26,3,26,499,8,26,1,26,5,26,502,8,26,10,26,12,26,505,9,26,1,26,1,
        26,1,26,1,26,1,26,3,26,512,8,26,1,27,1,27,1,27,1,27,5,27,518,8,27,
        10,27,12,27,521,9,27,1,27,1,27,1,27,1,27,1,27,3,27,528,8,27,1,28,
        1,28,1,28,1,28,1,28,3,28,535,8,28,1,29,1,29,1,29,3,29,540,8,29,1,
        30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,33,1,33,5,33,553,8,
        33,10,33,12,33,556,9,33,1,33,1,33,3,33,560,8,33,1,34,1,34,3,34,564,
        8,34,1,34,1,34,5,34,568,8,34,10,34,12,34,571,9,34,1,34,1,34,3,34,
        575,8,34,1,35,1,35,3,35,579,8,35,1,35,1,35,1,36,1,36,1,36,3,36,586,
        8,36,1,36,1,36,1,37,1,37,1,37,1,37,3,37,594,8,37,1,37,1,37,3,37,
        598,8,37,1,37,1,37,1,38,1,38,1,38,1,38,3,38,606,8,38,1,38,3,38,609,
        8,38,1,38,1,38,1,38,1,38,1,38,3,38,616,8,38,1,39,1,39,1,39,5,39,
        621,8,39,10,39,12,39,624,9,39,1,40,1,40,3,40,628,8,40,1,40,3,40,
        631,8,40,1,41,1,41,1,41,5,41,636,8,41,10,41,12,41,639,9,41,1,42,
        1,42,3,42,643,8,42,1,42,3,42,646,8,42,1,43,1,43,1,43,1,43,3,43,652,
        8,43,1,43,1,43,3,43,656,8,43,1,43,5,43,659,8,43,10,43,12,43,662,
        9,43,1,44,1,44,1,44,5,44,667,8,44,10,44,12,44,670,9,44,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,47,1,47,5,47,683,8,47,10,47,
        12,47,686,9,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
        3,48,698,8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,707,8,49,1,
        50,1,50,1,50,1,50,3,50,713,8,50,1,50,3,50,716,8,50,1,50,1,50,3,50,
        720,8,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,
        1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,3,53,741,8,53,1,54,1,54,
        1,54,3,54,746,8,54,1,54,1,54,1,55,1,55,1,55,5,55,753,8,55,10,55,
        12,55,756,9,55,1,56,1,56,3,56,760,8,56,1,56,1,56,1,57,1,57,1,57,
        1,58,1,58,1,58,3,58,770,8,58,1,58,5,58,773,8,58,10,58,12,58,776,
        9,58,1,58,1,58,1,58,1,58,1,59,1,59,3,59,784,8,59,1,59,1,59,3,59,
        788,8,59,1,59,3,59,791,8,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,
        61,1,61,3,61,802,8,61,1,61,1,61,5,61,806,8,61,10,61,12,61,809,9,
        61,1,61,1,61,1,62,1,62,3,62,815,8,62,1,62,1,62,5,62,819,8,62,10,
        62,12,62,822,9,62,1,62,1,62,1,63,1,63,1,63,3,63,829,8,63,1,64,1,
        64,1,64,1,64,1,64,1,64,5,64,837,8,64,10,64,12,64,840,9,64,3,64,842,
        8,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,3,65,853,8,65,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,866,
        8,66,1,67,1,67,5,67,870,8,67,10,67,12,67,873,9,67,1,67,1,67,1,68,
        1,68,1,68,1,68,3,68,881,8,68,1,68,1,68,3,68,885,8,68,1,69,1,69,1,
        70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,5,71,898,8,71,10,71,12,
        71,901,9,71,3,71,903,8,71,1,71,1,71,1,72,1,72,1,72,1,72,1,73,1,73,
        1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,74,5,74,923,8,74,
        10,74,12,74,926,9,74,1,74,1,74,3,74,930,8,74,1,75,1,75,1,76,1,76,
        1,77,1,77,1,78,1,78,1,78,1,79,1,79,1,79,1,79,3,79,945,8,79,1,80,
        1,80,1,81,1,81,1,82,1,82,1,82,5,82,954,8,82,10,82,12,82,957,9,82,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,3,83,977,8,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,3,83,1015,8,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,3,83,1024,8,83,1,83,5,83,1027,8,83,10,83,12,83,1030,9,
        83,1,84,1,84,1,84,1,84,5,84,1036,8,84,10,84,12,84,1039,9,84,1,84,
        1,84,1,84,3,84,1044,8,84,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,
        1,86,1,86,1,86,3,86,1057,8,86,1,87,1,87,3,87,1061,8,87,1,87,1,87,
        1,88,1,88,1,89,1,89,1,89,5,89,1070,8,89,10,89,12,89,1073,9,89,1,
        89,0,1,166,90,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,0,16,1,0,
        22,23,2,0,39,39,125,125,2,0,91,93,98,99,1,0,91,93,1,0,88,90,1,0,
        91,94,1,0,95,97,2,0,1,5,115,124,1,0,126,129,1,0,39,41,1,0,37,38,
        1,0,55,56,1,0,51,53,1,0,45,48,1,0,49,50,2,0,11,20,36,36,1169,0,195,
        1,0,0,0,2,200,1,0,0,0,4,209,1,0,0,0,6,241,1,0,0,0,8,243,1,0,0,0,
        10,247,1,0,0,0,12,256,1,0,0,0,14,280,1,0,0,0,16,302,1,0,0,0,18,318,
        1,0,0,0,20,328,1,0,0,0,22,334,1,0,0,0,24,336,1,0,0,0,26,350,1,0,
        0,0,28,363,1,0,0,0,30,378,1,0,0,0,32,389,1,0,0,0,34,396,1,0,0,0,
        36,402,1,0,0,0,38,413,1,0,0,0,40,419,1,0,0,0,42,425,1,0,0,0,44,431,
        1,0,0,0,46,440,1,0,0,0,48,451,1,0,0,0,50,473,1,0,0,0,52,492,1,0,
        0,0,54,513,1,0,0,0,56,534,1,0,0,0,58,539,1,0,0,0,60,541,1,0,0,0,
        62,543,1,0,0,0,64,545,1,0,0,0,66,547,1,0,0,0,68,561,1,0,0,0,70,576,
        1,0,0,0,72,582,1,0,0,0,74,589,1,0,0,0,76,601,1,0,0,0,78,617,1,0,
        0,0,80,625,1,0,0,0,82,632,1,0,0,0,84,640,1,0,0,0,86,651,1,0,0,0,
        88,663,1,0,0,0,90,671,1,0,0,0,92,678,1,0,0,0,94,680,1,0,0,0,96,697,
        1,0,0,0,98,699,1,0,0,0,100,708,1,0,0,0,102,724,1,0,0,0,104,730,1,
        0,0,0,106,740,1,0,0,0,108,742,1,0,0,0,110,749,1,0,0,0,112,757,1,
        0,0,0,114,763,1,0,0,0,116,766,1,0,0,0,118,781,1,0,0,0,120,796,1,
        0,0,0,122,799,1,0,0,0,124,812,1,0,0,0,126,828,1,0,0,0,128,830,1,
        0,0,0,130,852,1,0,0,0,132,865,1,0,0,0,134,867,1,0,0,0,136,876,1,
        0,0,0,138,886,1,0,0,0,140,888,1,0,0,0,142,892,1,0,0,0,144,906,1,
        0,0,0,146,910,1,0,0,0,148,916,1,0,0,0,150,931,1,0,0,0,152,933,1,
        0,0,0,154,935,1,0,0,0,156,937,1,0,0,0,158,944,1,0,0,0,160,946,1,
        0,0,0,162,948,1,0,0,0,164,950,1,0,0,0,166,976,1,0,0,0,168,1043,1,
        0,0,0,170,1045,1,0,0,0,172,1056,1,0,0,0,174,1058,1,0,0,0,176,1064,
        1,0,0,0,178,1066,1,0,0,0,180,194,3,2,1,0,181,194,3,4,2,0,182,194,
        3,12,6,0,183,194,3,14,7,0,184,194,3,16,8,0,185,194,3,48,24,0,186,
        194,3,26,13,0,187,194,3,28,14,0,188,194,3,30,15,0,189,194,3,34,17,
        0,190,194,3,40,20,0,191,194,3,44,22,0,192,194,3,42,21,0,193,180,
        1,0,0,0,193,181,1,0,0,0,193,182,1,0,0,0,193,183,1,0,0,0,193,184,
        1,0,0,0,193,185,1,0,0,0,193,186,1,0,0,0,193,187,1,0,0,0,193,188,
        1,0,0,0,193,189,1,0,0,0,193,190,1,0,0,0,193,191,1,0,0,0,193,192,
        1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,198,
        1,0,0,0,197,195,1,0,0,0,198,199,5,0,0,1,199,1,1,0,0,0,200,201,5,
        21,0,0,201,205,7,0,0,0,202,206,5,25,0,0,203,204,5,24,0,0,204,206,
        5,127,0,0,205,202,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,207,
        1,0,0,0,207,208,5,29,0,0,208,3,1,0,0,0,209,212,5,26,0,0,210,213,
        3,6,3,0,211,213,3,8,4,0,212,210,1,0,0,0,212,211,1,0,0,0,213,5,1,
        0,0,0,214,242,5,126,0,0,215,216,7,1,0,0,216,217,5,27,0,0,217,218,
        5,125,0,0,218,219,5,28,0,0,219,242,5,126,0,0,220,221,5,32,0,0,221,
        224,3,10,5,0,222,223,5,27,0,0,223,225,5,125,0,0,224,222,1,0,0,0,
        224,225,1,0,0,0,225,234,1,0,0,0,226,227,5,59,0,0,227,230,3,10,5,
        0,228,229,5,27,0,0,229,231,5,125,0,0,230,228,1,0,0,0,230,231,1,0,
        0,0,231,233,1,0,0,0,232,226,1,0,0,0,233,236,1,0,0,0,234,232,1,0,
        0,0,234,235,1,0,0,0,235,237,1,0,0,0,236,234,1,0,0,0,237,238,5,33,
        0,0,238,239,5,28,0,0,239,240,5,126,0,0,240,242,1,0,0,0,241,214,1,
        0,0,0,241,215,1,0,0,0,241,220,1,0,0,0,242,7,1,0,0,0,243,244,5,125,
        0,0,244,245,5,36,0,0,245,246,3,6,3,0,246,9,1,0,0,0,247,252,5,125,
        0,0,248,249,5,60,0,0,249,251,5,125,0,0,250,248,1,0,0,0,251,254,1,
        0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,11,1,0,0,0,254,252,1,0,
        0,0,255,257,5,61,0,0,256,255,1,0,0,0,256,257,1,0,0,0,257,258,1,0,
        0,0,258,259,5,62,0,0,259,269,5,125,0,0,260,261,5,113,0,0,261,266,
        3,46,23,0,262,263,5,59,0,0,263,265,3,46,23,0,264,262,1,0,0,0,265,
        268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,270,1,0,0,0,268,
        266,1,0,0,0,269,260,1,0,0,0,269,270,1,0,0,0,270,271,1,0,0,0,271,
        275,5,32,0,0,272,274,3,20,10,0,273,272,1,0,0,0,274,277,1,0,0,0,275,
        273,1,0,0,0,275,276,1,0,0,0,276,278,1,0,0,0,277,275,1,0,0,0,278,
        279,5,33,0,0,279,13,1,0,0,0,280,281,5,63,0,0,281,291,5,125,0,0,282,
        283,5,113,0,0,283,288,3,46,23,0,284,285,5,59,0,0,285,287,3,46,23,
        0,286,284,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,
        0,289,292,1,0,0,0,290,288,1,0,0,0,291,282,1,0,0,0,291,292,1,0,0,
        0,292,293,1,0,0,0,293,297,5,32,0,0,294,296,3,22,11,0,295,294,1,0,
        0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,300,1,0,
        0,0,299,297,1,0,0,0,300,301,5,33,0,0,301,15,1,0,0,0,302,303,5,64,
        0,0,303,304,5,125,0,0,304,308,5,32,0,0,305,307,3,18,9,0,306,305,
        1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,311,
        1,0,0,0,310,308,1,0,0,0,311,312,5,33,0,0,312,17,1,0,0,0,313,319,
        3,24,12,0,314,319,3,48,24,0,315,319,3,30,15,0,316,319,3,34,17,0,
        317,319,3,38,19,0,318,313,1,0,0,0,318,314,1,0,0,0,318,315,1,0,0,
        0,318,316,1,0,0,0,318,317,1,0,0,0,319,19,1,0,0,0,320,329,3,24,12,
        0,321,329,3,48,24,0,322,329,3,50,25,0,323,329,3,76,38,0,324,329,
        3,74,37,0,325,329,3,34,17,0,326,329,3,30,15,0,327,329,3,38,19,0,
        328,320,1,0,0,0,328,321,1,0,0,0,328,322,1,0,0,0,328,323,1,0,0,0,
        328,324,1,0,0,0,328,325,1,0,0,0,328,326,1,0,0,0,328,327,1,0,0,0,
        329,21,1,0,0,0,330,335,3,48,24,0,331,335,3,74,37,0,332,335,3,34,
        17,0,333,335,3,30,15,0,334,330,1,0,0,0,334,331,1,0,0,0,334,332,1,
        0,0,0,334,333,1,0,0,0,335,23,1,0,0,0,336,340,3,86,43,0,337,339,7,
        2,0,0,338,337,1,0,0,0,339,342,1,0,0,0,340,338,1,0,0,0,340,341,1,
        0,0,0,341,343,1,0,0,0,342,340,1,0,0,0,343,346,5,125,0,0,344,345,
        5,36,0,0,345,347,3,166,83,0,346,344,1,0,0,0,346,347,1,0,0,0,347,
        348,1,0,0,0,348,349,5,29,0,0,349,25,1,0,0,0,350,354,3,86,43,0,351,
        353,7,3,0,0,352,351,1,0,0,0,353,356,1,0,0,0,354,352,1,0,0,0,354,
        355,1,0,0,0,355,357,1,0,0,0,356,354,1,0,0,0,357,358,5,98,0,0,358,
        359,5,125,0,0,359,360,5,36,0,0,360,361,3,166,83,0,361,362,5,29,0,
        0,362,27,1,0,0,0,363,367,3,86,43,0,364,366,7,3,0,0,365,364,1,0,0,
        0,366,369,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,370,1,0,0,
        0,369,367,1,0,0,0,370,371,5,99,0,0,371,374,5,125,0,0,372,373,5,36,
        0,0,373,375,3,166,83,0,374,372,1,0,0,0,374,375,1,0,0,0,375,376,1,
        0,0,0,376,377,5,29,0,0,377,29,1,0,0,0,378,379,5,69,0,0,379,380,5,
        125,0,0,380,384,5,32,0,0,381,383,3,32,16,0,382,381,1,0,0,0,383,386,
        1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,387,1,0,0,0,386,384,
        1,0,0,0,387,388,5,33,0,0,388,31,1,0,0,0,389,391,3,86,43,0,390,392,
        7,4,0,0,391,390,1,0,0,0,391,392,1,0,0,0,392,393,1,0,0,0,393,394,
        5,125,0,0,394,395,5,29,0,0,395,33,1,0,0,0,396,397,5,70,0,0,397,398,
        5,125,0,0,398,399,5,32,0,0,399,400,3,36,18,0,400,401,5,33,0,0,401,
        35,1,0,0,0,402,407,5,125,0,0,403,404,5,59,0,0,404,406,5,125,0,0,
        405,403,1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,
        408,411,1,0,0,0,409,407,1,0,0,0,410,412,5,59,0,0,411,410,1,0,0,0,
        411,412,1,0,0,0,412,37,1,0,0,0,413,414,5,104,0,0,414,415,5,125,0,
        0,415,416,5,73,0,0,416,417,3,86,43,0,417,418,5,29,0,0,418,39,1,0,
        0,0,419,420,5,105,0,0,420,421,5,125,0,0,421,422,5,113,0,0,422,423,
        3,86,43,0,423,424,5,29,0,0,424,41,1,0,0,0,425,426,5,104,0,0,426,
        427,5,125,0,0,427,428,5,73,0,0,428,429,3,86,43,0,429,430,5,29,0,
        0,430,43,1,0,0,0,431,432,5,106,0,0,432,433,5,125,0,0,433,435,5,30,
        0,0,434,436,3,82,41,0,435,434,1,0,0,0,435,436,1,0,0,0,436,437,1,
        0,0,0,437,438,5,31,0,0,438,439,5,29,0,0,439,45,1,0,0,0,440,446,3,
        88,44,0,441,443,5,30,0,0,442,444,3,178,89,0,443,442,1,0,0,0,443,
        444,1,0,0,0,444,445,1,0,0,0,445,447,5,31,0,0,446,441,1,0,0,0,446,
        447,1,0,0,0,447,47,1,0,0,0,448,450,3,56,28,0,449,448,1,0,0,0,450,
        453,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,454,1,0,0,0,453,
        451,1,0,0,0,454,456,5,65,0,0,455,457,5,125,0,0,456,455,1,0,0,0,456,
        457,1,0,0,0,457,458,1,0,0,0,458,460,5,30,0,0,459,461,3,82,41,0,460,
        459,1,0,0,0,460,461,1,0,0,0,461,462,1,0,0,0,462,464,5,31,0,0,463,
        465,3,72,36,0,464,463,1,0,0,0,464,465,1,0,0,0,465,471,1,0,0,0,466,
        467,5,32,0,0,467,468,3,94,47,0,468,469,5,33,0,0,469,472,1,0,0,0,
        470,472,5,29,0,0,471,466,1,0,0,0,471,470,1,0,0,0,472,49,1,0,0,0,
        473,474,5,114,0,0,474,476,5,30,0,0,475,477,3,82,41,0,476,475,1,0,
        0,0,476,477,1,0,0,0,477,478,1,0,0,0,478,482,5,31,0,0,479,481,3,58,
        29,0,480,479,1,0,0,0,481,484,1,0,0,0,482,480,1,0,0,0,482,483,1,0,
        0,0,483,490,1,0,0,0,484,482,1,0,0,0,485,486,5,32,0,0,486,487,3,94,
        47,0,487,488,5,33,0,0,488,491,1,0,0,0,489,491,5,29,0,0,490,485,1,
        0,0,0,490,489,1,0,0,0,491,51,1,0,0,0,492,498,5,111,0,0,493,495,5,
        30,0,0,494,496,3,82,41,0,495,494,1,0,0,0,495,496,1,0,0,0,496,497,
        1,0,0,0,497,499,5,31,0,0,498,493,1,0,0,0,498,499,1,0,0,0,499,503,
        1,0,0,0,500,502,3,56,28,0,501,500,1,0,0,0,502,505,1,0,0,0,503,501,
        1,0,0,0,503,504,1,0,0,0,504,511,1,0,0,0,505,503,1,0,0,0,506,507,
        5,32,0,0,507,508,3,94,47,0,508,509,5,33,0,0,509,512,1,0,0,0,510,
        512,5,29,0,0,511,506,1,0,0,0,511,510,1,0,0,0,512,53,1,0,0,0,513,
        514,5,112,0,0,514,515,5,30,0,0,515,519,5,31,0,0,516,518,3,56,28,
        0,517,516,1,0,0,0,518,521,1,0,0,0,519,517,1,0,0,0,519,520,1,0,0,
        0,520,527,1,0,0,0,521,519,1,0,0,0,522,523,5,32,0,0,523,524,3,94,
        47,0,524,525,5,33,0,0,525,528,1,0,0,0,526,528,5,29,0,0,527,522,1,
        0,0,0,527,526,1,0,0,0,528,55,1,0,0,0,529,535,3,62,31,0,530,535,3,
        64,32,0,531,535,5,103,0,0,532,535,3,66,33,0,533,535,3,60,30,0,534,
        529,1,0,0,0,534,530,1,0,0,0,534,531,1,0,0,0,534,532,1,0,0,0,534,
        533,1,0,0,0,535,57,1,0,0,0,536,540,3,62,31,0,537,540,3,64,32,0,538,
        540,3,60,30,0,539,536,1,0,0,0,539,537,1,0,0,0,539,538,1,0,0,0,540,
        59,1,0,0,0,541,542,5,125,0,0,542,61,1,0,0,0,543,544,7,5,0,0,544,
        63,1,0,0,0,545,546,7,6,0,0,546,65,1,0,0,0,547,559,5,102,0,0,548,
        549,5,30,0,0,549,554,3,88,44,0,550,551,5,59,0,0,551,553,3,88,44,
        0,552,550,1,0,0,0,553,556,1,0,0,0,554,552,1,0,0,0,554,555,1,0,0,
        0,555,557,1,0,0,0,556,554,1,0,0,0,557,558,5,31,0,0,558,560,1,0,0,
        0,559,548,1,0,0,0,559,560,1,0,0,0,560,67,1,0,0,0,561,563,5,65,0,
        0,562,564,3,70,35,0,563,562,1,0,0,0,563,564,1,0,0,0,564,569,1,0,
        0,0,565,568,3,62,31,0,566,568,3,64,32,0,567,565,1,0,0,0,567,566,
        1,0,0,0,568,571,1,0,0,0,569,567,1,0,0,0,569,570,1,0,0,0,570,574,
        1,0,0,0,571,569,1,0,0,0,572,573,5,66,0,0,573,575,3,70,35,0,574,572,
        1,0,0,0,574,575,1,0,0,0,575,69,1,0,0,0,576,578,5,30,0,0,577,579,
        3,82,41,0,578,577,1,0,0,0,578,579,1,0,0,0,579,580,1,0,0,0,580,581,
        5,31,0,0,581,71,1,0,0,0,582,583,5,66,0,0,583,585,5,30,0,0,584,586,
        3,82,41,0,585,584,1,0,0,0,585,586,1,0,0,0,586,587,1,0,0,0,587,588,
        5,31,0,0,588,73,1,0,0,0,589,590,5,67,0,0,590,591,5,125,0,0,591,593,
        5,30,0,0,592,594,3,78,39,0,593,592,1,0,0,0,593,594,1,0,0,0,594,595,
        1,0,0,0,595,597,5,31,0,0,596,598,5,100,0,0,597,596,1,0,0,0,597,598,
        1,0,0,0,598,599,1,0,0,0,599,600,5,29,0,0,600,75,1,0,0,0,601,602,
        5,68,0,0,602,608,5,125,0,0,603,605,5,30,0,0,604,606,3,82,41,0,605,
        604,1,0,0,0,605,606,1,0,0,0,606,607,1,0,0,0,607,609,5,31,0,0,608,
        603,1,0,0,0,608,609,1,0,0,0,609,615,1,0,0,0,610,611,5,32,0,0,611,
        612,3,94,47,0,612,613,5,33,0,0,613,616,1,0,0,0,614,616,5,29,0,0,
        615,610,1,0,0,0,615,614,1,0,0,0,616,77,1,0,0,0,617,622,3,80,40,0,
        618,619,5,59,0,0,619,621,3,80,40,0,620,618,1,0,0,0,621,624,1,0,0,
        0,622,620,1,0,0,0,622,623,1,0,0,0,623,79,1,0,0,0,624,622,1,0,0,0,
        625,627,3,86,43,0,626,628,5,101,0,0,627,626,1,0,0,0,627,628,1,0,
        0,0,628,630,1,0,0,0,629,631,5,125,0,0,630,629,1,0,0,0,630,631,1,
        0,0,0,631,81,1,0,0,0,632,637,3,84,42,0,633,634,5,59,0,0,634,636,
        3,84,42,0,635,633,1,0,0,0,636,639,1,0,0,0,637,635,1,0,0,0,637,638,
        1,0,0,0,638,83,1,0,0,0,639,637,1,0,0,0,640,642,3,86,43,0,641,643,
        7,4,0,0,642,641,1,0,0,0,642,643,1,0,0,0,643,645,1,0,0,0,644,646,
        5,125,0,0,645,644,1,0,0,0,645,646,1,0,0,0,646,85,1,0,0,0,647,652,
        3,92,46,0,648,652,3,88,44,0,649,652,3,90,45,0,650,652,3,68,34,0,
        651,647,1,0,0,0,651,648,1,0,0,0,651,649,1,0,0,0,651,650,1,0,0,0,
        652,660,1,0,0,0,653,655,5,34,0,0,654,656,3,166,83,0,655,654,1,0,
        0,0,655,656,1,0,0,0,656,657,1,0,0,0,657,659,5,35,0,0,658,653,1,0,
        0,0,659,662,1,0,0,0,660,658,1,0,0,0,660,661,1,0,0,0,661,87,1,0,0,
        0,662,660,1,0,0,0,663,668,5,125,0,0,664,665,5,60,0,0,665,667,5,125,
        0,0,666,664,1,0,0,0,667,670,1,0,0,0,668,666,1,0,0,0,668,669,1,0,
        0,0,669,89,1,0,0,0,670,668,1,0,0,0,671,672,5,87,0,0,672,673,5,30,
        0,0,673,674,3,92,46,0,674,675,5,110,0,0,675,676,3,86,43,0,676,677,
        5,31,0,0,677,91,1,0,0,0,678,679,7,7,0,0,679,93,1,0,0,0,680,684,5,
        32,0,0,681,683,3,96,48,0,682,681,1,0,0,0,683,686,1,0,0,0,684,682,
        1,0,0,0,684,685,1,0,0,0,685,687,1,0,0,0,686,684,1,0,0,0,687,688,
        5,33,0,0,688,95,1,0,0,0,689,698,3,98,49,0,690,698,3,100,50,0,691,
        698,3,102,51,0,692,698,3,104,52,0,693,698,3,106,53,0,694,698,3,116,
        58,0,695,698,3,122,61,0,696,698,3,120,60,0,697,689,1,0,0,0,697,690,
        1,0,0,0,697,691,1,0,0,0,697,692,1,0,0,0,697,693,1,0,0,0,697,694,
        1,0,0,0,697,695,1,0,0,0,697,696,1,0,0,0,698,97,1,0,0,0,699,700,5,
        71,0,0,700,701,5,30,0,0,701,702,3,166,83,0,702,703,5,31,0,0,703,
        706,3,96,48,0,704,705,5,72,0,0,705,707,3,96,48,0,706,704,1,0,0,0,
        706,707,1,0,0,0,707,99,1,0,0,0,708,709,5,73,0,0,709,712,5,30,0,0,
        710,713,3,106,53,0,711,713,5,29,0,0,712,710,1,0,0,0,712,711,1,0,
        0,0,713,715,1,0,0,0,714,716,3,166,83,0,715,714,1,0,0,0,715,716,1,
        0,0,0,716,717,1,0,0,0,717,719,5,29,0,0,718,720,3,166,83,0,719,718,
        1,0,0,0,719,720,1,0,0,0,720,721,1,0,0,0,721,722,5,31,0,0,722,723,
        3,96,48,0,723,101,1,0,0,0,724,725,5,74,0,0,725,726,5,30,0,0,726,
        727,3,166,83,0,727,728,5,31,0,0,728,729,3,96,48,0,729,103,1,0,0,
        0,730,731,5,75,0,0,731,732,3,96,48,0,732,733,5,74,0,0,733,734,5,
        30,0,0,734,735,3,166,83,0,735,736,5,31,0,0,736,737,5,29,0,0,737,
        105,1,0,0,0,738,741,3,108,54,0,739,741,3,114,57,0,740,738,1,0,0,
        0,740,739,1,0,0,0,741,107,1,0,0,0,742,745,3,110,55,0,743,744,5,36,
        0,0,744,746,3,178,89,0,745,743,1,0,0,0,745,746,1,0,0,0,746,747,1,
        0,0,0,747,748,5,29,0,0,748,109,1,0,0,0,749,754,3,112,56,0,750,751,
        5,59,0,0,751,753,3,112,56,0,752,750,1,0,0,0,753,756,1,0,0,0,754,
        752,1,0,0,0,754,755,1,0,0,0,755,111,1,0,0,0,756,754,1,0,0,0,757,
        759,3,86,43,0,758,760,7,4,0,0,759,758,1,0,0,0,759,760,1,0,0,0,760,
        761,1,0,0,0,761,762,5,125,0,0,762,113,1,0,0,0,763,764,3,166,83,0,
        764,765,5,29,0,0,765,115,1,0,0,0,766,767,5,76,0,0,767,769,3,166,
        83,0,768,770,3,72,36,0,769,768,1,0,0,0,769,770,1,0,0,0,770,774,1,
        0,0,0,771,773,3,118,59,0,772,771,1,0,0,0,773,776,1,0,0,0,774,772,
        1,0,0,0,774,775,1,0,0,0,775,777,1,0,0,0,776,774,1,0,0,0,777,778,
        5,32,0,0,778,779,3,94,47,0,779,780,5,33,0,0,780,117,1,0,0,0,781,
        783,5,77,0,0,782,784,5,125,0,0,783,782,1,0,0,0,783,784,1,0,0,0,784,
        790,1,0,0,0,785,787,5,30,0,0,786,788,3,82,41,0,787,786,1,0,0,0,787,
        788,1,0,0,0,788,789,1,0,0,0,789,791,5,31,0,0,790,785,1,0,0,0,790,
        791,1,0,0,0,791,792,1,0,0,0,792,793,5,32,0,0,793,794,3,94,47,0,794,
        795,5,33,0,0,795,119,1,0,0,0,796,797,5,107,0,0,797,798,3,94,47,0,
        798,121,1,0,0,0,799,801,5,79,0,0,800,802,5,126,0,0,801,800,1,0,0,
        0,801,802,1,0,0,0,802,803,1,0,0,0,803,807,5,32,0,0,804,806,3,132,
        66,0,805,804,1,0,0,0,806,809,1,0,0,0,807,805,1,0,0,0,807,808,1,0,
        0,0,808,810,1,0,0,0,809,807,1,0,0,0,810,811,5,33,0,0,811,123,1,0,
        0,0,812,814,5,79,0,0,813,815,5,126,0,0,814,813,1,0,0,0,814,815,1,
        0,0,0,815,816,1,0,0,0,816,820,5,32,0,0,817,819,3,126,63,0,818,817,
        1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,0,820,821,1,0,0,0,821,823,
        1,0,0,0,822,820,1,0,0,0,823,824,5,33,0,0,824,125,1,0,0,0,825,829,
        3,128,64,0,826,829,3,130,65,0,827,829,3,132,66,0,828,825,1,0,0,0,
        828,826,1,0,0,0,828,827,1,0,0,0,829,127,1,0,0,0,830,831,5,65,0,0,
        831,832,3,162,81,0,832,841,5,30,0,0,833,838,3,138,69,0,834,835,5,
        59,0,0,835,837,3,138,69,0,836,834,1,0,0,0,837,840,1,0,0,0,838,836,
        1,0,0,0,838,839,1,0,0,0,839,842,1,0,0,0,840,838,1,0,0,0,841,833,
        1,0,0,0,841,842,1,0,0,0,842,843,1,0,0,0,843,844,5,31,0,0,844,845,
        3,134,67,0,845,129,1,0,0,0,846,847,5,6,0,0,847,848,3,162,81,0,848,
        849,3,134,67,0,849,853,1,0,0,0,850,851,5,7,0,0,851,853,3,134,67,
        0,852,846,1,0,0,0,852,850,1,0,0,0,853,131,1,0,0,0,854,866,3,134,
        67,0,855,866,3,136,68,0,856,866,3,140,70,0,857,866,3,142,71,0,858,
        866,3,144,72,0,859,866,3,146,73,0,860,866,3,148,74,0,861,866,3,150,
        75,0,862,866,3,152,76,0,863,866,3,154,77,0,864,866,3,156,78,0,865,
        854,1,0,0,0,865,855,1,0,0,0,865,856,1,0,0,0,865,857,1,0,0,0,865,
        858,1,0,0,0,865,859,1,0,0,0,865,860,1,0,0,0,865,861,1,0,0,0,865,
        862,1,0,0,0,865,863,1,0,0,0,865,864,1,0,0,0,866,133,1,0,0,0,867,
        871,5,32,0,0,868,870,3,132,66,0,869,868,1,0,0,0,870,873,1,0,0,0,
        871,869,1,0,0,0,871,872,1,0,0,0,872,874,1,0,0,0,873,871,1,0,0,0,
        874,875,5,33,0,0,875,135,1,0,0,0,876,877,5,80,0,0,877,880,3,162,
        81,0,878,879,5,58,0,0,879,881,3,138,69,0,880,878,1,0,0,0,880,881,
        1,0,0,0,881,884,1,0,0,0,882,883,5,36,0,0,883,885,3,158,79,0,884,
        882,1,0,0,0,884,885,1,0,0,0,885,137,1,0,0,0,886,887,3,162,81,0,887,
        139,1,0,0,0,888,889,3,164,82,0,889,890,5,36,0,0,890,891,3,158,79,
        0,891,141,1,0,0,0,892,893,3,162,81,0,893,902,5,30,0,0,894,899,3,
        158,79,0,895,896,5,59,0,0,896,898,3,158,79,0,897,895,1,0,0,0,898,
        901,1,0,0,0,899,897,1,0,0,0,899,900,1,0,0,0,900,903,1,0,0,0,901,
        899,1,0,0,0,902,894,1,0,0,0,902,903,1,0,0,0,903,904,1,0,0,0,904,
        905,5,31,0,0,905,143,1,0,0,0,906,907,5,71,0,0,907,908,3,158,79,0,
        908,909,3,134,67,0,909,145,1,0,0,0,910,911,5,73,0,0,911,912,3,134,
        67,0,912,913,3,158,79,0,913,914,3,134,67,0,914,915,3,134,67,0,915,
        147,1,0,0,0,916,917,5,8,0,0,917,924,3,158,79,0,918,919,5,9,0,0,919,
        920,3,160,80,0,920,921,3,134,67,0,921,923,1,0,0,0,922,918,1,0,0,
        0,923,926,1,0,0,0,924,922,1,0,0,0,924,925,1,0,0,0,925,929,1,0,0,
        0,926,924,1,0,0,0,927,928,5,10,0,0,928,930,3,134,67,0,929,927,1,
        0,0,0,929,930,1,0,0,0,930,149,1,0,0,0,931,932,5,81,0,0,932,151,1,
        0,0,0,933,934,5,82,0,0,934,153,1,0,0,0,935,936,5,83,0,0,936,155,
        1,0,0,0,937,938,5,125,0,0,938,939,5,58,0,0,939,157,1,0,0,0,940,945,
        3,160,80,0,941,945,3,162,81,0,942,945,3,142,71,0,943,945,3,164,82,
        0,944,940,1,0,0,0,944,941,1,0,0,0,944,942,1,0,0,0,944,943,1,0,0,
        0,945,159,1,0,0,0,946,947,7,8,0,0,947,161,1,0,0,0,948,949,5,125,
        0,0,949,163,1,0,0,0,950,955,3,162,81,0,951,952,5,60,0,0,952,954,
        3,162,81,0,953,951,1,0,0,0,954,957,1,0,0,0,955,953,1,0,0,0,955,956,
        1,0,0,0,956,165,1,0,0,0,957,955,1,0,0,0,958,959,6,83,-1,0,959,977,
        3,172,86,0,960,961,5,85,0,0,961,977,3,86,43,0,962,963,5,86,0,0,963,
        977,3,166,83,10,964,965,5,108,0,0,965,977,3,166,83,9,966,967,5,109,
        0,0,967,977,3,166,83,8,968,969,5,37,0,0,969,977,3,166,83,7,970,971,
        5,38,0,0,971,977,3,166,83,6,972,973,5,54,0,0,973,977,3,166,83,5,
        974,975,5,44,0,0,975,977,3,166,83,4,976,958,1,0,0,0,976,960,1,0,
        0,0,976,962,1,0,0,0,976,964,1,0,0,0,976,966,1,0,0,0,976,968,1,0,
        0,0,976,970,1,0,0,0,976,972,1,0,0,0,976,974,1,0,0,0,977,1028,1,0,
        0,0,978,979,10,21,0,0,979,980,7,9,0,0,980,1027,3,166,83,22,981,982,
        10,20,0,0,982,983,7,10,0,0,983,1027,3,166,83,21,984,985,10,19,0,
        0,985,986,7,11,0,0,986,1027,3,166,83,20,987,988,10,18,0,0,988,989,
        7,12,0,0,989,1027,3,166,83,19,990,991,10,17,0,0,991,992,7,13,0,0,
        992,1027,3,166,83,18,993,994,10,16,0,0,994,995,7,14,0,0,995,1027,
        3,166,83,17,996,997,10,15,0,0,997,998,5,42,0,0,998,1027,3,166,83,
        16,999,1000,10,14,0,0,1000,1001,5,43,0,0,1001,1027,3,166,83,15,1002,
        1003,10,13,0,0,1003,1004,5,57,0,0,1004,1005,3,166,83,0,1005,1006,
        5,58,0,0,1006,1007,3,166,83,14,1007,1027,1,0,0,0,1008,1009,10,12,
        0,0,1009,1010,7,15,0,0,1010,1027,3,166,83,13,1011,1012,10,3,0,0,
        1012,1014,5,34,0,0,1013,1015,3,166,83,0,1014,1013,1,0,0,0,1014,1015,
        1,0,0,0,1015,1016,1,0,0,0,1016,1027,5,35,0,0,1017,1018,10,2,0,0,
        1018,1019,5,60,0,0,1019,1027,5,125,0,0,1020,1021,10,1,0,0,1021,1023,
        5,30,0,0,1022,1024,3,168,84,0,1023,1022,1,0,0,0,1023,1024,1,0,0,
        0,1024,1025,1,0,0,0,1025,1027,5,31,0,0,1026,978,1,0,0,0,1026,981,
        1,0,0,0,1026,984,1,0,0,0,1026,987,1,0,0,0,1026,990,1,0,0,0,1026,
        993,1,0,0,0,1026,996,1,0,0,0,1026,999,1,0,0,0,1026,1002,1,0,0,0,
        1026,1008,1,0,0,0,1026,1011,1,0,0,0,1026,1017,1,0,0,0,1026,1020,
        1,0,0,0,1027,1030,1,0,0,0,1028,1026,1,0,0,0,1028,1029,1,0,0,0,1029,
        167,1,0,0,0,1030,1028,1,0,0,0,1031,1032,5,32,0,0,1032,1037,3,170,
        85,0,1033,1034,5,59,0,0,1034,1036,3,170,85,0,1035,1033,1,0,0,0,1036,
        1039,1,0,0,0,1037,1035,1,0,0,0,1037,1038,1,0,0,0,1038,1040,1,0,0,
        0,1039,1037,1,0,0,0,1040,1041,5,33,0,0,1041,1044,1,0,0,0,1042,1044,
        3,178,89,0,1043,1031,1,0,0,0,1043,1042,1,0,0,0,1044,169,1,0,0,0,
        1045,1046,5,125,0,0,1046,1047,5,58,0,0,1047,1048,3,166,83,0,1048,
        171,1,0,0,0,1049,1057,5,125,0,0,1050,1057,5,127,0,0,1051,1057,5,
        128,0,0,1052,1057,5,129,0,0,1053,1057,5,126,0,0,1054,1057,3,174,
        87,0,1055,1057,3,176,88,0,1056,1049,1,0,0,0,1056,1050,1,0,0,0,1056,
        1051,1,0,0,0,1056,1052,1,0,0,0,1056,1053,1,0,0,0,1056,1054,1,0,0,
        0,1056,1055,1,0,0,0,1057,173,1,0,0,0,1058,1060,5,30,0,0,1059,1061,
        3,178,89,0,1060,1059,1,0,0,0,1060,1061,1,0,0,0,1061,1062,1,0,0,0,
        1062,1063,5,31,0,0,1063,175,1,0,0,0,1064,1065,3,86,43,0,1065,177,
        1,0,0,0,1066,1071,3,166,83,0,1067,1068,5,59,0,0,1068,1070,3,166,
        83,0,1069,1067,1,0,0,0,1070,1073,1,0,0,0,1071,1069,1,0,0,0,1071,
        1072,1,0,0,0,1072,179,1,0,0,0,1073,1071,1,0,0,0,114,193,195,205,
        212,224,230,234,241,252,256,266,269,275,288,291,297,308,318,328,
        334,340,346,354,367,374,384,391,407,411,435,443,446,451,456,460,
        464,471,476,482,490,495,498,503,511,519,527,534,539,554,559,563,
        567,569,574,578,585,593,597,605,608,615,622,627,630,637,642,645,
        651,655,660,668,684,697,706,712,715,719,740,745,754,759,769,774,
        783,787,790,801,807,814,820,828,838,841,852,865,871,880,884,899,
        902,924,929,944,955,976,1014,1023,1026,1028,1037,1043,1056,1060,
        1071
    ]

class SolidityParser ( Parser ):

    grammarFileName = "Solidity.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'address'", "'bool'", "'string'", "'var'", 
                     "'byte'", "'object'", "'code'", "'switch'", "'case'", 
                     "'default'", "'|='", "'^='", "'&='", "'<<='", "'>>='", 
                     "'+='", "'-='", "'*='", "'/='", "'%='", "'pragma'", 
                     "'solidity'", "'experimental'", "'abicoder'", "<INVALID>", 
                     "'import'", "'as'", "'from'", "';'", "'('", "')'", 
                     "'{'", "'}'", "'['", "']'", "'='", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'&&'", "'||'", "'!'", "'<'", "'>'", 
                     "'<='", "'>='", "'=='", "'!='", "'&'", "'|'", "'^'", 
                     "'~'", "'<<'", "'>>'", "'?'", "':'", "','", "'.'", 
                     "'abstract'", "'contract'", "'interface'", "'library'", 
                     "'function'", "'returns'", "'event'", "'modifier'", 
                     "'struct'", "'enum'", "'if'", "'else'", "'for'", "'while'", 
                     "'do'", "'try'", "'catch'", "'revert'", "'assembly'", 
                     "'let'", "'leave'", "'break'", "'continue'", "'return'", 
                     "'new'", "'delete'", "'mapping'", "'memory'", "'storage'", 
                     "'calldata'", "'public'", "'private'", "'internal'", 
                     "'external'", "'pure'", "'view'", "'payable'", "'constant'", 
                     "'immutable'", "'anonymous'", "'indexed'", "'override'", 
                     "'virtual'", "'using'", "'type'", "'error'", "'unchecked'", 
                     "'++'", "'--'", "'=>'", "'fallback'", "'receive'", 
                     "'is'", "'constructor'", "<INVALID>", "'bytes'", "<INVALID>", 
                     "'int'", "<INVALID>", "'uint'", "<INVALID>", "'fixed'", 
                     "<INVALID>", "'ufixed'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "PRAGMA", "SOLIDITY", "EXPERIMENTAL", 
                      "ABICODER", "VERSION", "IMPORT", "AS", "FROM", "SEMICOLON", 
                      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
                      "RBRACK", "ASSIGN", "PLUS", "MINUS", "MULT", "DIV", 
                      "MOD", "AND", "OR", "NOT", "LT", "GT", "LTE", "GTE", 
                      "EQ", "NEQ", "BIT_AND", "BIT_OR", "BIT_XOR", "BIT_NOT", 
                      "LSHIFT", "RSHIFT", "QUESTION", "COLON", "COMMA", 
                      "DOT", "ABSTRACT", "CONTRACT", "INTERFACE", "LIBRARY", 
                      "FUNCTION", "RETURNS", "EVENT", "MODIFIER", "STRUCT", 
                      "ENUM", "IF", "ELSE", "FOR", "WHILE", "DO", "TRY", 
                      "CATCH", "REVERT", "ASSEMBLY", "LET", "LEAVE", "BREAK", 
                      "CONTINUE", "RETURN", "NEW", "DELETE", "MAPPING", 
                      "MEMORY", "STORAGE", "CALLDATA", "PUBLIC", "PRIVATE", 
                      "INTERNAL", "EXTERNAL", "PURE", "VIEW", "PAYABLE", 
                      "CONSTANT", "IMMUTABLE", "ANONYMOUS", "INDEXED", "OVERRIDE", 
                      "VIRTUAL", "USING", "TYPE", "ERROR", "UNCHECKED", 
                      "PLUSPLUS", "MINUSMINUS", "ASSIGN_GT", "FALLBACK", 
                      "RECEIVE", "IS", "CONSTRUCTOR", "BYTES_NUMBER", "BYTES", 
                      "INT_NUMBER", "INT", "UINT_NUMBER", "UINT", "FIXED_NUMBER", 
                      "FIXED", "UFIXED_NUMBER", "UFIXED", "IDENTIFIER", 
                      "STRING_LITERAL", "DECIMAL_LITERAL", "HEX_LITERAL", 
                      "BOOL_LITERAL", "WS", "COMMENT", "MULTI_LINE_COMMENT", 
                      "DOC_COMMENT", "NAT_SPEC" ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_importDirective = 2
    RULE_importDeclaration = 3
    RULE_importAlias = 4
    RULE_identifierPath = 5
    RULE_contractDefinition = 6
    RULE_interfaceDefinition = 7
    RULE_libraryDefinition = 8
    RULE_libraryPart = 9
    RULE_contractPart = 10
    RULE_interfacePart = 11
    RULE_stateVariableDeclaration = 12
    RULE_constantVariableDeclaration = 13
    RULE_immutableVariableDeclaration = 14
    RULE_structDefinition = 15
    RULE_structMember = 16
    RULE_enumDefinition = 17
    RULE_enumValueList = 18
    RULE_usingForDeclaration = 19
    RULE_userDefinedValueTypeDefinition = 20
    RULE_userDefinedOperatorDefinition = 21
    RULE_errorDeclaration = 22
    RULE_inheritanceSpecifier = 23
    RULE_functionDefinition = 24
    RULE_constructorDefinition = 25
    RULE_fallbackFunction = 26
    RULE_receiveFunction = 27
    RULE_functionModifiers = 28
    RULE_constructorModifiers = 29
    RULE_modifierInvocation = 30
    RULE_visibility = 31
    RULE_stateMutability = 32
    RULE_overrideSpecifier = 33
    RULE_functionTypeName = 34
    RULE_functionTypeParameterList = 35
    RULE_returnsParameters = 36
    RULE_eventDefinition = 37
    RULE_modifierDefinition = 38
    RULE_eventParameterList = 39
    RULE_eventParameter = 40
    RULE_parameterList = 41
    RULE_parameter = 42
    RULE_typeName = 43
    RULE_userDefinedTypeName = 44
    RULE_mapping = 45
    RULE_elementaryTypeName = 46
    RULE_block = 47
    RULE_statement = 48
    RULE_ifStatement = 49
    RULE_forStatement = 50
    RULE_whileStatement = 51
    RULE_doWhileStatement = 52
    RULE_simpleStatement = 53
    RULE_variableDeclarationStatement = 54
    RULE_variableDeclarationList = 55
    RULE_variableDeclaration = 56
    RULE_expressionStatement = 57
    RULE_tryCatchStatement = 58
    RULE_catchClause = 59
    RULE_uncheckedStatement = 60
    RULE_assemblyStatement = 61
    RULE_assemblyDefinition = 62
    RULE_yulTopLevelStatement = 63
    RULE_yulFunctionDefinition = 64
    RULE_yulDirective = 65
    RULE_yulStatement = 66
    RULE_yulBlock = 67
    RULE_yulVariableDeclaration = 68
    RULE_yulTypedName = 69
    RULE_yulAssignment = 70
    RULE_yulFunctionCall = 71
    RULE_yulIfStatement = 72
    RULE_yulForStatement = 73
    RULE_yulSwitchStatement = 74
    RULE_yulLeave = 75
    RULE_yulBreak = 76
    RULE_yulContinue = 77
    RULE_yulLabel = 78
    RULE_yulExpression = 79
    RULE_yulLiteral = 80
    RULE_yulIdentifier = 81
    RULE_yulPath = 82
    RULE_expression = 83
    RULE_functionCallArguments = 84
    RULE_namedArgument = 85
    RULE_primaryExpression = 86
    RULE_tupleExpression = 87
    RULE_typeNameExpression = 88
    RULE_expressionList = 89

    ruleNames =  [ "sourceUnit", "pragmaDirective", "importDirective", "importDeclaration", 
                   "importAlias", "identifierPath", "contractDefinition", 
                   "interfaceDefinition", "libraryDefinition", "libraryPart", 
                   "contractPart", "interfacePart", "stateVariableDeclaration", 
                   "constantVariableDeclaration", "immutableVariableDeclaration", 
                   "structDefinition", "structMember", "enumDefinition", 
                   "enumValueList", "usingForDeclaration", "userDefinedValueTypeDefinition", 
                   "userDefinedOperatorDefinition", "errorDeclaration", 
                   "inheritanceSpecifier", "functionDefinition", "constructorDefinition", 
                   "fallbackFunction", "receiveFunction", "functionModifiers", 
                   "constructorModifiers", "modifierInvocation", "visibility", 
                   "stateMutability", "overrideSpecifier", "functionTypeName", 
                   "functionTypeParameterList", "returnsParameters", "eventDefinition", 
                   "modifierDefinition", "eventParameterList", "eventParameter", 
                   "parameterList", "parameter", "typeName", "userDefinedTypeName", 
                   "mapping", "elementaryTypeName", "block", "statement", 
                   "ifStatement", "forStatement", "whileStatement", "doWhileStatement", 
                   "simpleStatement", "variableDeclarationStatement", "variableDeclarationList", 
                   "variableDeclaration", "expressionStatement", "tryCatchStatement", 
                   "catchClause", "uncheckedStatement", "assemblyStatement", 
                   "assemblyDefinition", "yulTopLevelStatement", "yulFunctionDefinition", 
                   "yulDirective", "yulStatement", "yulBlock", "yulVariableDeclaration", 
                   "yulTypedName", "yulAssignment", "yulFunctionCall", "yulIfStatement", 
                   "yulForStatement", "yulSwitchStatement", "yulLeave", 
                   "yulBreak", "yulContinue", "yulLabel", "yulExpression", 
                   "yulLiteral", "yulIdentifier", "yulPath", "expression", 
                   "functionCallArguments", "namedArgument", "primaryExpression", 
                   "tupleExpression", "typeNameExpression", "expressionList" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    PRAGMA=21
    SOLIDITY=22
    EXPERIMENTAL=23
    ABICODER=24
    VERSION=25
    IMPORT=26
    AS=27
    FROM=28
    SEMICOLON=29
    LPAREN=30
    RPAREN=31
    LBRACE=32
    RBRACE=33
    LBRACK=34
    RBRACK=35
    ASSIGN=36
    PLUS=37
    MINUS=38
    MULT=39
    DIV=40
    MOD=41
    AND=42
    OR=43
    NOT=44
    LT=45
    GT=46
    LTE=47
    GTE=48
    EQ=49
    NEQ=50
    BIT_AND=51
    BIT_OR=52
    BIT_XOR=53
    BIT_NOT=54
    LSHIFT=55
    RSHIFT=56
    QUESTION=57
    COLON=58
    COMMA=59
    DOT=60
    ABSTRACT=61
    CONTRACT=62
    INTERFACE=63
    LIBRARY=64
    FUNCTION=65
    RETURNS=66
    EVENT=67
    MODIFIER=68
    STRUCT=69
    ENUM=70
    IF=71
    ELSE=72
    FOR=73
    WHILE=74
    DO=75
    TRY=76
    CATCH=77
    REVERT=78
    ASSEMBLY=79
    LET=80
    LEAVE=81
    BREAK=82
    CONTINUE=83
    RETURN=84
    NEW=85
    DELETE=86
    MAPPING=87
    MEMORY=88
    STORAGE=89
    CALLDATA=90
    PUBLIC=91
    PRIVATE=92
    INTERNAL=93
    EXTERNAL=94
    PURE=95
    VIEW=96
    PAYABLE=97
    CONSTANT=98
    IMMUTABLE=99
    ANONYMOUS=100
    INDEXED=101
    OVERRIDE=102
    VIRTUAL=103
    USING=104
    TYPE=105
    ERROR=106
    UNCHECKED=107
    PLUSPLUS=108
    MINUSMINUS=109
    ASSIGN_GT=110
    FALLBACK=111
    RECEIVE=112
    IS=113
    CONSTRUCTOR=114
    BYTES_NUMBER=115
    BYTES=116
    INT_NUMBER=117
    INT=118
    UINT_NUMBER=119
    UINT=120
    FIXED_NUMBER=121
    FIXED=122
    UFIXED_NUMBER=123
    UFIXED=124
    IDENTIFIER=125
    STRING_LITERAL=126
    DECIMAL_LITERAL=127
    HEX_LITERAL=128
    BOOL_LITERAL=129
    WS=130
    COMMENT=131
    MULTI_LINE_COMMENT=132
    DOC_COMMENT=133
    NAT_SPEC=134

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDirectiveContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractDefinitionContext,i)


        def interfaceDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InterfaceDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InterfaceDefinitionContext,i)


        def libraryDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.LibraryDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.LibraryDefinitionContext,i)


        def functionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,i)


        def constantVariableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ConstantVariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ConstantVariableDeclarationContext,i)


        def immutableVariableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImmutableVariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImmutableVariableDeclarationContext,i)


        def structDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,i)


        def enumDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,i)


        def userDefinedValueTypeDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UserDefinedValueTypeDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UserDefinedValueTypeDefinitionContext,i)


        def errorDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ErrorDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ErrorDeclarationContext,i)


        def userDefinedOperatorDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UserDefinedOperatorDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UserDefinedOperatorDefinitionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceUnit" ):
                return visitor.visitSourceUnit(self)
            else:
                return visitor.visitChildren(self)




    def sourceUnit(self):

        localctx = SolidityParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2305843009144487874) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4609442756882858083) != 0):
                self.state = 193
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 180
                    self.pragmaDirective()
                    pass

                elif la_ == 2:
                    self.state = 181
                    self.importDirective()
                    pass

                elif la_ == 3:
                    self.state = 182
                    self.contractDefinition()
                    pass

                elif la_ == 4:
                    self.state = 183
                    self.interfaceDefinition()
                    pass

                elif la_ == 5:
                    self.state = 184
                    self.libraryDefinition()
                    pass

                elif la_ == 6:
                    self.state = 185
                    self.functionDefinition()
                    pass

                elif la_ == 7:
                    self.state = 186
                    self.constantVariableDeclaration()
                    pass

                elif la_ == 8:
                    self.state = 187
                    self.immutableVariableDeclaration()
                    pass

                elif la_ == 9:
                    self.state = 188
                    self.structDefinition()
                    pass

                elif la_ == 10:
                    self.state = 189
                    self.enumDefinition()
                    pass

                elif la_ == 11:
                    self.state = 190
                    self.userDefinedValueTypeDefinition()
                    pass

                elif la_ == 12:
                    self.state = 191
                    self.errorDeclaration()
                    pass

                elif la_ == 13:
                    self.state = 192
                    self.userDefinedOperatorDefinition()
                    pass


                self.state = 197
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 198
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA(self):
            return self.getToken(SolidityParser.PRAGMA, 0)

        def SEMICOLON(self):
            return self.getToken(SolidityParser.SEMICOLON, 0)

        def SOLIDITY(self):
            return self.getToken(SolidityParser.SOLIDITY, 0)

        def EXPERIMENTAL(self):
            return self.getToken(SolidityParser.EXPERIMENTAL, 0)

        def VERSION(self):
            return self.getToken(SolidityParser.VERSION, 0)

        def ABICODER(self):
            return self.getToken(SolidityParser.ABICODER, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(SolidityParser.DECIMAL_LITERAL, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaDirective" ):
                return visitor.visitPragmaDirective(self)
            else:
                return visitor.visitChildren(self)




    def pragmaDirective(self):

        localctx = SolidityParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 200
            self.match(SolidityParser.PRAGMA)
            self.state = 201
            _la = self._input.LA(1)
            if not(_la==22 or _la==23):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 205
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.state = 202
                self.match(SolidityParser.VERSION)
                pass
            elif token in [24]:
                self.state = 203
                self.match(SolidityParser.ABICODER)
                self.state = 204
                self.match(SolidityParser.DECIMAL_LITERAL)
                pass
            elif token in [29]:
                pass
            else:
                pass
            self.state = 207
            self.match(SolidityParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(SolidityParser.IMPORT, 0)

        def importDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.ImportDeclarationContext,0)


        def importAlias(self):
            return self.getTypedRuleContext(SolidityParser.ImportAliasContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDirective" ):
                return visitor.visitImportDirective(self)
            else:
                return visitor.visitChildren(self)




    def importDirective(self):

        localctx = SolidityParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self.match(SolidityParser.IMPORT)
            self.state = 212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 210
                self.importDeclaration()
                pass

            elif la_ == 2:
                self.state = 211
                self.importAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SolidityParser.STRING_LITERAL, 0)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.AS)
            else:
                return self.getToken(SolidityParser.AS, i)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.IDENTIFIER)
            else:
                return self.getToken(SolidityParser.IDENTIFIER, i)

        def FROM(self):
            return self.getToken(SolidityParser.FROM, 0)

        def MULT(self):
            return self.getToken(SolidityParser.MULT, 0)

        def LBRACE(self):
            return self.getToken(SolidityParser.LBRACE, 0)

        def identifierPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierPathContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,i)


        def RBRACE(self):
            return self.getToken(SolidityParser.RBRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.COMMA)
            else:
                return self.getToken(SolidityParser.COMMA, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDeclaration" ):
                return visitor.visitImportDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def importDeclaration(self):

        localctx = SolidityParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 241
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [126]:
                self.enterOuterAlt(localctx, 1)
                self.state = 214
                self.match(SolidityParser.STRING_LITERAL)
                pass
            elif token in [39, 125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 215
                _la = self._input.LA(1)
                if not(_la==39 or _la==125):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 216
                self.match(SolidityParser.AS)
                self.state = 217
                self.match(SolidityParser.IDENTIFIER)
                self.state = 218
                self.match(SolidityParser.FROM)
                self.state = 219
                self.match(SolidityParser.STRING_LITERAL)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 3)
                self.state = 220
                self.match(SolidityParser.LBRACE)
                self.state = 221
                self.identifierPath()
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 222
                    self.match(SolidityParser.AS)
                    self.state = 223
                    self.match(SolidityParser.IDENTIFIER)


                self.state = 234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==59:
                    self.state = 226
                    self.match(SolidityParser.COMMA)
                    self.state = 227
                    self.identifierPath()
                    self.state = 230
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==27:
                        self.state = 228
                        self.match(SolidityParser.AS)
                        self.state = 229
                        self.match(SolidityParser.IDENTIFIER)


                    self.state = 236
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 237
                self.match(SolidityParser.RBRACE)
                self.state = 238
                self.match(SolidityParser.FROM)
                self.state = 239
                self.match(SolidityParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def ASSIGN(self):
            return self.getToken(SolidityParser.ASSIGN, 0)

        def importDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.ImportDeclarationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_importAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportAlias" ):
                listener.enterImportAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportAlias" ):
                listener.exitImportAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportAlias" ):
                return visitor.visitImportAlias(self)
            else:
                return visitor.visitChildren(self)




    def importAlias(self):

        localctx = SolidityParser.ImportAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_importAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.match(SolidityParser.IDENTIFIER)
            self.state = 244
            self.match(SolidityParser.ASSIGN)
            self.state = 245
            self.importDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.IDENTIFIER)
            else:
                return self.getToken(SolidityParser.IDENTIFIER, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.DOT)
            else:
                return self.getToken(SolidityParser.DOT, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_identifierPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierPath" ):
                listener.enterIdentifierPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierPath" ):
                listener.exitIdentifierPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierPath" ):
                return visitor.visitIdentifierPath(self)
            else:
                return visitor.visitChildren(self)




    def identifierPath(self):

        localctx = SolidityParser.IdentifierPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_identifierPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.match(SolidityParser.IDENTIFIER)
            self.state = 252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==60:
                self.state = 248
                self.match(SolidityParser.DOT)
                self.state = 249
                self.match(SolidityParser.IDENTIFIER)
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTRACT(self):
            return self.getToken(SolidityParser.CONTRACT, 0)

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def LBRACE(self):
            return self.getToken(SolidityParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SolidityParser.RBRACE, 0)

        def ABSTRACT(self):
            return self.getToken(SolidityParser.ABSTRACT, 0)

        def IS(self):
            return self.getToken(SolidityParser.IS, 0)

        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierContext,i)


        def contractPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractPartContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.COMMA)
            else:
                return self.getToken(SolidityParser.COMMA, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractDefinition" ):
                return visitor.visitContractDefinition(self)
            else:
                return visitor.visitChildren(self)




    def contractDefinition(self):

        localctx = SolidityParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 255
                self.match(SolidityParser.ABSTRACT)


            self.state = 258
            self.match(SolidityParser.CONTRACT)
            self.state = 259
            self.match(SolidityParser.IDENTIFIER)
            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113:
                self.state = 260
                self.match(SolidityParser.IS)
                self.state = 261
                self.inheritanceSpecifier()
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==59:
                    self.state = 262
                    self.match(SolidityParser.COMMA)
                    self.state = 263
                    self.inheritanceSpecifier()
                    self.state = 268
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 271
            self.match(SolidityParser.LBRACE)
            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 62) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2305281029859967037) != 0):
                self.state = 272
                self.contractPart()
                self.state = 277
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 278
            self.match(SolidityParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(SolidityParser.INTERFACE, 0)

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def LBRACE(self):
            return self.getToken(SolidityParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SolidityParser.RBRACE, 0)

        def IS(self):
            return self.getToken(SolidityParser.IS, 0)

        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierContext,i)


        def interfacePart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InterfacePartContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InterfacePartContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.COMMA)
            else:
                return self.getToken(SolidityParser.COMMA, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_interfaceDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDefinition" ):
                listener.enterInterfaceDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDefinition" ):
                listener.exitInterfaceDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDefinition" ):
                return visitor.visitInterfaceDefinition(self)
            else:
                return visitor.visitChildren(self)




    def interfaceDefinition(self):

        localctx = SolidityParser.InterfaceDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_interfaceDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.match(SolidityParser.INTERFACE)
            self.state = 281
            self.match(SolidityParser.IDENTIFIER)
            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113:
                self.state = 282
                self.match(SolidityParser.IS)
                self.state = 283
                self.inheritanceSpecifier()
                self.state = 288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==59:
                    self.state = 284
                    self.match(SolidityParser.COMMA)
                    self.state = 285
                    self.inheritanceSpecifier()
                    self.state = 290
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 293
            self.match(SolidityParser.LBRACE)
            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1152921925446533173) != 0):
                self.state = 294
                self.interfacePart()
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 300
            self.match(SolidityParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIBRARY(self):
            return self.getToken(SolidityParser.LIBRARY, 0)

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def LBRACE(self):
            return self.getToken(SolidityParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SolidityParser.RBRACE, 0)

        def libraryPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.LibraryPartContext)
            else:
                return self.getTypedRuleContext(SolidityParser.LibraryPartContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_libraryDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryDefinition" ):
                listener.enterLibraryDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryDefinition" ):
                listener.exitLibraryDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryDefinition" ):
                return visitor.visitLibraryDefinition(self)
            else:
                return visitor.visitChildren(self)




    def libraryDefinition(self):

        localctx = SolidityParser.LibraryDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_libraryDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.match(SolidityParser.LIBRARY)
            self.state = 303
            self.match(SolidityParser.IDENTIFIER)
            self.state = 304
            self.match(SolidityParser.LBRACE)
            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 62) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2304718079906545713) != 0):
                self.state = 305
                self.libraryPart()
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 311
            self.match(SolidityParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.StateVariableDeclarationContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,0)


        def usingForDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.UsingForDeclarationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_libraryPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryPart" ):
                listener.enterLibraryPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryPart" ):
                listener.exitLibraryPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryPart" ):
                return visitor.visitLibraryPart(self)
            else:
                return visitor.visitChildren(self)




    def libraryPart(self):

        localctx = SolidityParser.LibraryPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_libraryPart)
        try:
            self.state = 318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 313
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 314
                self.functionDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 315
                self.structDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 316
                self.enumDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 317
                self.usingForDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.StateVariableDeclarationContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def constructorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ConstructorDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ModifierDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,0)


        def usingForDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.UsingForDeclarationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractPart" ):
                listener.enterContractPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractPart" ):
                listener.exitContractPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractPart" ):
                return visitor.visitContractPart(self)
            else:
                return visitor.visitChildren(self)




    def contractPart(self):

        localctx = SolidityParser.ContractPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_contractPart)
        try:
            self.state = 328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 320
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 321
                self.functionDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 322
                self.constructorDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 323
                self.modifierDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 324
                self.eventDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 325
                self.enumDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 326
                self.structDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 327
                self.usingForDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfacePartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interfacePart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfacePart" ):
                listener.enterInterfacePart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfacePart" ):
                listener.exitInterfacePart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfacePart" ):
                return visitor.visitInterfacePart(self)
            else:
                return visitor.visitChildren(self)




    def interfacePart(self):

        localctx = SolidityParser.InterfacePartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_interfacePart)
        try:
            self.state = 334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65, 91, 92, 93, 94, 95, 96, 97, 102, 103, 125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 330
                self.functionDefinition()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 331
                self.eventDefinition()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 3)
                self.state = 332
                self.enumDefinition()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 4)
                self.state = 333
                self.structDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def SEMICOLON(self):
            return self.getToken(SolidityParser.SEMICOLON, 0)

        def ASSIGN(self):
            return self.getToken(SolidityParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def PUBLIC(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PUBLIC)
            else:
                return self.getToken(SolidityParser.PUBLIC, i)

        def PRIVATE(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PRIVATE)
            else:
                return self.getToken(SolidityParser.PRIVATE, i)

        def INTERNAL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.INTERNAL)
            else:
                return self.getToken(SolidityParser.INTERNAL, i)

        def CONSTANT(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.CONSTANT)
            else:
                return self.getToken(SolidityParser.CONSTANT, i)

        def IMMUTABLE(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.IMMUTABLE)
            else:
                return self.getToken(SolidityParser.IMMUTABLE, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateVariableDeclaration" ):
                return visitor.visitStateVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def stateVariableDeclaration(self):

        localctx = SolidityParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.typeName()
            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 391) != 0):
                self.state = 337
                _la = self._input.LA(1)
                if not(((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 391) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 343
            self.match(SolidityParser.IDENTIFIER)
            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 344
                self.match(SolidityParser.ASSIGN)
                self.state = 345
                self.expression(0)


            self.state = 348
            self.match(SolidityParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def CONSTANT(self):
            return self.getToken(SolidityParser.CONSTANT, 0)

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def ASSIGN(self):
            return self.getToken(SolidityParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(SolidityParser.SEMICOLON, 0)

        def PUBLIC(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PUBLIC)
            else:
                return self.getToken(SolidityParser.PUBLIC, i)

        def PRIVATE(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PRIVATE)
            else:
                return self.getToken(SolidityParser.PRIVATE, i)

        def INTERNAL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.INTERNAL)
            else:
                return self.getToken(SolidityParser.INTERNAL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_constantVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantVariableDeclaration" ):
                listener.enterConstantVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantVariableDeclaration" ):
                listener.exitConstantVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantVariableDeclaration" ):
                return visitor.visitConstantVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constantVariableDeclaration(self):

        localctx = SolidityParser.ConstantVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_constantVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self.typeName()
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 7) != 0):
                self.state = 351
                _la = self._input.LA(1)
                if not(((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 357
            self.match(SolidityParser.CONSTANT)
            self.state = 358
            self.match(SolidityParser.IDENTIFIER)
            self.state = 359
            self.match(SolidityParser.ASSIGN)
            self.state = 360
            self.expression(0)
            self.state = 361
            self.match(SolidityParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImmutableVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def IMMUTABLE(self):
            return self.getToken(SolidityParser.IMMUTABLE, 0)

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def SEMICOLON(self):
            return self.getToken(SolidityParser.SEMICOLON, 0)

        def ASSIGN(self):
            return self.getToken(SolidityParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def PUBLIC(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PUBLIC)
            else:
                return self.getToken(SolidityParser.PUBLIC, i)

        def PRIVATE(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PRIVATE)
            else:
                return self.getToken(SolidityParser.PRIVATE, i)

        def INTERNAL(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.INTERNAL)
            else:
                return self.getToken(SolidityParser.INTERNAL, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_immutableVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImmutableVariableDeclaration" ):
                listener.enterImmutableVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImmutableVariableDeclaration" ):
                listener.exitImmutableVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImmutableVariableDeclaration" ):
                return visitor.visitImmutableVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def immutableVariableDeclaration(self):

        localctx = SolidityParser.ImmutableVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_immutableVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.typeName()
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 7) != 0):
                self.state = 364
                _la = self._input.LA(1)
                if not(((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 370
            self.match(SolidityParser.IMMUTABLE)
            self.state = 371
            self.match(SolidityParser.IDENTIFIER)
            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 372
                self.match(SolidityParser.ASSIGN)
                self.state = 373
                self.expression(0)


            self.state = 376
            self.match(SolidityParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(SolidityParser.STRUCT, 0)

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def LBRACE(self):
            return self.getToken(SolidityParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SolidityParser.RBRACE, 0)

        def structMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructMemberContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StructMemberContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDefinition" ):
                return visitor.visitStructDefinition(self)
            else:
                return visitor.visitChildren(self)




    def structDefinition(self):

        localctx = SolidityParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.match(SolidityParser.STRUCT)
            self.state = 379
            self.match(SolidityParser.IDENTIFIER)
            self.state = 380
            self.match(SolidityParser.LBRACE)
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 62) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2304717109311045633) != 0):
                self.state = 381
                self.structMember()
                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 387
            self.match(SolidityParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def SEMICOLON(self):
            return self.getToken(SolidityParser.SEMICOLON, 0)

        def MEMORY(self):
            return self.getToken(SolidityParser.MEMORY, 0)

        def STORAGE(self):
            return self.getToken(SolidityParser.STORAGE, 0)

        def CALLDATA(self):
            return self.getToken(SolidityParser.CALLDATA, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_structMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructMember" ):
                listener.enterStructMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructMember" ):
                listener.exitStructMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructMember" ):
                return visitor.visitStructMember(self)
            else:
                return visitor.visitChildren(self)




    def structMember(self):

        localctx = SolidityParser.StructMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_structMember)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.typeName()
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 7) != 0):
                self.state = 390
                _la = self._input.LA(1)
                if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 393
            self.match(SolidityParser.IDENTIFIER)
            self.state = 394
            self.match(SolidityParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(SolidityParser.ENUM, 0)

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def LBRACE(self):
            return self.getToken(SolidityParser.LBRACE, 0)

        def enumValueList(self):
            return self.getTypedRuleContext(SolidityParser.EnumValueListContext,0)


        def RBRACE(self):
            return self.getToken(SolidityParser.RBRACE, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDefinition" ):
                return visitor.visitEnumDefinition(self)
            else:
                return visitor.visitChildren(self)




    def enumDefinition(self):

        localctx = SolidityParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_enumDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.match(SolidityParser.ENUM)
            self.state = 397
            self.match(SolidityParser.IDENTIFIER)
            self.state = 398
            self.match(SolidityParser.LBRACE)
            self.state = 399
            self.enumValueList()
            self.state = 400
            self.match(SolidityParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.IDENTIFIER)
            else:
                return self.getToken(SolidityParser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.COMMA)
            else:
                return self.getToken(SolidityParser.COMMA, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_enumValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValueList" ):
                listener.enterEnumValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValueList" ):
                listener.exitEnumValueList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValueList" ):
                return visitor.visitEnumValueList(self)
            else:
                return visitor.visitChildren(self)




    def enumValueList(self):

        localctx = SolidityParser.EnumValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_enumValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.match(SolidityParser.IDENTIFIER)
            self.state = 407
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 403
                    self.match(SolidityParser.COMMA)
                    self.state = 404
                    self.match(SolidityParser.IDENTIFIER) 
                self.state = 409
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 410
                self.match(SolidityParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(SolidityParser.USING, 0)

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def FOR(self):
            return self.getToken(SolidityParser.FOR, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def SEMICOLON(self):
            return self.getToken(SolidityParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_usingForDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForDeclaration" ):
                listener.enterUsingForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForDeclaration" ):
                listener.exitUsingForDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingForDeclaration" ):
                return visitor.visitUsingForDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def usingForDeclaration(self):

        localctx = SolidityParser.UsingForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_usingForDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(SolidityParser.USING)
            self.state = 414
            self.match(SolidityParser.IDENTIFIER)
            self.state = 415
            self.match(SolidityParser.FOR)
            self.state = 416
            self.typeName()
            self.state = 417
            self.match(SolidityParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserDefinedValueTypeDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(SolidityParser.TYPE, 0)

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def IS(self):
            return self.getToken(SolidityParser.IS, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def SEMICOLON(self):
            return self.getToken(SolidityParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinedValueTypeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedValueTypeDefinition" ):
                listener.enterUserDefinedValueTypeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedValueTypeDefinition" ):
                listener.exitUserDefinedValueTypeDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserDefinedValueTypeDefinition" ):
                return visitor.visitUserDefinedValueTypeDefinition(self)
            else:
                return visitor.visitChildren(self)




    def userDefinedValueTypeDefinition(self):

        localctx = SolidityParser.UserDefinedValueTypeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_userDefinedValueTypeDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.match(SolidityParser.TYPE)
            self.state = 420
            self.match(SolidityParser.IDENTIFIER)
            self.state = 421
            self.match(SolidityParser.IS)
            self.state = 422
            self.typeName()
            self.state = 423
            self.match(SolidityParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserDefinedOperatorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(SolidityParser.USING, 0)

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def FOR(self):
            return self.getToken(SolidityParser.FOR, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def SEMICOLON(self):
            return self.getToken(SolidityParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinedOperatorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedOperatorDefinition" ):
                listener.enterUserDefinedOperatorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedOperatorDefinition" ):
                listener.exitUserDefinedOperatorDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserDefinedOperatorDefinition" ):
                return visitor.visitUserDefinedOperatorDefinition(self)
            else:
                return visitor.visitChildren(self)




    def userDefinedOperatorDefinition(self):

        localctx = SolidityParser.UserDefinedOperatorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_userDefinedOperatorDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.match(SolidityParser.USING)
            self.state = 426
            self.match(SolidityParser.IDENTIFIER)
            self.state = 427
            self.match(SolidityParser.FOR)
            self.state = 428
            self.typeName()
            self.state = 429
            self.match(SolidityParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(SolidityParser.ERROR, 0)

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def SEMICOLON(self):
            return self.getToken(SolidityParser.SEMICOLON, 0)

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_errorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorDeclaration" ):
                listener.enterErrorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorDeclaration" ):
                listener.exitErrorDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorDeclaration" ):
                return visitor.visitErrorDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def errorDeclaration(self):

        localctx = SolidityParser.ErrorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_errorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.match(SolidityParser.ERROR)
            self.state = 432
            self.match(SolidityParser.IDENTIFIER)
            self.state = 433
            self.match(SolidityParser.LPAREN)
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 62) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2304717109311045633) != 0):
                self.state = 434
                self.parameterList()


            self.state = 437
            self.match(SolidityParser.RPAREN)
            self.state = 438
            self.match(SolidityParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInheritanceSpecifier" ):
                return visitor.visitInheritanceSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def inheritanceSpecifier(self):

        localctx = SolidityParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.userDefinedTypeName()
            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 441
                self.match(SolidityParser.LPAREN)
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18032404086128702) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1099511620435967) != 0) or _la==129:
                    self.state = 442
                    self.expressionList()


                self.state = 445
                self.match(SolidityParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(SolidityParser.FUNCTION, 0)

        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def LBRACE(self):
            return self.getToken(SolidityParser.LBRACE, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def RBRACE(self):
            return self.getToken(SolidityParser.RBRACE, 0)

        def SEMICOLON(self):
            return self.getToken(SolidityParser.SEMICOLON, 0)

        def functionModifiers(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionModifiersContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionModifiersContext,i)


        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def returnsParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnsParametersContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinition" ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = SolidityParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 17179875455) != 0):
                self.state = 448
                self.functionModifiers()
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 454
            self.match(SolidityParser.FUNCTION)
            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 455
                self.match(SolidityParser.IDENTIFIER)


            self.state = 458
            self.match(SolidityParser.LPAREN)
            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 62) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2304717109311045633) != 0):
                self.state = 459
                self.parameterList()


            self.state = 462
            self.match(SolidityParser.RPAREN)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 463
                self.returnsParameters()


            self.state = 471
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32]:
                self.state = 466
                self.match(SolidityParser.LBRACE)
                self.state = 467
                self.block()
                self.state = 468
                self.match(SolidityParser.RBRACE)
                pass
            elif token in [29]:
                self.state = 470
                self.match(SolidityParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(SolidityParser.CONSTRUCTOR, 0)

        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def LBRACE(self):
            return self.getToken(SolidityParser.LBRACE, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def RBRACE(self):
            return self.getToken(SolidityParser.RBRACE, 0)

        def SEMICOLON(self):
            return self.getToken(SolidityParser.SEMICOLON, 0)

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def constructorModifiers(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ConstructorModifiersContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ConstructorModifiersContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_constructorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDefinition" ):
                listener.enterConstructorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDefinition" ):
                listener.exitConstructorDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorDefinition" ):
                return visitor.visitConstructorDefinition(self)
            else:
                return visitor.visitChildren(self)




    def constructorDefinition(self):

        localctx = SolidityParser.ConstructorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_constructorDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.match(SolidityParser.CONSTRUCTOR)
            self.state = 474
            self.match(SolidityParser.LPAREN)
            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 62) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2304717109311045633) != 0):
                self.state = 475
                self.parameterList()


            self.state = 478
            self.match(SolidityParser.RPAREN)
            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 17179869311) != 0):
                self.state = 479
                self.constructorModifiers()
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 490
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32]:
                self.state = 485
                self.match(SolidityParser.LBRACE)
                self.state = 486
                self.block()
                self.state = 487
                self.match(SolidityParser.RBRACE)
                pass
            elif token in [29]:
                self.state = 489
                self.match(SolidityParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FallbackFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FALLBACK(self):
            return self.getToken(SolidityParser.FALLBACK, 0)

        def LBRACE(self):
            return self.getToken(SolidityParser.LBRACE, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def RBRACE(self):
            return self.getToken(SolidityParser.RBRACE, 0)

        def SEMICOLON(self):
            return self.getToken(SolidityParser.SEMICOLON, 0)

        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def functionModifiers(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionModifiersContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionModifiersContext,i)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_fallbackFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFallbackFunction" ):
                listener.enterFallbackFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFallbackFunction" ):
                listener.exitFallbackFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFallbackFunction" ):
                return visitor.visitFallbackFunction(self)
            else:
                return visitor.visitChildren(self)




    def fallbackFunction(self):

        localctx = SolidityParser.FallbackFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_fallbackFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.match(SolidityParser.FALLBACK)
            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 493
                self.match(SolidityParser.LPAREN)
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 62) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2304717109311045633) != 0):
                    self.state = 494
                    self.parameterList()


                self.state = 497
                self.match(SolidityParser.RPAREN)


            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 17179875455) != 0):
                self.state = 500
                self.functionModifiers()
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32]:
                self.state = 506
                self.match(SolidityParser.LBRACE)
                self.state = 507
                self.block()
                self.state = 508
                self.match(SolidityParser.RBRACE)
                pass
            elif token in [29]:
                self.state = 510
                self.match(SolidityParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiveFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECEIVE(self):
            return self.getToken(SolidityParser.RECEIVE, 0)

        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def LBRACE(self):
            return self.getToken(SolidityParser.LBRACE, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def RBRACE(self):
            return self.getToken(SolidityParser.RBRACE, 0)

        def SEMICOLON(self):
            return self.getToken(SolidityParser.SEMICOLON, 0)

        def functionModifiers(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionModifiersContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionModifiersContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_receiveFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiveFunction" ):
                listener.enterReceiveFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiveFunction" ):
                listener.exitReceiveFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiveFunction" ):
                return visitor.visitReceiveFunction(self)
            else:
                return visitor.visitChildren(self)




    def receiveFunction(self):

        localctx = SolidityParser.ReceiveFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_receiveFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.match(SolidityParser.RECEIVE)
            self.state = 514
            self.match(SolidityParser.LPAREN)
            self.state = 515
            self.match(SolidityParser.RPAREN)
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 17179875455) != 0):
                self.state = 516
                self.functionModifiers()
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 527
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32]:
                self.state = 522
                self.match(SolidityParser.LBRACE)
                self.state = 523
                self.block()
                self.state = 524
                self.match(SolidityParser.RBRACE)
                pass
            elif token in [29]:
                self.state = 526
                self.match(SolidityParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionModifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def visibility(self):
            return self.getTypedRuleContext(SolidityParser.VisibilityContext,0)


        def stateMutability(self):
            return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,0)


        def VIRTUAL(self):
            return self.getToken(SolidityParser.VIRTUAL, 0)

        def overrideSpecifier(self):
            return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,0)


        def modifierInvocation(self):
            return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionModifiers" ):
                listener.enterFunctionModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionModifiers" ):
                listener.exitFunctionModifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionModifiers" ):
                return visitor.visitFunctionModifiers(self)
            else:
                return visitor.visitChildren(self)




    def functionModifiers(self):

        localctx = SolidityParser.FunctionModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_functionModifiers)
        try:
            self.state = 534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [91, 92, 93, 94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 529
                self.visibility()
                pass
            elif token in [95, 96, 97]:
                self.enterOuterAlt(localctx, 2)
                self.state = 530
                self.stateMutability()
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 3)
                self.state = 531
                self.match(SolidityParser.VIRTUAL)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 4)
                self.state = 532
                self.overrideSpecifier()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 5)
                self.state = 533
                self.modifierInvocation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorModifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def visibility(self):
            return self.getTypedRuleContext(SolidityParser.VisibilityContext,0)


        def stateMutability(self):
            return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,0)


        def modifierInvocation(self):
            return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_constructorModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorModifiers" ):
                listener.enterConstructorModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorModifiers" ):
                listener.exitConstructorModifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorModifiers" ):
                return visitor.visitConstructorModifiers(self)
            else:
                return visitor.visitChildren(self)




    def constructorModifiers(self):

        localctx = SolidityParser.ConstructorModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_constructorModifiers)
        try:
            self.state = 539
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [91, 92, 93, 94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 536
                self.visibility()
                pass
            elif token in [95, 96, 97]:
                self.enterOuterAlt(localctx, 2)
                self.state = 537
                self.stateMutability()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 3)
                self.state = 538
                self.modifierInvocation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierInvocation" ):
                return visitor.visitModifierInvocation(self)
            else:
                return visitor.visitChildren(self)




    def modifierInvocation(self):

        localctx = SolidityParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_modifierInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(SolidityParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(SolidityParser.PUBLIC, 0)

        def PRIVATE(self):
            return self.getToken(SolidityParser.PRIVATE, 0)

        def INTERNAL(self):
            return self.getToken(SolidityParser.INTERNAL, 0)

        def EXTERNAL(self):
            return self.getToken(SolidityParser.EXTERNAL, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = SolidityParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_visibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            _la = self._input.LA(1)
            if not(((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateMutabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PURE(self):
            return self.getToken(SolidityParser.PURE, 0)

        def VIEW(self):
            return self.getToken(SolidityParser.VIEW, 0)

        def PAYABLE(self):
            return self.getToken(SolidityParser.PAYABLE, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateMutability" ):
                return visitor.visitStateMutability(self)
            else:
                return visitor.visitChildren(self)




    def stateMutability(self):

        localctx = SolidityParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            _la = self._input.LA(1)
            if not(((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverrideSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVERRIDE(self):
            return self.getToken(SolidityParser.OVERRIDE, 0)

        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def userDefinedTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UserDefinedTypeNameContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,i)


        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.COMMA)
            else:
                return self.getToken(SolidityParser.COMMA, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_overrideSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverrideSpecifier" ):
                listener.enterOverrideSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverrideSpecifier" ):
                listener.exitOverrideSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverrideSpecifier" ):
                return visitor.visitOverrideSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def overrideSpecifier(self):

        localctx = SolidityParser.OverrideSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_overrideSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self.match(SolidityParser.OVERRIDE)
            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 548
                self.match(SolidityParser.LPAREN)
                self.state = 549
                self.userDefinedTypeName()
                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==59:
                    self.state = 550
                    self.match(SolidityParser.COMMA)
                    self.state = 551
                    self.userDefinedTypeName()
                    self.state = 556
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 557
                self.match(SolidityParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(SolidityParser.FUNCTION, 0)

        def functionTypeParameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionTypeParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionTypeParameterListContext,i)


        def visibility(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VisibilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VisibilityContext,i)


        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def RETURNS(self):
            return self.getToken(SolidityParser.RETURNS, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeName" ):
                return visitor.visitFunctionTypeName(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeName(self):

        localctx = SolidityParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_functionTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.match(SolidityParser.FUNCTION)
            self.state = 563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 562
                self.functionTypeParameterList()


            self.state = 569
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 567
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [91, 92, 93, 94]:
                        self.state = 565
                        self.visibility()
                        pass
                    elif token in [95, 96, 97]:
                        self.state = 566
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 571
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

            self.state = 574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 572
                self.match(SolidityParser.RETURNS)
                self.state = 573
                self.functionTypeParameterList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameterList" ):
                listener.enterFunctionTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameterList" ):
                listener.exitFunctionTypeParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeParameterList" ):
                return visitor.visitFunctionTypeParameterList(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeParameterList(self):

        localctx = SolidityParser.FunctionTypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_functionTypeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(SolidityParser.LPAREN)
            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 62) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2304717109311045633) != 0):
                self.state = 577
                self.parameterList()


            self.state = 580
            self.match(SolidityParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnsParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(SolidityParser.RETURNS, 0)

        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnsParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnsParameters" ):
                listener.enterReturnsParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnsParameters" ):
                listener.exitReturnsParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnsParameters" ):
                return visitor.visitReturnsParameters(self)
            else:
                return visitor.visitChildren(self)




    def returnsParameters(self):

        localctx = SolidityParser.ReturnsParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_returnsParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.match(SolidityParser.RETURNS)
            self.state = 583
            self.match(SolidityParser.LPAREN)
            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 62) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2304717109311045633) != 0):
                self.state = 584
                self.parameterList()


            self.state = 587
            self.match(SolidityParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(SolidityParser.EVENT, 0)

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def SEMICOLON(self):
            return self.getToken(SolidityParser.SEMICOLON, 0)

        def eventParameterList(self):
            return self.getTypedRuleContext(SolidityParser.EventParameterListContext,0)


        def ANONYMOUS(self):
            return self.getToken(SolidityParser.ANONYMOUS, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventDefinition" ):
                return visitor.visitEventDefinition(self)
            else:
                return visitor.visitChildren(self)




    def eventDefinition(self):

        localctx = SolidityParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(SolidityParser.EVENT)
            self.state = 590
            self.match(SolidityParser.IDENTIFIER)
            self.state = 591
            self.match(SolidityParser.LPAREN)
            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 62) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2304717109311045633) != 0):
                self.state = 592
                self.eventParameterList()


            self.state = 595
            self.match(SolidityParser.RPAREN)
            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 596
                self.match(SolidityParser.ANONYMOUS)


            self.state = 599
            self.match(SolidityParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFIER(self):
            return self.getToken(SolidityParser.MODIFIER, 0)

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def LBRACE(self):
            return self.getToken(SolidityParser.LBRACE, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def RBRACE(self):
            return self.getToken(SolidityParser.RBRACE, 0)

        def SEMICOLON(self):
            return self.getToken(SolidityParser.SEMICOLON, 0)

        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierDefinition" ):
                return visitor.visitModifierDefinition(self)
            else:
                return visitor.visitChildren(self)




    def modifierDefinition(self):

        localctx = SolidityParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(SolidityParser.MODIFIER)
            self.state = 602
            self.match(SolidityParser.IDENTIFIER)
            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 603
                self.match(SolidityParser.LPAREN)
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 62) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2304717109311045633) != 0):
                    self.state = 604
                    self.parameterList()


                self.state = 607
                self.match(SolidityParser.RPAREN)


            self.state = 615
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32]:
                self.state = 610
                self.match(SolidityParser.LBRACE)
                self.state = 611
                self.block()
                self.state = 612
                self.match(SolidityParser.RBRACE)
                pass
            elif token in [29]:
                self.state = 614
                self.match(SolidityParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.COMMA)
            else:
                return self.getToken(SolidityParser.COMMA, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameterList" ):
                return visitor.visitEventParameterList(self)
            else:
                return visitor.visitChildren(self)




    def eventParameterList(self):

        localctx = SolidityParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.eventParameter()
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==59:
                self.state = 618
                self.match(SolidityParser.COMMA)
                self.state = 619
                self.eventParameter()
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def INDEXED(self):
            return self.getToken(SolidityParser.INDEXED, 0)

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameter" ):
                return visitor.visitEventParameter(self)
            else:
                return visitor.visitChildren(self)




    def eventParameter(self):

        localctx = SolidityParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.typeName()
            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 626
                self.match(SolidityParser.INDEXED)


            self.state = 630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 629
                self.match(SolidityParser.IDENTIFIER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.COMMA)
            else:
                return self.getToken(SolidityParser.COMMA, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)




    def parameterList(self):

        localctx = SolidityParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.parameter()
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==59:
                self.state = 633
                self.match(SolidityParser.COMMA)
                self.state = 634
                self.parameter()
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def MEMORY(self):
            return self.getToken(SolidityParser.MEMORY, 0)

        def STORAGE(self):
            return self.getToken(SolidityParser.STORAGE, 0)

        def CALLDATA(self):
            return self.getToken(SolidityParser.CALLDATA, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = SolidityParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 640
            self.typeName()
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 7) != 0):
                self.state = 641
                _la = self._input.LA(1)
                if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 644
                self.match(SolidityParser.IDENTIFIER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def mapping(self):
            return self.getTypedRuleContext(SolidityParser.MappingContext,0)


        def functionTypeName(self):
            return self.getTypedRuleContext(SolidityParser.FunctionTypeNameContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.LBRACK)
            else:
                return self.getToken(SolidityParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.RBRACK)
            else:
                return self.getToken(SolidityParser.RBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)




    def typeName(self):

        localctx = SolidityParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_typeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124]:
                self.state = 647
                self.elementaryTypeName()
                pass
            elif token in [125]:
                self.state = 648
                self.userDefinedTypeName()
                pass
            elif token in [87]:
                self.state = 649
                self.mapping()
                pass
            elif token in [65]:
                self.state = 650
                self.functionTypeName()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 660
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 653
                    self.match(SolidityParser.LBRACK)
                    self.state = 655
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18032404086128702) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1099511620435967) != 0) or _la==129:
                        self.state = 654
                        self.expression(0)


                    self.state = 657
                    self.match(SolidityParser.RBRACK) 
                self.state = 662
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserDefinedTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.IDENTIFIER)
            else:
                return self.getToken(SolidityParser.IDENTIFIER, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.DOT)
            else:
                return self.getToken(SolidityParser.DOT, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinedTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedTypeName" ):
                listener.enterUserDefinedTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedTypeName" ):
                listener.exitUserDefinedTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserDefinedTypeName" ):
                return visitor.visitUserDefinedTypeName(self)
            else:
                return visitor.visitChildren(self)




    def userDefinedTypeName(self):

        localctx = SolidityParser.UserDefinedTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_userDefinedTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(SolidityParser.IDENTIFIER)
            self.state = 668
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 664
                    self.match(SolidityParser.DOT)
                    self.state = 665
                    self.match(SolidityParser.IDENTIFIER) 
                self.state = 670
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAPPING(self):
            return self.getToken(SolidityParser.MAPPING, 0)

        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def ASSIGN_GT(self):
            return self.getToken(SolidityParser.ASSIGN_GT, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping" ):
                return visitor.visitMapping(self)
            else:
                return visitor.visitChildren(self)




    def mapping(self):

        localctx = SolidityParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_mapping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(SolidityParser.MAPPING)
            self.state = 672
            self.match(SolidityParser.LPAREN)
            self.state = 673
            self.elementaryTypeName()
            self.state = 674
            self.match(SolidityParser.ASSIGN_GT)
            self.state = 675
            self.typeName()
            self.state = 676
            self.match(SolidityParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementaryTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BYTES_NUMBER(self):
            return self.getToken(SolidityParser.BYTES_NUMBER, 0)

        def BYTES(self):
            return self.getToken(SolidityParser.BYTES, 0)

        def INT_NUMBER(self):
            return self.getToken(SolidityParser.INT_NUMBER, 0)

        def INT(self):
            return self.getToken(SolidityParser.INT, 0)

        def UINT_NUMBER(self):
            return self.getToken(SolidityParser.UINT_NUMBER, 0)

        def UINT(self):
            return self.getToken(SolidityParser.UINT, 0)

        def FIXED_NUMBER(self):
            return self.getToken(SolidityParser.FIXED_NUMBER, 0)

        def FIXED(self):
            return self.getToken(SolidityParser.FIXED, 0)

        def UFIXED_NUMBER(self):
            return self.getToken(SolidityParser.UFIXED_NUMBER, 0)

        def UFIXED(self):
            return self.getToken(SolidityParser.UFIXED, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementaryTypeName" ):
                return visitor.visitElementaryTypeName(self)
            else:
                return visitor.visitChildren(self)




    def elementaryTypeName(self):

        localctx = SolidityParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_elementaryTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 62) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(SolidityParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SolidityParser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = SolidityParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(SolidityParser.LBRACE)
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 18032404086128702) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1095113573904575) != 0) or _la==129:
                self.state = 681
                self.statement()
                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 687
            self.match(SolidityParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(SolidityParser.IfStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(SolidityParser.ForStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SolidityParser.WhileStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(SolidityParser.DoWhileStatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def tryCatchStatement(self):
            return self.getTypedRuleContext(SolidityParser.TryCatchStatementContext,0)


        def assemblyStatement(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyStatementContext,0)


        def uncheckedStatement(self):
            return self.getTypedRuleContext(SolidityParser.UncheckedStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = SolidityParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_statement)
        try:
            self.state = 697
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 689
                self.ifStatement()
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 2)
                self.state = 690
                self.forStatement()
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 3)
                self.state = 691
                self.whileStatement()
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 4)
                self.state = 692
                self.doWhileStatement()
                pass
            elif token in [1, 2, 3, 4, 5, 30, 37, 38, 44, 54, 65, 85, 86, 87, 108, 109, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129]:
                self.enterOuterAlt(localctx, 5)
                self.state = 693
                self.simpleStatement()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 6)
                self.state = 694
                self.tryCatchStatement()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 7)
                self.state = 695
                self.assemblyStatement()
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 8)
                self.state = 696
                self.uncheckedStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(SolidityParser.IF, 0)

        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(SolidityParser.ELSE, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = SolidityParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(SolidityParser.IF)
            self.state = 700
            self.match(SolidityParser.LPAREN)
            self.state = 701
            self.expression(0)
            self.state = 702
            self.match(SolidityParser.RPAREN)
            self.state = 703
            self.statement()
            self.state = 706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 704
                self.match(SolidityParser.ELSE)
                self.state = 705
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(SolidityParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.SEMICOLON)
            else:
                return self.getToken(SolidityParser.SEMICOLON, i)

        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = SolidityParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(SolidityParser.FOR)
            self.state = 709
            self.match(SolidityParser.LPAREN)
            self.state = 712
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 30, 37, 38, 44, 54, 65, 85, 86, 87, 108, 109, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129]:
                self.state = 710
                self.simpleStatement()
                pass
            elif token in [29]:
                self.state = 711
                self.match(SolidityParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18032404086128702) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1099511620435967) != 0) or _la==129:
                self.state = 714
                self.expression(0)


            self.state = 717
            self.match(SolidityParser.SEMICOLON)
            self.state = 719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18032404086128702) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1099511620435967) != 0) or _la==129:
                self.state = 718
                self.expression(0)


            self.state = 721
            self.match(SolidityParser.RPAREN)
            self.state = 722
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(SolidityParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = SolidityParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(SolidityParser.WHILE)
            self.state = 725
            self.match(SolidityParser.LPAREN)
            self.state = 726
            self.expression(0)
            self.state = 727
            self.match(SolidityParser.RPAREN)
            self.state = 728
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(SolidityParser.DO, 0)

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def WHILE(self):
            return self.getToken(SolidityParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def SEMICOLON(self):
            return self.getToken(SolidityParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoWhileStatement" ):
                return visitor.visitDoWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def doWhileStatement(self):

        localctx = SolidityParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(SolidityParser.DO)
            self.state = 731
            self.statement()
            self.state = 732
            self.match(SolidityParser.WHILE)
            self.state = 733
            self.match(SolidityParser.LPAREN)
            self.state = 734
            self.expression(0)
            self.state = 735
            self.match(SolidityParser.RPAREN)
            self.state = 736
            self.match(SolidityParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleStatement" ):
                return visitor.visitSimpleStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleStatement(self):

        localctx = SolidityParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_simpleStatement)
        try:
            self.state = 740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 738
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 739
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationList(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationListContext,0)


        def SEMICOLON(self):
            return self.getToken(SolidityParser.SEMICOLON, 0)

        def ASSIGN(self):
            return self.getToken(SolidityParser.ASSIGN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationStatement" ):
                return visitor.visitVariableDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationStatement(self):

        localctx = SolidityParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.variableDeclarationList()
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 743
                self.match(SolidityParser.ASSIGN)
                self.state = 744
                self.expressionList()


            self.state = 747
            self.match(SolidityParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.COMMA)
            else:
                return self.getToken(SolidityParser.COMMA, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationList" ):
                return visitor.visitVariableDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationList(self):

        localctx = SolidityParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.variableDeclaration()
            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==59:
                self.state = 750
                self.match(SolidityParser.COMMA)
                self.state = 751
                self.variableDeclaration()
                self.state = 756
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def MEMORY(self):
            return self.getToken(SolidityParser.MEMORY, 0)

        def STORAGE(self):
            return self.getToken(SolidityParser.STORAGE, 0)

        def CALLDATA(self):
            return self.getToken(SolidityParser.CALLDATA, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaration" ):
                return visitor.visitVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaration(self):

        localctx = SolidityParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_variableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.typeName()
            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 7) != 0):
                self.state = 758
                _la = self._input.LA(1)
                if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 761
            self.match(SolidityParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(SolidityParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = SolidityParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.expression(0)
            self.state = 764
            self.match(SolidityParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryCatchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(SolidityParser.TRY, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def LBRACE(self):
            return self.getToken(SolidityParser.LBRACE, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def RBRACE(self):
            return self.getToken(SolidityParser.RBRACE, 0)

        def returnsParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnsParametersContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tryCatchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryCatchStatement" ):
                listener.enterTryCatchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryCatchStatement" ):
                listener.exitTryCatchStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryCatchStatement" ):
                return visitor.visitTryCatchStatement(self)
            else:
                return visitor.visitChildren(self)




    def tryCatchStatement(self):

        localctx = SolidityParser.TryCatchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_tryCatchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.match(SolidityParser.TRY)
            self.state = 767
            self.expression(0)
            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 768
                self.returnsParameters()


            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==77:
                self.state = 771
                self.catchClause()
                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 777
            self.match(SolidityParser.LBRACE)
            self.state = 778
            self.block()
            self.state = 779
            self.match(SolidityParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(SolidityParser.CATCH, 0)

        def LBRACE(self):
            return self.getToken(SolidityParser.LBRACE, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def RBRACE(self):
            return self.getToken(SolidityParser.RBRACE, 0)

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchClause" ):
                return visitor.visitCatchClause(self)
            else:
                return visitor.visitChildren(self)




    def catchClause(self):

        localctx = SolidityParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(SolidityParser.CATCH)
            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 782
                self.match(SolidityParser.IDENTIFIER)


            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 785
                self.match(SolidityParser.LPAREN)
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 62) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 2304717109311045633) != 0):
                    self.state = 786
                    self.parameterList()


                self.state = 789
                self.match(SolidityParser.RPAREN)


            self.state = 792
            self.match(SolidityParser.LBRACE)
            self.state = 793
            self.block()
            self.state = 794
            self.match(SolidityParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UncheckedStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNCHECKED(self):
            return self.getToken(SolidityParser.UNCHECKED, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_uncheckedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedStatement" ):
                listener.enterUncheckedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedStatement" ):
                listener.exitUncheckedStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUncheckedStatement" ):
                return visitor.visitUncheckedStatement(self)
            else:
                return visitor.visitChildren(self)




    def uncheckedStatement(self):

        localctx = SolidityParser.UncheckedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_uncheckedStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(SolidityParser.UNCHECKED)
            self.state = 797
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSEMBLY(self):
            return self.getToken(SolidityParser.ASSEMBLY, 0)

        def LBRACE(self):
            return self.getToken(SolidityParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SolidityParser.RBRACE, 0)

        def STRING_LITERAL(self):
            return self.getToken(SolidityParser.STRING_LITERAL, 0)

        def yulStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulStatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulStatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStatement" ):
                listener.enterAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStatement" ):
                listener.exitAssemblyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyStatement" ):
                return visitor.visitAssemblyStatement(self)
            else:
                return visitor.visitChildren(self)




    def assemblyStatement(self):

        localctx = SolidityParser.AssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_assemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.match(SolidityParser.ASSEMBLY)
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 800
                self.match(SolidityParser.STRING_LITERAL)


            self.state = 803
            self.match(SolidityParser.LBRACE)
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==8 or _la==32 or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 18014398509489669) != 0):
                self.state = 804
                self.yulStatement()
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 810
            self.match(SolidityParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSEMBLY(self):
            return self.getToken(SolidityParser.ASSEMBLY, 0)

        def LBRACE(self):
            return self.getToken(SolidityParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SolidityParser.RBRACE, 0)

        def STRING_LITERAL(self):
            return self.getToken(SolidityParser.STRING_LITERAL, 0)

        def yulTopLevelStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulTopLevelStatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulTopLevelStatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyDefinition" ):
                listener.enterAssemblyDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyDefinition" ):
                listener.exitAssemblyDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyDefinition" ):
                return visitor.visitAssemblyDefinition(self)
            else:
                return visitor.visitChildren(self)




    def assemblyDefinition(self):

        localctx = SolidityParser.AssemblyDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_assemblyDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.match(SolidityParser.ASSEMBLY)
            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 813
                self.match(SolidityParser.STRING_LITERAL)


            self.state = 816
            self.match(SolidityParser.LBRACE)
            self.state = 820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4294967744) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1152921504607338817) != 0):
                self.state = 817
                self.yulTopLevelStatement()
                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 823
            self.match(SolidityParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulTopLevelStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.YulFunctionDefinitionContext,0)


        def yulDirective(self):
            return self.getTypedRuleContext(SolidityParser.YulDirectiveContext,0)


        def yulStatement(self):
            return self.getTypedRuleContext(SolidityParser.YulStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulTopLevelStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulTopLevelStatement" ):
                listener.enterYulTopLevelStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulTopLevelStatement" ):
                listener.exitYulTopLevelStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulTopLevelStatement" ):
                return visitor.visitYulTopLevelStatement(self)
            else:
                return visitor.visitChildren(self)




    def yulTopLevelStatement(self):

        localctx = SolidityParser.YulTopLevelStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_yulTopLevelStatement)
        try:
            self.state = 828
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 825
                self.yulFunctionDefinition()
                pass
            elif token in [6, 7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 826
                self.yulDirective()
                pass
            elif token in [8, 32, 71, 73, 80, 81, 82, 83, 125]:
                self.enterOuterAlt(localctx, 3)
                self.state = 827
                self.yulStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(SolidityParser.FUNCTION, 0)

        def yulIdentifier(self):
            return self.getTypedRuleContext(SolidityParser.YulIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def yulBlock(self):
            return self.getTypedRuleContext(SolidityParser.YulBlockContext,0)


        def yulTypedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulTypedNameContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulTypedNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.COMMA)
            else:
                return self.getToken(SolidityParser.COMMA, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_yulFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulFunctionDefinition" ):
                listener.enterYulFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulFunctionDefinition" ):
                listener.exitYulFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulFunctionDefinition" ):
                return visitor.visitYulFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def yulFunctionDefinition(self):

        localctx = SolidityParser.YulFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_yulFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.match(SolidityParser.FUNCTION)
            self.state = 831
            self.yulIdentifier()
            self.state = 832
            self.match(SolidityParser.LPAREN)
            self.state = 841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 833
                self.yulTypedName()
                self.state = 838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==59:
                    self.state = 834
                    self.match(SolidityParser.COMMA)
                    self.state = 835
                    self.yulTypedName()
                    self.state = 840
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 843
            self.match(SolidityParser.RPAREN)
            self.state = 844
            self.yulBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulIdentifier(self):
            return self.getTypedRuleContext(SolidityParser.YulIdentifierContext,0)


        def yulBlock(self):
            return self.getTypedRuleContext(SolidityParser.YulBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulDirective" ):
                listener.enterYulDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulDirective" ):
                listener.exitYulDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulDirective" ):
                return visitor.visitYulDirective(self)
            else:
                return visitor.visitChildren(self)




    def yulDirective(self):

        localctx = SolidityParser.YulDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_yulDirective)
        try:
            self.state = 852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 846
                self.match(SolidityParser.T__5)
                self.state = 847
                self.yulIdentifier()
                self.state = 848
                self.yulBlock()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 850
                self.match(SolidityParser.T__6)
                self.state = 851
                self.yulBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulBlock(self):
            return self.getTypedRuleContext(SolidityParser.YulBlockContext,0)


        def yulVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.YulVariableDeclarationContext,0)


        def yulAssignment(self):
            return self.getTypedRuleContext(SolidityParser.YulAssignmentContext,0)


        def yulFunctionCall(self):
            return self.getTypedRuleContext(SolidityParser.YulFunctionCallContext,0)


        def yulIfStatement(self):
            return self.getTypedRuleContext(SolidityParser.YulIfStatementContext,0)


        def yulForStatement(self):
            return self.getTypedRuleContext(SolidityParser.YulForStatementContext,0)


        def yulSwitchStatement(self):
            return self.getTypedRuleContext(SolidityParser.YulSwitchStatementContext,0)


        def yulLeave(self):
            return self.getTypedRuleContext(SolidityParser.YulLeaveContext,0)


        def yulBreak(self):
            return self.getTypedRuleContext(SolidityParser.YulBreakContext,0)


        def yulContinue(self):
            return self.getTypedRuleContext(SolidityParser.YulContinueContext,0)


        def yulLabel(self):
            return self.getTypedRuleContext(SolidityParser.YulLabelContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulStatement" ):
                listener.enterYulStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulStatement" ):
                listener.exitYulStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulStatement" ):
                return visitor.visitYulStatement(self)
            else:
                return visitor.visitChildren(self)




    def yulStatement(self):

        localctx = SolidityParser.YulStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_yulStatement)
        try:
            self.state = 865
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 854
                self.yulBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 855
                self.yulVariableDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 856
                self.yulAssignment()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 857
                self.yulFunctionCall()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 858
                self.yulIfStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 859
                self.yulForStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 860
                self.yulSwitchStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 861
                self.yulLeave()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 862
                self.yulBreak()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 863
                self.yulContinue()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 864
                self.yulLabel()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(SolidityParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SolidityParser.RBRACE, 0)

        def yulStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulStatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulStatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulBlock" ):
                listener.enterYulBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulBlock" ):
                listener.exitYulBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulBlock" ):
                return visitor.visitYulBlock(self)
            else:
                return visitor.visitChildren(self)




    def yulBlock(self):

        localctx = SolidityParser.YulBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_yulBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.match(SolidityParser.LBRACE)
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==8 or _la==32 or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 18014398509489669) != 0):
                self.state = 868
                self.yulStatement()
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 874
            self.match(SolidityParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(SolidityParser.LET, 0)

        def yulIdentifier(self):
            return self.getTypedRuleContext(SolidityParser.YulIdentifierContext,0)


        def COLON(self):
            return self.getToken(SolidityParser.COLON, 0)

        def yulTypedName(self):
            return self.getTypedRuleContext(SolidityParser.YulTypedNameContext,0)


        def ASSIGN(self):
            return self.getToken(SolidityParser.ASSIGN, 0)

        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulVariableDeclaration" ):
                listener.enterYulVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulVariableDeclaration" ):
                listener.exitYulVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulVariableDeclaration" ):
                return visitor.visitYulVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def yulVariableDeclaration(self):

        localctx = SolidityParser.YulVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_yulVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.match(SolidityParser.LET)
            self.state = 877
            self.yulIdentifier()
            self.state = 880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 878
                self.match(SolidityParser.COLON)
                self.state = 879
                self.yulTypedName()


            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 882
                self.match(SolidityParser.ASSIGN)
                self.state = 883
                self.yulExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulTypedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulIdentifier(self):
            return self.getTypedRuleContext(SolidityParser.YulIdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulTypedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulTypedName" ):
                listener.enterYulTypedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulTypedName" ):
                listener.exitYulTypedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulTypedName" ):
                return visitor.visitYulTypedName(self)
            else:
                return visitor.visitChildren(self)




    def yulTypedName(self):

        localctx = SolidityParser.YulTypedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_yulTypedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.yulIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulPath(self):
            return self.getTypedRuleContext(SolidityParser.YulPathContext,0)


        def ASSIGN(self):
            return self.getToken(SolidityParser.ASSIGN, 0)

        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulAssignment" ):
                listener.enterYulAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulAssignment" ):
                listener.exitYulAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulAssignment" ):
                return visitor.visitYulAssignment(self)
            else:
                return visitor.visitChildren(self)




    def yulAssignment(self):

        localctx = SolidityParser.YulAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_yulAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.yulPath()
            self.state = 889
            self.match(SolidityParser.ASSIGN)
            self.state = 890
            self.yulExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulIdentifier(self):
            return self.getTypedRuleContext(SolidityParser.YulIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def yulExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.COMMA)
            else:
                return self.getToken(SolidityParser.COMMA, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_yulFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulFunctionCall" ):
                listener.enterYulFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulFunctionCall" ):
                listener.exitYulFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulFunctionCall" ):
                return visitor.visitYulFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def yulFunctionCall(self):

        localctx = SolidityParser.YulFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_yulFunctionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.yulIdentifier()
            self.state = 893
            self.match(SolidityParser.LPAREN)
            self.state = 902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & 31) != 0):
                self.state = 894
                self.yulExpression()
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==59:
                    self.state = 895
                    self.match(SolidityParser.COMMA)
                    self.state = 896
                    self.yulExpression()
                    self.state = 901
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 904
            self.match(SolidityParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulIfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(SolidityParser.IF, 0)

        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def yulBlock(self):
            return self.getTypedRuleContext(SolidityParser.YulBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulIfStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulIfStatement" ):
                listener.enterYulIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulIfStatement" ):
                listener.exitYulIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulIfStatement" ):
                return visitor.visitYulIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def yulIfStatement(self):

        localctx = SolidityParser.YulIfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_yulIfStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.match(SolidityParser.IF)
            self.state = 907
            self.yulExpression()
            self.state = 908
            self.yulBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(SolidityParser.FOR, 0)

        def yulBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulBlockContext,i)


        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulForStatement" ):
                listener.enterYulForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulForStatement" ):
                listener.exitYulForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulForStatement" ):
                return visitor.visitYulForStatement(self)
            else:
                return visitor.visitChildren(self)




    def yulForStatement(self):

        localctx = SolidityParser.YulForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_yulForStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(SolidityParser.FOR)
            self.state = 911
            self.yulBlock()
            self.state = 912
            self.yulExpression()
            self.state = 913
            self.yulBlock()
            self.state = 914
            self.yulBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulSwitchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def yulLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulLiteralContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulLiteralContext,i)


        def yulBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulBlockContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulSwitchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulSwitchStatement" ):
                listener.enterYulSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulSwitchStatement" ):
                listener.exitYulSwitchStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulSwitchStatement" ):
                return visitor.visitYulSwitchStatement(self)
            else:
                return visitor.visitChildren(self)




    def yulSwitchStatement(self):

        localctx = SolidityParser.YulSwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_yulSwitchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.match(SolidityParser.T__7)
            self.state = 917
            self.yulExpression()
            self.state = 924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 918
                self.match(SolidityParser.T__8)
                self.state = 919
                self.yulLiteral()
                self.state = 920
                self.yulBlock()
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 927
                self.match(SolidityParser.T__9)
                self.state = 928
                self.yulBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulLeaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEAVE(self):
            return self.getToken(SolidityParser.LEAVE, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_yulLeave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulLeave" ):
                listener.enterYulLeave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulLeave" ):
                listener.exitYulLeave(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulLeave" ):
                return visitor.visitYulLeave(self)
            else:
                return visitor.visitChildren(self)




    def yulLeave(self):

        localctx = SolidityParser.YulLeaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_yulLeave)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self.match(SolidityParser.LEAVE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulBreakContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(SolidityParser.BREAK, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_yulBreak

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulBreak" ):
                listener.enterYulBreak(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulBreak" ):
                listener.exitYulBreak(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulBreak" ):
                return visitor.visitYulBreak(self)
            else:
                return visitor.visitChildren(self)




    def yulBreak(self):

        localctx = SolidityParser.YulBreakContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_yulBreak)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(SolidityParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulContinueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(SolidityParser.CONTINUE, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_yulContinue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulContinue" ):
                listener.enterYulContinue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulContinue" ):
                listener.exitYulContinue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulContinue" ):
                return visitor.visitYulContinue(self)
            else:
                return visitor.visitChildren(self)




    def yulContinue(self):

        localctx = SolidityParser.YulContinueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_yulContinue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.match(SolidityParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(SolidityParser.COLON, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_yulLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulLabel" ):
                listener.enterYulLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulLabel" ):
                listener.exitYulLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulLabel" ):
                return visitor.visitYulLabel(self)
            else:
                return visitor.visitChildren(self)




    def yulLabel(self):

        localctx = SolidityParser.YulLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_yulLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.match(SolidityParser.IDENTIFIER)
            self.state = 938
            self.match(SolidityParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulLiteral(self):
            return self.getTypedRuleContext(SolidityParser.YulLiteralContext,0)


        def yulIdentifier(self):
            return self.getTypedRuleContext(SolidityParser.YulIdentifierContext,0)


        def yulFunctionCall(self):
            return self.getTypedRuleContext(SolidityParser.YulFunctionCallContext,0)


        def yulPath(self):
            return self.getTypedRuleContext(SolidityParser.YulPathContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulExpression" ):
                listener.enterYulExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulExpression" ):
                listener.exitYulExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulExpression" ):
                return visitor.visitYulExpression(self)
            else:
                return visitor.visitChildren(self)




    def yulExpression(self):

        localctx = SolidityParser.YulExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_yulExpression)
        try:
            self.state = 944
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 940
                self.yulLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 941
                self.yulIdentifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 942
                self.yulFunctionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 943
                self.yulPath()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(SolidityParser.DECIMAL_LITERAL, 0)

        def HEX_LITERAL(self):
            return self.getToken(SolidityParser.HEX_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(SolidityParser.STRING_LITERAL, 0)

        def BOOL_LITERAL(self):
            return self.getToken(SolidityParser.BOOL_LITERAL, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_yulLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulLiteral" ):
                listener.enterYulLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulLiteral" ):
                listener.exitYulLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulLiteral" ):
                return visitor.visitYulLiteral(self)
            else:
                return visitor.visitChildren(self)




    def yulLiteral(self):

        localctx = SolidityParser.YulLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_yulLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            _la = self._input.LA(1)
            if not(((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_yulIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulIdentifier" ):
                listener.enterYulIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulIdentifier" ):
                listener.exitYulIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulIdentifier" ):
                return visitor.visitYulIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def yulIdentifier(self):

        localctx = SolidityParser.YulIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_yulIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.match(SolidityParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulIdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulIdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.DOT)
            else:
                return self.getToken(SolidityParser.DOT, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_yulPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulPath" ):
                listener.enterYulPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulPath" ):
                listener.exitYulPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulPath" ):
                return visitor.visitYulPath(self)
            else:
                return visitor.visitChildren(self)




    def yulPath(self):

        localctx = SolidityParser.YulPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_yulPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.yulIdentifier()
            self.state = 955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==60:
                self.state = 951
                self.match(SolidityParser.DOT)
                self.state = 952
                self.yulIdentifier()
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def primaryExpression(self):
            return self.getTypedRuleContext(SolidityParser.PrimaryExpressionContext,0)


        def NEW(self):
            return self.getToken(SolidityParser.NEW, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def DELETE(self):
            return self.getToken(SolidityParser.DELETE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def PLUSPLUS(self):
            return self.getToken(SolidityParser.PLUSPLUS, 0)

        def MINUSMINUS(self):
            return self.getToken(SolidityParser.MINUSMINUS, 0)

        def PLUS(self):
            return self.getToken(SolidityParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SolidityParser.MINUS, 0)

        def BIT_NOT(self):
            return self.getToken(SolidityParser.BIT_NOT, 0)

        def NOT(self):
            return self.getToken(SolidityParser.NOT, 0)

        def MULT(self):
            return self.getToken(SolidityParser.MULT, 0)

        def DIV(self):
            return self.getToken(SolidityParser.DIV, 0)

        def MOD(self):
            return self.getToken(SolidityParser.MOD, 0)

        def LSHIFT(self):
            return self.getToken(SolidityParser.LSHIFT, 0)

        def RSHIFT(self):
            return self.getToken(SolidityParser.RSHIFT, 0)

        def BIT_AND(self):
            return self.getToken(SolidityParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(SolidityParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(SolidityParser.BIT_XOR, 0)

        def LT(self):
            return self.getToken(SolidityParser.LT, 0)

        def GT(self):
            return self.getToken(SolidityParser.GT, 0)

        def LTE(self):
            return self.getToken(SolidityParser.LTE, 0)

        def GTE(self):
            return self.getToken(SolidityParser.GTE, 0)

        def EQ(self):
            return self.getToken(SolidityParser.EQ, 0)

        def NEQ(self):
            return self.getToken(SolidityParser.NEQ, 0)

        def AND(self):
            return self.getToken(SolidityParser.AND, 0)

        def OR(self):
            return self.getToken(SolidityParser.OR, 0)

        def QUESTION(self):
            return self.getToken(SolidityParser.QUESTION, 0)

        def COLON(self):
            return self.getToken(SolidityParser.COLON, 0)

        def ASSIGN(self):
            return self.getToken(SolidityParser.ASSIGN, 0)

        def LBRACK(self):
            return self.getToken(SolidityParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(SolidityParser.RBRACK, 0)

        def DOT(self):
            return self.getToken(SolidityParser.DOT, 0)

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 166
        self.enterRecursionRule(localctx, 166, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 30, 65, 87, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129]:
                self.state = 959
                self.primaryExpression()
                pass
            elif token in [85]:
                self.state = 960
                self.match(SolidityParser.NEW)
                self.state = 961
                self.typeName()
                pass
            elif token in [86]:
                self.state = 962
                self.match(SolidityParser.DELETE)
                self.state = 963
                self.expression(10)
                pass
            elif token in [108]:
                self.state = 964
                self.match(SolidityParser.PLUSPLUS)
                self.state = 965
                self.expression(9)
                pass
            elif token in [109]:
                self.state = 966
                self.match(SolidityParser.MINUSMINUS)
                self.state = 967
                self.expression(8)
                pass
            elif token in [37]:
                self.state = 968
                self.match(SolidityParser.PLUS)
                self.state = 969
                self.expression(7)
                pass
            elif token in [38]:
                self.state = 970
                self.match(SolidityParser.MINUS)
                self.state = 971
                self.expression(6)
                pass
            elif token in [54]:
                self.state = 972
                self.match(SolidityParser.BIT_NOT)
                self.state = 973
                self.expression(5)
                pass
            elif token in [44]:
                self.state = 974
                self.match(SolidityParser.NOT)
                self.state = 975
                self.expression(4)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1028
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1026
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                    if la_ == 1:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 978
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 979
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3848290697216) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 980
                        self.expression(22)
                        pass

                    elif la_ == 2:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 981
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 982
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==37 or _la==38):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 983
                        self.expression(21)
                        pass

                    elif la_ == 3:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 984
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 985
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==55 or _la==56):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 986
                        self.expression(20)
                        pass

                    elif la_ == 4:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 987
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 988
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 15762598695796736) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 989
                        self.expression(19)
                        pass

                    elif la_ == 5:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 990
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 991
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 527765581332480) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 992
                        self.expression(18)
                        pass

                    elif la_ == 6:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 993
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 994
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==49 or _la==50):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 995
                        self.expression(17)
                        pass

                    elif la_ == 7:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 996
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 997
                        self.match(SolidityParser.AND)
                        self.state = 998
                        self.expression(16)
                        pass

                    elif la_ == 8:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 999
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1000
                        self.match(SolidityParser.OR)
                        self.state = 1001
                        self.expression(15)
                        pass

                    elif la_ == 9:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1002
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1003
                        self.match(SolidityParser.QUESTION)
                        self.state = 1004
                        self.expression(0)
                        self.state = 1005
                        self.match(SolidityParser.COLON)
                        self.state = 1006
                        self.expression(14)
                        pass

                    elif la_ == 10:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1008
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1009
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 68721571840) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1010
                        self.expression(13)
                        pass

                    elif la_ == 11:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1011
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1012
                        self.match(SolidityParser.LBRACK)
                        self.state = 1014
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18032404086128702) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1099511620435967) != 0) or _la==129:
                            self.state = 1013
                            self.expression(0)


                        self.state = 1016
                        self.match(SolidityParser.RBRACK)
                        pass

                    elif la_ == 12:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1017
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1018
                        self.match(SolidityParser.DOT)
                        self.state = 1019
                        self.match(SolidityParser.IDENTIFIER)
                        pass

                    elif la_ == 13:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1020
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1021
                        self.match(SolidityParser.LPAREN)
                        self.state = 1023
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18032408381095998) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1099511620435967) != 0) or _la==129:
                            self.state = 1022
                            self.functionCallArguments()


                        self.state = 1025
                        self.match(SolidityParser.RPAREN)
                        pass

             
                self.state = 1030
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FunctionCallArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(SolidityParser.LBRACE, 0)

        def namedArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NamedArgumentContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NamedArgumentContext,i)


        def RBRACE(self):
            return self.getToken(SolidityParser.RBRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.COMMA)
            else:
                return self.getToken(SolidityParser.COMMA, i)

        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCallArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArguments" ):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArguments" ):
                listener.exitFunctionCallArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallArguments" ):
                return visitor.visitFunctionCallArguments(self)
            else:
                return visitor.visitChildren(self)




    def functionCallArguments(self):

        localctx = SolidityParser.FunctionCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_functionCallArguments)
        self._la = 0 # Token type
        try:
            self.state = 1043
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1031
                self.match(SolidityParser.LBRACE)
                self.state = 1032
                self.namedArgument()
                self.state = 1037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==59:
                    self.state = 1033
                    self.match(SolidityParser.COMMA)
                    self.state = 1034
                    self.namedArgument()
                    self.state = 1039
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1040
                self.match(SolidityParser.RBRACE)
                pass
            elif token in [1, 2, 3, 4, 5, 30, 37, 38, 44, 54, 65, 85, 86, 87, 108, 109, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1042
                self.expressionList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(SolidityParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_namedArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedArgument" ):
                listener.enterNamedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedArgument" ):
                listener.exitNamedArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedArgument" ):
                return visitor.visitNamedArgument(self)
            else:
                return visitor.visitChildren(self)




    def namedArgument(self):

        localctx = SolidityParser.NamedArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_namedArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.match(SolidityParser.IDENTIFIER)
            self.state = 1046
            self.match(SolidityParser.COLON)
            self.state = 1047
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SolidityParser.IDENTIFIER, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(SolidityParser.DECIMAL_LITERAL, 0)

        def HEX_LITERAL(self):
            return self.getToken(SolidityParser.HEX_LITERAL, 0)

        def BOOL_LITERAL(self):
            return self.getToken(SolidityParser.BOOL_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(SolidityParser.STRING_LITERAL, 0)

        def tupleExpression(self):
            return self.getTypedRuleContext(SolidityParser.TupleExpressionContext,0)


        def typeNameExpression(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = SolidityParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_primaryExpression)
        try:
            self.state = 1056
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1049
                self.match(SolidityParser.IDENTIFIER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1050
                self.match(SolidityParser.DECIMAL_LITERAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1051
                self.match(SolidityParser.HEX_LITERAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1052
                self.match(SolidityParser.BOOL_LITERAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1053
                self.match(SolidityParser.STRING_LITERAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1054
                self.tupleExpression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1055
                self.typeNameExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(SolidityParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SolidityParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupleExpression" ):
                return visitor.visitTupleExpression(self)
            else:
                return visitor.visitChildren(self)




    def tupleExpression(self):

        localctx = SolidityParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.match(SolidityParser.LPAREN)
            self.state = 1060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18032404086128702) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1099511620435967) != 0) or _la==129:
                self.state = 1059
                self.expressionList()


            self.state = 1062
            self.match(SolidityParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeNameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameExpression" ):
                listener.enterTypeNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameExpression" ):
                listener.exitTypeNameExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeNameExpression" ):
                return visitor.visitTypeNameExpression(self)
            else:
                return visitor.visitChildren(self)




    def typeNameExpression(self):

        localctx = SolidityParser.TypeNameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_typeNameExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.typeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.COMMA)
            else:
                return self.getToken(SolidityParser.COMMA, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = SolidityParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.expression(0)
            self.state = 1071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==59:
                self.state = 1067
                self.match(SolidityParser.COMMA)
                self.state = 1068
                self.expression(0)
                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[83] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         




