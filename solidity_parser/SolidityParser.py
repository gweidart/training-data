# Generated from Solidity.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,134,1181,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,209,8,0,10,
        0,12,0,212,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,3,3,225,
        8,3,1,4,1,4,3,4,229,8,4,1,4,5,4,232,8,4,10,4,12,4,235,9,4,1,5,1,
        5,1,6,3,6,240,8,6,1,6,1,6,3,6,244,8,6,1,6,3,6,247,8,6,1,7,1,7,1,
        7,3,7,252,8,7,1,8,1,8,1,8,1,8,3,8,258,8,8,1,8,1,8,1,8,1,8,1,8,3,
        8,265,8,8,1,8,1,8,3,8,269,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,5,8,280,8,8,10,8,12,8,283,9,8,1,8,1,8,1,8,1,8,1,8,3,8,290,8,8,
        1,9,1,9,1,10,3,10,295,8,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,303,
        8,10,10,10,12,10,306,9,10,3,10,308,8,10,1,10,1,10,5,10,312,8,10,
        10,10,12,10,315,9,10,1,10,1,10,1,11,1,11,1,11,3,11,322,8,11,1,11,
        3,11,325,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,335,8,
        12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,344,8,13,10,13,12,13,
        347,9,13,1,13,1,13,1,13,3,13,352,8,13,1,13,1,13,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
        16,3,16,373,8,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,5,17,385,8,17,10,17,12,17,388,9,17,3,17,390,8,17,1,17,1,17,1,
        18,1,18,1,18,3,18,397,8,18,1,18,1,18,5,18,401,8,18,10,18,12,18,404,
        9,18,1,18,1,18,3,18,408,8,18,1,19,1,19,1,19,3,19,413,8,19,1,19,3,
        19,416,8,19,1,20,1,20,1,20,1,20,3,20,422,8,20,1,20,1,20,3,20,426,
        8,20,1,21,1,21,3,21,430,8,21,1,21,1,21,1,21,3,21,435,8,21,1,22,1,
        22,1,22,1,23,1,23,1,23,1,23,1,23,5,23,445,8,23,10,23,12,23,448,9,
        23,1,24,1,24,1,24,1,24,3,24,454,8,24,1,24,1,24,1,25,1,25,1,26,1,
        26,1,26,1,26,3,26,464,8,26,1,26,1,26,5,26,468,8,26,10,26,12,26,471,
        9,26,1,26,1,26,1,27,1,27,1,27,1,27,5,27,479,8,27,10,27,12,27,482,
        9,27,3,27,484,8,27,1,27,1,27,1,28,1,28,3,28,490,8,28,1,28,3,28,493,
        8,28,1,29,1,29,1,29,1,29,5,29,499,8,29,10,29,12,29,502,9,29,3,29,
        504,8,29,1,29,1,29,1,30,1,30,3,30,510,8,30,1,30,3,30,513,8,30,1,
        31,1,31,1,31,1,31,5,31,519,8,31,10,31,12,31,522,9,31,3,31,524,8,
        31,1,31,1,31,1,32,1,32,3,32,530,8,32,1,33,1,33,3,33,534,8,33,1,33,
        1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,545,8,34,1,34,1,34,
        1,34,3,34,550,8,34,1,34,5,34,553,8,34,10,34,12,34,556,9,34,1,35,
        1,35,1,35,5,35,561,8,35,10,35,12,35,564,9,35,1,36,1,36,3,36,568,
        8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,
        5,38,582,8,38,10,38,12,38,585,9,38,1,38,1,38,3,38,589,8,38,1,39,
        1,39,1,40,1,40,1,41,1,41,5,41,597,8,41,10,41,12,41,600,9,41,1,41,
        1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,3,42,620,8,42,1,43,1,43,1,43,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,3,44,632,8,44,1,45,1,45,1,45,3,45,637,8,45,1,
        45,1,45,4,45,641,8,45,11,45,12,45,642,1,46,1,46,3,46,647,8,46,1,
        46,3,46,650,8,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,
        48,3,48,662,8,48,1,49,1,49,1,49,1,50,1,50,3,50,669,8,50,1,51,1,51,
        1,51,1,51,3,51,675,8,51,1,51,1,51,3,51,679,8,51,1,51,3,51,682,8,
        51,1,51,1,51,1,51,1,52,1,52,3,52,689,8,52,1,52,1,52,1,53,1,53,1,
        53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,
        56,3,56,709,8,56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,
        59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,731,8,
        60,1,60,1,60,3,60,735,8,60,1,60,1,60,1,61,3,61,740,8,61,1,61,1,61,
        3,61,744,8,61,5,61,746,8,61,10,61,12,61,749,9,61,1,62,1,62,3,62,
        753,8,62,1,62,5,62,756,8,62,10,62,12,62,759,9,62,1,62,3,62,762,8,
        62,1,62,1,62,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,796,8,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,3,64,845,8,64,1,64,1,64,1,64,1,64,3,64,851,
        8,64,1,64,1,64,3,64,855,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,3,64,868,8,64,1,64,1,64,1,64,1,64,5,64,874,8,
        64,10,64,12,64,877,9,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,3,65,888,8,65,1,65,1,65,1,65,3,65,893,8,65,1,65,3,65,896,8,
        65,1,66,1,66,1,66,5,66,901,8,66,10,66,12,66,904,9,66,1,67,1,67,1,
        67,5,67,909,8,67,10,67,12,67,912,9,67,1,67,3,67,915,8,67,1,68,1,
        68,1,68,1,68,1,69,1,69,3,69,923,8,69,1,69,1,69,1,70,1,70,3,70,929,
        8,70,1,70,1,70,3,70,933,8,70,3,70,935,8,70,1,71,1,71,1,71,1,71,1,
        71,1,72,1,72,5,72,944,8,72,10,72,12,72,947,9,72,1,72,1,72,1,73,1,
        73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,
        73,1,73,1,73,1,73,3,73,969,8,73,1,74,1,74,1,74,3,74,974,8,74,1,75,
        1,75,1,75,1,75,1,76,1,76,1,76,1,76,3,76,984,8,76,1,76,1,76,3,76,
        988,8,76,1,76,1,76,5,76,992,8,76,10,76,12,76,995,9,76,1,76,3,76,
        998,8,76,1,77,1,77,1,77,1,77,3,77,1004,8,77,1,78,1,78,1,78,1,78,
        1,79,1,79,1,79,1,79,1,79,1,79,3,79,1016,8,79,1,80,1,80,1,80,5,80,
        1021,8,80,10,80,12,80,1024,9,80,1,81,1,81,1,81,1,82,1,82,1,82,1,
        83,1,83,1,83,5,83,1035,8,83,10,83,12,83,1038,9,83,1,84,1,84,1,84,
        1,84,1,84,1,84,3,84,1046,8,84,1,85,1,85,1,85,1,85,3,85,1052,8,85,
        1,85,1,85,3,85,1056,8,85,1,85,1,85,1,86,1,86,1,86,1,87,1,87,1,87,
        3,87,1066,8,87,1,87,1,87,1,87,3,87,1071,8,87,1,87,1,87,1,88,1,88,
        1,88,1,88,1,89,1,89,1,89,1,89,3,89,1083,8,89,1,90,1,90,1,90,1,90,
        1,91,1,91,3,91,1091,8,91,1,91,1,91,3,91,1095,8,91,5,91,1097,8,91,
        10,91,12,91,1100,9,91,3,91,1102,8,91,1,91,1,91,1,91,1,91,1,91,5,
        91,1109,8,91,10,91,12,91,1112,9,91,3,91,1114,8,91,1,91,3,91,1117,
        8,91,1,92,1,92,3,92,1121,8,92,1,93,1,93,3,93,1125,8,93,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,3,94,1135,8,94,1,95,4,95,1138,8,95,
        11,95,12,95,1139,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
        97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1160,8,97,1,98,1,
        98,1,98,1,98,1,98,5,98,1167,8,98,10,98,12,98,1170,9,98,1,98,1,98,
        3,98,1174,8,98,1,99,4,99,1177,8,99,11,99,12,99,1178,1,99,0,2,68,
        128,100,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
        186,188,190,192,194,196,198,0,15,1,0,4,10,1,0,19,21,1,0,40,42,4,
        0,112,112,119,119,123,123,125,125,3,0,36,36,56,59,99,103,1,0,60,
        61,1,0,64,65,1,0,66,67,2,0,13,13,70,71,1,0,72,73,1,0,6,9,1,0,76,
        77,2,0,10,10,80,89,1,0,105,106,3,0,116,116,118,118,120,121,1328,
        0,210,1,0,0,0,2,215,1,0,0,0,4,220,1,0,0,0,6,224,1,0,0,0,8,226,1,
        0,0,0,10,236,1,0,0,0,12,246,1,0,0,0,14,248,1,0,0,0,16,289,1,0,0,
        0,18,291,1,0,0,0,20,294,1,0,0,0,22,318,1,0,0,0,24,334,1,0,0,0,26,
        336,1,0,0,0,28,355,1,0,0,0,30,362,1,0,0,0,32,367,1,0,0,0,34,376,
        1,0,0,0,36,393,1,0,0,0,38,409,1,0,0,0,40,417,1,0,0,0,42,434,1,0,
        0,0,44,436,1,0,0,0,46,446,1,0,0,0,48,449,1,0,0,0,50,457,1,0,0,0,
        52,459,1,0,0,0,54,474,1,0,0,0,56,487,1,0,0,0,58,494,1,0,0,0,60,507,
        1,0,0,0,62,514,1,0,0,0,64,527,1,0,0,0,66,531,1,0,0,0,68,544,1,0,
        0,0,70,557,1,0,0,0,72,567,1,0,0,0,74,569,1,0,0,0,76,576,1,0,0,0,
        78,590,1,0,0,0,80,592,1,0,0,0,82,594,1,0,0,0,84,619,1,0,0,0,86,621,
        1,0,0,0,88,624,1,0,0,0,90,633,1,0,0,0,92,644,1,0,0,0,94,653,1,0,
        0,0,96,661,1,0,0,0,98,663,1,0,0,0,100,666,1,0,0,0,102,670,1,0,0,
        0,104,686,1,0,0,0,106,692,1,0,0,0,108,700,1,0,0,0,110,703,1,0,0,
        0,112,706,1,0,0,0,114,712,1,0,0,0,116,715,1,0,0,0,118,719,1,0,0,
        0,120,730,1,0,0,0,122,739,1,0,0,0,124,750,1,0,0,0,126,765,1,0,0,
        0,128,795,1,0,0,0,130,895,1,0,0,0,132,897,1,0,0,0,134,905,1,0,0,
        0,136,916,1,0,0,0,138,920,1,0,0,0,140,934,1,0,0,0,142,936,1,0,0,
        0,144,941,1,0,0,0,146,968,1,0,0,0,148,973,1,0,0,0,150,975,1,0,0,
        0,152,983,1,0,0,0,154,999,1,0,0,0,156,1005,1,0,0,0,158,1015,1,0,
        0,0,160,1017,1,0,0,0,162,1025,1,0,0,0,164,1028,1,0,0,0,166,1031,
        1,0,0,0,168,1045,1,0,0,0,170,1047,1,0,0,0,172,1059,1,0,0,0,174,1062,
        1,0,0,0,176,1074,1,0,0,0,178,1082,1,0,0,0,180,1084,1,0,0,0,182,1116,
        1,0,0,0,184,1120,1,0,0,0,186,1122,1,0,0,0,188,1134,1,0,0,0,190,1137,
        1,0,0,0,192,1141,1,0,0,0,194,1159,1,0,0,0,196,1161,1,0,0,0,198,1176,
        1,0,0,0,200,209,3,2,1,0,201,209,3,16,8,0,202,209,3,20,10,0,203,209,
        3,52,26,0,204,209,3,34,17,0,205,209,3,40,20,0,206,209,3,28,14,0,
        207,209,3,30,15,0,208,200,1,0,0,0,208,201,1,0,0,0,208,202,1,0,0,
        0,208,203,1,0,0,0,208,204,1,0,0,0,208,205,1,0,0,0,208,206,1,0,0,
        0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,
        0,211,213,1,0,0,0,212,210,1,0,0,0,213,214,5,0,0,1,214,1,1,0,0,0,
        215,216,5,1,0,0,216,217,3,4,2,0,217,218,3,6,3,0,218,219,5,2,0,0,
        219,3,1,0,0,0,220,221,3,188,94,0,221,5,1,0,0,0,222,225,3,8,4,0,223,
        225,3,128,64,0,224,222,1,0,0,0,224,223,1,0,0,0,225,7,1,0,0,0,226,
        233,3,12,6,0,227,229,5,3,0,0,228,227,1,0,0,0,228,229,1,0,0,0,229,
        230,1,0,0,0,230,232,3,12,6,0,231,228,1,0,0,0,232,235,1,0,0,0,233,
        231,1,0,0,0,233,234,1,0,0,0,234,9,1,0,0,0,235,233,1,0,0,0,236,237,
        7,0,0,0,237,11,1,0,0,0,238,240,3,10,5,0,239,238,1,0,0,0,239,240,
        1,0,0,0,240,241,1,0,0,0,241,247,5,131,0,0,242,244,3,10,5,0,243,242,
        1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,247,5,105,0,0,246,239,
        1,0,0,0,246,243,1,0,0,0,247,13,1,0,0,0,248,251,3,188,94,0,249,250,
        5,11,0,0,250,252,3,188,94,0,251,249,1,0,0,0,251,252,1,0,0,0,252,
        15,1,0,0,0,253,254,5,12,0,0,254,257,3,18,9,0,255,256,5,11,0,0,256,
        258,3,188,94,0,257,255,1,0,0,0,257,258,1,0,0,0,258,259,1,0,0,0,259,
        260,5,2,0,0,260,290,1,0,0,0,261,264,5,12,0,0,262,265,5,13,0,0,263,
        265,3,188,94,0,264,262,1,0,0,0,264,263,1,0,0,0,265,268,1,0,0,0,266,
        267,5,11,0,0,267,269,3,188,94,0,268,266,1,0,0,0,268,269,1,0,0,0,
        269,270,1,0,0,0,270,271,5,14,0,0,271,272,3,18,9,0,272,273,5,2,0,
        0,273,290,1,0,0,0,274,275,5,12,0,0,275,276,5,15,0,0,276,281,3,14,
        7,0,277,278,5,16,0,0,278,280,3,14,7,0,279,277,1,0,0,0,280,283,1,
        0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,281,1,
        0,0,0,284,285,5,17,0,0,285,286,5,14,0,0,286,287,3,18,9,0,287,288,
        5,2,0,0,288,290,1,0,0,0,289,253,1,0,0,0,289,261,1,0,0,0,289,274,
        1,0,0,0,290,17,1,0,0,0,291,292,5,130,0,0,292,19,1,0,0,0,293,295,
        5,18,0,0,294,293,1,0,0,0,294,295,1,0,0,0,295,296,1,0,0,0,296,297,
        7,1,0,0,297,307,3,188,94,0,298,299,5,22,0,0,299,304,3,22,11,0,300,
        301,5,16,0,0,301,303,3,22,11,0,302,300,1,0,0,0,303,306,1,0,0,0,304,
        302,1,0,0,0,304,305,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,307,
        298,1,0,0,0,307,308,1,0,0,0,308,309,1,0,0,0,309,313,5,15,0,0,310,
        312,3,24,12,0,311,310,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,
        314,1,0,0,0,314,316,1,0,0,0,315,313,1,0,0,0,316,317,5,17,0,0,317,
        21,1,0,0,0,318,324,3,70,35,0,319,321,5,23,0,0,320,322,3,132,66,0,
        321,320,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,325,5,24,0,0,
        324,319,1,0,0,0,324,325,1,0,0,0,325,23,1,0,0,0,326,335,3,26,13,0,
        327,335,3,32,16,0,328,335,3,34,17,0,329,335,3,36,18,0,330,335,3,
        40,20,0,331,335,3,48,24,0,332,335,3,52,26,0,333,335,3,30,15,0,334,
        326,1,0,0,0,334,327,1,0,0,0,334,328,1,0,0,0,334,329,1,0,0,0,334,
        330,1,0,0,0,334,331,1,0,0,0,334,332,1,0,0,0,334,333,1,0,0,0,335,
        25,1,0,0,0,336,345,3,68,34,0,337,344,5,121,0,0,338,344,5,118,0,0,
        339,344,5,120,0,0,340,344,5,112,0,0,341,344,5,113,0,0,342,344,3,
        196,98,0,343,337,1,0,0,0,343,338,1,0,0,0,343,339,1,0,0,0,343,340,
        1,0,0,0,343,341,1,0,0,0,343,342,1,0,0,0,344,347,1,0,0,0,345,343,
        1,0,0,0,345,346,1,0,0,0,346,348,1,0,0,0,347,345,1,0,0,0,348,351,
        3,188,94,0,349,350,5,10,0,0,350,352,3,128,64,0,351,349,1,0,0,0,351,
        352,1,0,0,0,352,353,1,0,0,0,353,354,5,2,0,0,354,27,1,0,0,0,355,356,
        3,68,34,0,356,357,5,112,0,0,357,358,3,188,94,0,358,359,5,10,0,0,
        359,360,3,128,64,0,360,361,5,2,0,0,361,29,1,0,0,0,362,363,5,25,0,
        0,363,364,3,188,94,0,364,365,3,54,27,0,365,366,5,2,0,0,366,31,1,
        0,0,0,367,368,5,26,0,0,368,369,3,188,94,0,369,372,5,27,0,0,370,373,
        5,13,0,0,371,373,3,68,34,0,372,370,1,0,0,0,372,371,1,0,0,0,373,374,
        1,0,0,0,374,375,5,2,0,0,375,33,1,0,0,0,376,377,5,28,0,0,377,378,
        3,188,94,0,378,389,5,15,0,0,379,380,3,66,33,0,380,386,5,2,0,0,381,
        382,3,66,33,0,382,383,5,2,0,0,383,385,1,0,0,0,384,381,1,0,0,0,385,
        388,1,0,0,0,386,384,1,0,0,0,386,387,1,0,0,0,387,390,1,0,0,0,388,
        386,1,0,0,0,389,379,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,391,
        392,5,17,0,0,392,35,1,0,0,0,393,394,5,29,0,0,394,396,3,188,94,0,
        395,397,3,54,27,0,396,395,1,0,0,0,396,397,1,0,0,0,397,402,1,0,0,
        0,398,401,5,122,0,0,399,401,3,196,98,0,400,398,1,0,0,0,400,399,1,
        0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,407,1,
        0,0,0,404,402,1,0,0,0,405,408,5,2,0,0,406,408,3,82,41,0,407,405,
        1,0,0,0,407,406,1,0,0,0,408,37,1,0,0,0,409,415,3,188,94,0,410,412,
        5,23,0,0,411,413,3,132,66,0,412,411,1,0,0,0,412,413,1,0,0,0,413,
        414,1,0,0,0,414,416,5,24,0,0,415,410,1,0,0,0,415,416,1,0,0,0,416,
        39,1,0,0,0,417,418,3,42,21,0,418,419,3,54,27,0,419,421,3,46,23,0,
        420,422,3,44,22,0,421,420,1,0,0,0,421,422,1,0,0,0,422,425,1,0,0,
        0,423,426,5,2,0,0,424,426,3,82,41,0,425,423,1,0,0,0,425,424,1,0,
        0,0,426,41,1,0,0,0,427,429,5,30,0,0,428,430,3,188,94,0,429,428,1,
        0,0,0,429,430,1,0,0,0,430,435,1,0,0,0,431,435,5,126,0,0,432,435,
        5,127,0,0,433,435,5,128,0,0,434,427,1,0,0,0,434,431,1,0,0,0,434,
        432,1,0,0,0,434,433,1,0,0,0,435,43,1,0,0,0,436,437,5,31,0,0,437,
        438,3,54,27,0,438,45,1,0,0,0,439,445,3,192,96,0,440,445,5,122,0,
        0,441,445,3,80,40,0,442,445,3,38,19,0,443,445,3,196,98,0,444,439,
        1,0,0,0,444,440,1,0,0,0,444,441,1,0,0,0,444,442,1,0,0,0,444,443,
        1,0,0,0,445,448,1,0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,47,1,
        0,0,0,448,446,1,0,0,0,449,450,5,32,0,0,450,451,3,188,94,0,451,453,
        3,58,29,0,452,454,5,110,0,0,453,452,1,0,0,0,453,454,1,0,0,0,454,
        455,1,0,0,0,455,456,5,2,0,0,456,49,1,0,0,0,457,458,3,188,94,0,458,
        51,1,0,0,0,459,460,5,33,0,0,460,461,3,188,94,0,461,463,5,15,0,0,
        462,464,3,50,25,0,463,462,1,0,0,0,463,464,1,0,0,0,464,469,1,0,0,
        0,465,466,5,16,0,0,466,468,3,50,25,0,467,465,1,0,0,0,468,471,1,0,
        0,0,469,467,1,0,0,0,469,470,1,0,0,0,470,472,1,0,0,0,471,469,1,0,
        0,0,472,473,5,17,0,0,473,53,1,0,0,0,474,483,5,23,0,0,475,480,3,56,
        28,0,476,477,5,16,0,0,477,479,3,56,28,0,478,476,1,0,0,0,479,482,
        1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,484,1,0,0,0,482,480,
        1,0,0,0,483,475,1,0,0,0,483,484,1,0,0,0,484,485,1,0,0,0,485,486,
        5,24,0,0,486,55,1,0,0,0,487,489,3,68,34,0,488,490,3,78,39,0,489,
        488,1,0,0,0,489,490,1,0,0,0,490,492,1,0,0,0,491,493,3,188,94,0,492,
        491,1,0,0,0,492,493,1,0,0,0,493,57,1,0,0,0,494,503,5,23,0,0,495,
        500,3,60,30,0,496,497,5,16,0,0,497,499,3,60,30,0,498,496,1,0,0,0,
        499,502,1,0,0,0,500,498,1,0,0,0,500,501,1,0,0,0,501,504,1,0,0,0,
        502,500,1,0,0,0,503,495,1,0,0,0,503,504,1,0,0,0,504,505,1,0,0,0,
        505,506,5,24,0,0,506,59,1,0,0,0,507,509,3,68,34,0,508,510,5,117,
        0,0,509,508,1,0,0,0,509,510,1,0,0,0,510,512,1,0,0,0,511,513,3,188,
        94,0,512,511,1,0,0,0,512,513,1,0,0,0,513,61,1,0,0,0,514,523,5,23,
        0,0,515,520,3,64,32,0,516,517,5,16,0,0,517,519,3,64,32,0,518,516,
        1,0,0,0,519,522,1,0,0,0,520,518,1,0,0,0,520,521,1,0,0,0,521,524,
        1,0,0,0,522,520,1,0,0,0,523,515,1,0,0,0,523,524,1,0,0,0,524,525,
        1,0,0,0,525,526,5,24,0,0,526,63,1,0,0,0,527,529,3,68,34,0,528,530,
        3,78,39,0,529,528,1,0,0,0,529,530,1,0,0,0,530,65,1,0,0,0,531,533,
        3,68,34,0,532,534,3,78,39,0,533,532,1,0,0,0,533,534,1,0,0,0,534,
        535,1,0,0,0,535,536,3,188,94,0,536,67,1,0,0,0,537,538,6,34,-1,0,
        538,545,3,126,63,0,539,545,3,70,35,0,540,545,3,74,37,0,541,545,3,
        76,38,0,542,543,5,36,0,0,543,545,5,119,0,0,544,537,1,0,0,0,544,539,
        1,0,0,0,544,540,1,0,0,0,544,541,1,0,0,0,544,542,1,0,0,0,545,554,
        1,0,0,0,546,547,10,3,0,0,547,549,5,34,0,0,548,550,3,128,64,0,549,
        548,1,0,0,0,549,550,1,0,0,0,550,551,1,0,0,0,551,553,5,35,0,0,552,
        546,1,0,0,0,553,556,1,0,0,0,554,552,1,0,0,0,554,555,1,0,0,0,555,
        69,1,0,0,0,556,554,1,0,0,0,557,562,3,188,94,0,558,559,5,37,0,0,559,
        561,3,188,94,0,560,558,1,0,0,0,561,564,1,0,0,0,562,560,1,0,0,0,562,
        563,1,0,0,0,563,71,1,0,0,0,564,562,1,0,0,0,565,568,3,126,63,0,566,
        568,3,70,35,0,567,565,1,0,0,0,567,566,1,0,0,0,568,73,1,0,0,0,569,
        570,5,38,0,0,570,571,5,23,0,0,571,572,3,72,36,0,572,573,5,39,0,0,
        573,574,3,68,34,0,574,575,5,24,0,0,575,75,1,0,0,0,576,577,5,30,0,
        0,577,583,3,62,31,0,578,582,5,118,0,0,579,582,5,116,0,0,580,582,
        3,80,40,0,581,578,1,0,0,0,581,579,1,0,0,0,581,580,1,0,0,0,582,585,
        1,0,0,0,583,581,1,0,0,0,583,584,1,0,0,0,584,588,1,0,0,0,585,583,
        1,0,0,0,586,587,5,31,0,0,587,589,3,62,31,0,588,586,1,0,0,0,588,589,
        1,0,0,0,589,77,1,0,0,0,590,591,7,2,0,0,591,79,1,0,0,0,592,593,7,
        3,0,0,593,81,1,0,0,0,594,598,5,15,0,0,595,597,3,84,42,0,596,595,
        1,0,0,0,597,600,1,0,0,0,598,596,1,0,0,0,598,599,1,0,0,0,599,601,
        1,0,0,0,600,598,1,0,0,0,601,602,5,17,0,0,602,83,1,0,0,0,603,620,
        3,88,44,0,604,620,3,90,45,0,605,620,3,94,47,0,606,620,3,102,51,0,
        607,620,3,82,41,0,608,620,3,100,50,0,609,620,3,104,52,0,610,620,
        3,106,53,0,611,620,3,108,54,0,612,620,3,110,55,0,613,620,3,112,56,
        0,614,620,3,114,57,0,615,620,3,116,58,0,616,620,3,96,48,0,617,620,
        3,98,49,0,618,620,3,118,59,0,619,603,1,0,0,0,619,604,1,0,0,0,619,
        605,1,0,0,0,619,606,1,0,0,0,619,607,1,0,0,0,619,608,1,0,0,0,619,
        609,1,0,0,0,619,610,1,0,0,0,619,611,1,0,0,0,619,612,1,0,0,0,619,
        613,1,0,0,0,619,614,1,0,0,0,619,615,1,0,0,0,619,616,1,0,0,0,619,
        617,1,0,0,0,619,618,1,0,0,0,620,85,1,0,0,0,621,622,3,128,64,0,622,
        623,5,2,0,0,623,87,1,0,0,0,624,625,5,43,0,0,625,626,5,23,0,0,626,
        627,3,128,64,0,627,628,5,24,0,0,628,631,3,84,42,0,629,630,5,44,0,
        0,630,632,3,84,42,0,631,629,1,0,0,0,631,632,1,0,0,0,632,89,1,0,0,
        0,633,634,5,45,0,0,634,636,3,128,64,0,635,637,3,44,22,0,636,635,
        1,0,0,0,636,637,1,0,0,0,637,638,1,0,0,0,638,640,3,82,41,0,639,641,
        3,92,46,0,640,639,1,0,0,0,641,642,1,0,0,0,642,640,1,0,0,0,642,643,
        1,0,0,0,643,91,1,0,0,0,644,649,5,46,0,0,645,647,3,188,94,0,646,645,
        1,0,0,0,646,647,1,0,0,0,647,648,1,0,0,0,648,650,3,54,27,0,649,646,
        1,0,0,0,649,650,1,0,0,0,650,651,1,0,0,0,651,652,3,82,41,0,652,93,
        1,0,0,0,653,654,5,47,0,0,654,655,5,23,0,0,655,656,3,128,64,0,656,
        657,5,24,0,0,657,658,3,84,42,0,658,95,1,0,0,0,659,662,3,120,60,0,
        660,662,3,86,43,0,661,659,1,0,0,0,661,660,1,0,0,0,662,97,1,0,0,0,
        663,664,5,48,0,0,664,665,3,82,41,0,665,99,1,0,0,0,666,668,5,49,0,
        0,667,669,5,2,0,0,668,667,1,0,0,0,668,669,1,0,0,0,669,101,1,0,0,
        0,670,671,5,27,0,0,671,674,5,23,0,0,672,675,3,96,48,0,673,675,5,
        2,0,0,674,672,1,0,0,0,674,673,1,0,0,0,675,678,1,0,0,0,676,679,3,
        86,43,0,677,679,5,2,0,0,678,676,1,0,0,0,678,677,1,0,0,0,679,681,
        1,0,0,0,680,682,3,128,64,0,681,680,1,0,0,0,681,682,1,0,0,0,682,683,
        1,0,0,0,683,684,5,24,0,0,684,685,3,84,42,0,685,103,1,0,0,0,686,688,
        5,50,0,0,687,689,5,130,0,0,688,687,1,0,0,0,688,689,1,0,0,0,689,690,
        1,0,0,0,690,691,3,144,72,0,691,105,1,0,0,0,692,693,5,51,0,0,693,
        694,3,84,42,0,694,695,5,47,0,0,695,696,5,23,0,0,696,697,3,128,64,
        0,697,698,5,24,0,0,698,699,5,2,0,0,699,107,1,0,0,0,700,701,5,114,
        0,0,701,702,5,2,0,0,702,109,1,0,0,0,703,704,5,111,0,0,704,705,5,
        2,0,0,705,111,1,0,0,0,706,708,5,52,0,0,707,709,3,128,64,0,708,707,
        1,0,0,0,708,709,1,0,0,0,709,710,1,0,0,0,710,711,5,2,0,0,711,113,
        1,0,0,0,712,713,5,53,0,0,713,714,5,2,0,0,714,115,1,0,0,0,715,716,
        5,54,0,0,716,717,3,142,71,0,717,718,5,2,0,0,718,117,1,0,0,0,719,
        720,5,55,0,0,720,721,3,142,71,0,721,722,5,2,0,0,722,119,1,0,0,0,
        723,724,5,56,0,0,724,731,3,124,62,0,725,731,3,66,33,0,726,727,5,
        23,0,0,727,728,3,122,61,0,728,729,5,24,0,0,729,731,1,0,0,0,730,723,
        1,0,0,0,730,725,1,0,0,0,730,726,1,0,0,0,731,734,1,0,0,0,732,733,
        5,10,0,0,733,735,3,128,64,0,734,732,1,0,0,0,734,735,1,0,0,0,735,
        736,1,0,0,0,736,737,5,2,0,0,737,121,1,0,0,0,738,740,3,66,33,0,739,
        738,1,0,0,0,739,740,1,0,0,0,740,747,1,0,0,0,741,743,5,16,0,0,742,
        744,3,66,33,0,743,742,1,0,0,0,743,744,1,0,0,0,744,746,1,0,0,0,745,
        741,1,0,0,0,746,749,1,0,0,0,747,745,1,0,0,0,747,748,1,0,0,0,748,
        123,1,0,0,0,749,747,1,0,0,0,750,757,5,23,0,0,751,753,3,188,94,0,
        752,751,1,0,0,0,752,753,1,0,0,0,753,754,1,0,0,0,754,756,5,16,0,0,
        755,752,1,0,0,0,756,759,1,0,0,0,757,755,1,0,0,0,757,758,1,0,0,0,
        758,761,1,0,0,0,759,757,1,0,0,0,760,762,3,188,94,0,761,760,1,0,0,
        0,761,762,1,0,0,0,762,763,1,0,0,0,763,764,5,24,0,0,764,125,1,0,0,
        0,765,766,7,4,0,0,766,127,1,0,0,0,767,768,6,64,-1,0,768,769,5,62,
        0,0,769,796,3,68,34,0,770,771,5,119,0,0,771,772,5,23,0,0,772,773,
        3,128,64,0,773,774,5,24,0,0,774,796,1,0,0,0,775,776,3,126,63,0,776,
        777,5,23,0,0,777,778,3,128,64,0,778,779,5,24,0,0,779,796,1,0,0,0,
        780,781,5,23,0,0,781,782,3,128,64,0,782,783,5,24,0,0,783,796,1,0,
        0,0,784,785,7,5,0,0,785,796,3,128,64,19,786,787,7,6,0,0,787,796,
        3,128,64,18,788,789,7,7,0,0,789,796,3,128,64,17,790,791,5,68,0,0,
        791,796,3,128,64,16,792,793,5,5,0,0,793,796,3,128,64,15,794,796,
        3,130,65,0,795,767,1,0,0,0,795,770,1,0,0,0,795,775,1,0,0,0,795,780,
        1,0,0,0,795,784,1,0,0,0,795,786,1,0,0,0,795,788,1,0,0,0,795,790,
        1,0,0,0,795,792,1,0,0,0,795,794,1,0,0,0,796,875,1,0,0,0,797,798,
        10,14,0,0,798,799,5,69,0,0,799,874,3,128,64,15,800,801,10,13,0,0,
        801,802,7,8,0,0,802,874,3,128,64,14,803,804,10,12,0,0,804,805,7,
        6,0,0,805,874,3,128,64,13,806,807,10,11,0,0,807,808,7,9,0,0,808,
        874,3,128,64,12,809,810,10,10,0,0,810,811,5,74,0,0,811,874,3,128,
        64,11,812,813,10,9,0,0,813,814,5,4,0,0,814,874,3,128,64,10,815,816,
        10,8,0,0,816,817,5,75,0,0,817,874,3,128,64,9,818,819,10,7,0,0,819,
        820,7,10,0,0,820,874,3,128,64,8,821,822,10,6,0,0,822,823,7,11,0,
        0,823,874,3,128,64,7,824,825,10,5,0,0,825,826,5,78,0,0,826,874,3,
        128,64,6,827,828,10,4,0,0,828,829,5,3,0,0,829,874,3,128,64,5,830,
        831,10,3,0,0,831,832,5,79,0,0,832,833,3,128,64,0,833,834,5,63,0,
        0,834,835,3,128,64,4,835,874,1,0,0,0,836,837,10,2,0,0,837,838,7,
        12,0,0,838,874,3,128,64,3,839,840,10,29,0,0,840,874,7,5,0,0,841,
        842,10,27,0,0,842,844,5,34,0,0,843,845,3,128,64,0,844,843,1,0,0,
        0,844,845,1,0,0,0,845,846,1,0,0,0,846,874,5,35,0,0,847,848,10,26,
        0,0,848,850,5,34,0,0,849,851,3,128,64,0,850,849,1,0,0,0,850,851,
        1,0,0,0,851,852,1,0,0,0,852,854,5,63,0,0,853,855,3,128,64,0,854,
        853,1,0,0,0,854,855,1,0,0,0,855,856,1,0,0,0,856,874,5,35,0,0,857,
        858,10,25,0,0,858,859,5,37,0,0,859,874,3,188,94,0,860,861,10,22,
        0,0,861,862,5,15,0,0,862,863,3,134,67,0,863,864,5,17,0,0,864,874,
        1,0,0,0,865,867,10,21,0,0,866,868,3,138,69,0,867,866,1,0,0,0,867,
        868,1,0,0,0,868,869,1,0,0,0,869,870,5,23,0,0,870,871,3,140,70,0,
        871,872,5,24,0,0,872,874,1,0,0,0,873,797,1,0,0,0,873,800,1,0,0,0,
        873,803,1,0,0,0,873,806,1,0,0,0,873,809,1,0,0,0,873,812,1,0,0,0,
        873,815,1,0,0,0,873,818,1,0,0,0,873,821,1,0,0,0,873,824,1,0,0,0,
        873,827,1,0,0,0,873,830,1,0,0,0,873,836,1,0,0,0,873,839,1,0,0,0,
        873,841,1,0,0,0,873,847,1,0,0,0,873,857,1,0,0,0,873,860,1,0,0,0,
        873,865,1,0,0,0,874,877,1,0,0,0,875,873,1,0,0,0,875,876,1,0,0,0,
        876,129,1,0,0,0,877,875,1,0,0,0,878,896,5,124,0,0,879,896,5,119,
        0,0,880,896,5,104,0,0,881,896,3,186,93,0,882,896,3,190,95,0,883,
        896,3,182,91,0,884,887,3,184,92,0,885,886,5,34,0,0,886,888,5,35,
        0,0,887,885,1,0,0,0,887,888,1,0,0,0,888,896,1,0,0,0,889,892,3,188,
        94,0,890,891,5,34,0,0,891,893,5,35,0,0,892,890,1,0,0,0,892,893,1,
        0,0,0,893,896,1,0,0,0,894,896,3,198,99,0,895,878,1,0,0,0,895,879,
        1,0,0,0,895,880,1,0,0,0,895,881,1,0,0,0,895,882,1,0,0,0,895,883,
        1,0,0,0,895,884,1,0,0,0,895,889,1,0,0,0,895,894,1,0,0,0,896,131,
        1,0,0,0,897,902,3,128,64,0,898,899,5,16,0,0,899,901,3,128,64,0,900,
        898,1,0,0,0,901,904,1,0,0,0,902,900,1,0,0,0,902,903,1,0,0,0,903,
        133,1,0,0,0,904,902,1,0,0,0,905,910,3,136,68,0,906,907,5,16,0,0,
        907,909,3,136,68,0,908,906,1,0,0,0,909,912,1,0,0,0,910,908,1,0,0,
        0,910,911,1,0,0,0,911,914,1,0,0,0,912,910,1,0,0,0,913,915,5,16,0,
        0,914,913,1,0,0,0,914,915,1,0,0,0,915,135,1,0,0,0,916,917,3,188,
        94,0,917,918,5,63,0,0,918,919,3,128,64,0,919,137,1,0,0,0,920,922,
        5,15,0,0,921,923,3,134,67,0,922,921,1,0,0,0,922,923,1,0,0,0,923,
        924,1,0,0,0,924,925,5,17,0,0,925,139,1,0,0,0,926,928,5,15,0,0,927,
        929,3,134,67,0,928,927,1,0,0,0,928,929,1,0,0,0,929,930,1,0,0,0,930,
        935,5,17,0,0,931,933,3,132,66,0,932,931,1,0,0,0,932,933,1,0,0,0,
        933,935,1,0,0,0,934,926,1,0,0,0,934,932,1,0,0,0,935,141,1,0,0,0,
        936,937,3,128,64,0,937,938,5,23,0,0,938,939,3,140,70,0,939,940,5,
        24,0,0,940,143,1,0,0,0,941,945,5,15,0,0,942,944,3,146,73,0,943,942,
        1,0,0,0,944,947,1,0,0,0,945,943,1,0,0,0,945,946,1,0,0,0,946,948,
        1,0,0,0,947,945,1,0,0,0,948,949,5,17,0,0,949,145,1,0,0,0,950,969,
        3,188,94,0,951,969,3,144,72,0,952,969,3,148,74,0,953,969,3,154,77,
        0,954,969,3,156,78,0,955,969,3,162,81,0,956,969,3,164,82,0,957,969,
        3,166,83,0,958,969,3,170,85,0,959,969,3,174,87,0,960,969,3,176,88,
        0,961,969,5,111,0,0,962,969,5,114,0,0,963,969,5,115,0,0,964,969,
        3,180,90,0,965,969,3,186,93,0,966,969,3,198,99,0,967,969,3,190,95,
        0,968,950,1,0,0,0,968,951,1,0,0,0,968,952,1,0,0,0,968,953,1,0,0,
        0,968,954,1,0,0,0,968,955,1,0,0,0,968,956,1,0,0,0,968,957,1,0,0,
        0,968,958,1,0,0,0,968,959,1,0,0,0,968,960,1,0,0,0,968,961,1,0,0,
        0,968,962,1,0,0,0,968,963,1,0,0,0,968,964,1,0,0,0,968,965,1,0,0,
        0,968,966,1,0,0,0,968,967,1,0,0,0,969,147,1,0,0,0,970,974,3,152,
        76,0,971,974,3,178,89,0,972,974,3,150,75,0,973,970,1,0,0,0,973,971,
        1,0,0,0,973,972,1,0,0,0,974,149,1,0,0,0,975,976,3,188,94,0,976,977,
        5,37,0,0,977,978,3,188,94,0,978,151,1,0,0,0,979,984,5,52,0,0,980,
        984,5,36,0,0,981,984,5,59,0,0,982,984,3,188,94,0,983,979,1,0,0,0,
        983,980,1,0,0,0,983,981,1,0,0,0,983,982,1,0,0,0,984,997,1,0,0,0,
        985,987,5,23,0,0,986,988,3,148,74,0,987,986,1,0,0,0,987,988,1,0,
        0,0,988,993,1,0,0,0,989,990,5,16,0,0,990,992,3,148,74,0,991,989,
        1,0,0,0,992,995,1,0,0,0,993,991,1,0,0,0,993,994,1,0,0,0,994,996,
        1,0,0,0,995,993,1,0,0,0,996,998,5,24,0,0,997,985,1,0,0,0,997,998,
        1,0,0,0,998,153,1,0,0,0,999,1000,5,90,0,0,1000,1003,3,158,79,0,1001,
        1002,5,91,0,0,1002,1004,3,148,74,0,1003,1001,1,0,0,0,1003,1004,1,
        0,0,0,1004,155,1,0,0,0,1005,1006,3,158,79,0,1006,1007,5,91,0,0,1007,
        1008,3,148,74,0,1008,157,1,0,0,0,1009,1016,3,188,94,0,1010,1016,
        3,150,75,0,1011,1012,5,23,0,0,1012,1013,3,160,80,0,1013,1014,5,24,
        0,0,1014,1016,1,0,0,0,1015,1009,1,0,0,0,1015,1010,1,0,0,0,1015,1011,
        1,0,0,0,1016,159,1,0,0,0,1017,1022,3,188,94,0,1018,1019,5,16,0,0,
        1019,1021,3,188,94,0,1020,1018,1,0,0,0,1021,1024,1,0,0,0,1022,1020,
        1,0,0,0,1022,1023,1,0,0,0,1023,161,1,0,0,0,1024,1022,1,0,0,0,1025,
        1026,5,92,0,0,1026,1027,3,188,94,0,1027,163,1,0,0,0,1028,1029,3,
        188,94,0,1029,1030,5,63,0,0,1030,165,1,0,0,0,1031,1032,5,93,0,0,
        1032,1036,3,148,74,0,1033,1035,3,168,84,0,1034,1033,1,0,0,0,1035,
        1038,1,0,0,0,1036,1034,1,0,0,0,1036,1037,1,0,0,0,1037,167,1,0,0,
        0,1038,1036,1,0,0,0,1039,1040,5,94,0,0,1040,1041,3,178,89,0,1041,
        1042,3,144,72,0,1042,1046,1,0,0,0,1043,1044,5,95,0,0,1044,1046,3,
        144,72,0,1045,1039,1,0,0,0,1045,1043,1,0,0,0,1046,169,1,0,0,0,1047,
        1048,5,30,0,0,1048,1049,3,188,94,0,1049,1051,5,23,0,0,1050,1052,
        3,160,80,0,1051,1050,1,0,0,0,1051,1052,1,0,0,0,1052,1053,1,0,0,0,
        1053,1055,5,24,0,0,1054,1056,3,172,86,0,1055,1054,1,0,0,0,1055,1056,
        1,0,0,0,1056,1057,1,0,0,0,1057,1058,3,144,72,0,1058,171,1,0,0,0,
        1059,1060,5,96,0,0,1060,1061,3,160,80,0,1061,173,1,0,0,0,1062,1065,
        5,27,0,0,1063,1066,3,144,72,0,1064,1066,3,148,74,0,1065,1063,1,0,
        0,0,1065,1064,1,0,0,0,1066,1067,1,0,0,0,1067,1070,3,148,74,0,1068,
        1071,3,144,72,0,1069,1071,3,148,74,0,1070,1068,1,0,0,0,1070,1069,
        1,0,0,0,1071,1072,1,0,0,0,1072,1073,3,144,72,0,1073,175,1,0,0,0,
        1074,1075,5,43,0,0,1075,1076,3,148,74,0,1076,1077,3,144,72,0,1077,
        177,1,0,0,0,1078,1083,3,198,99,0,1079,1083,5,105,0,0,1080,1083,5,
        106,0,0,1081,1083,3,190,95,0,1082,1078,1,0,0,0,1082,1079,1,0,0,0,
        1082,1080,1,0,0,0,1082,1081,1,0,0,0,1083,179,1,0,0,0,1084,1085,5,
        50,0,0,1085,1086,3,188,94,0,1086,1087,3,144,72,0,1087,181,1,0,0,
        0,1088,1101,5,23,0,0,1089,1091,3,128,64,0,1090,1089,1,0,0,0,1090,
        1091,1,0,0,0,1091,1098,1,0,0,0,1092,1094,5,16,0,0,1093,1095,3,128,
        64,0,1094,1093,1,0,0,0,1094,1095,1,0,0,0,1095,1097,1,0,0,0,1096,
        1092,1,0,0,0,1097,1100,1,0,0,0,1098,1096,1,0,0,0,1098,1099,1,0,0,
        0,1099,1102,1,0,0,0,1100,1098,1,0,0,0,1101,1090,1,0,0,0,1101,1102,
        1,0,0,0,1102,1103,1,0,0,0,1103,1117,5,24,0,0,1104,1113,5,34,0,0,
        1105,1110,3,128,64,0,1106,1107,5,16,0,0,1107,1109,3,128,64,0,1108,
        1106,1,0,0,0,1109,1112,1,0,0,0,1110,1108,1,0,0,0,1110,1111,1,0,0,
        0,1111,1114,1,0,0,0,1112,1110,1,0,0,0,1113,1105,1,0,0,0,1113,1114,
        1,0,0,0,1114,1115,1,0,0,0,1115,1117,5,35,0,0,1116,1088,1,0,0,0,1116,
        1104,1,0,0,0,1117,183,1,0,0,0,1118,1121,3,126,63,0,1119,1121,3,70,
        35,0,1120,1118,1,0,0,0,1120,1119,1,0,0,0,1121,185,1,0,0,0,1122,1124,
        7,13,0,0,1123,1125,5,107,0,0,1124,1123,1,0,0,0,1124,1125,1,0,0,0,
        1125,187,1,0,0,0,1126,1135,3,194,97,0,1127,1135,5,14,0,0,1128,1135,
        5,42,0,0,1129,1135,5,128,0,0,1130,1135,5,97,0,0,1131,1135,5,55,0,
        0,1132,1135,5,25,0,0,1133,1135,5,129,0,0,1134,1126,1,0,0,0,1134,
        1127,1,0,0,0,1134,1128,1,0,0,0,1134,1129,1,0,0,0,1134,1130,1,0,0,
        0,1134,1131,1,0,0,0,1134,1132,1,0,0,0,1134,1133,1,0,0,0,1135,189,
        1,0,0,0,1136,1138,5,108,0,0,1137,1136,1,0,0,0,1138,1139,1,0,0,0,
        1139,1137,1,0,0,0,1139,1140,1,0,0,0,1140,191,1,0,0,0,1141,1142,7,
        14,0,0,1142,193,1,0,0,0,1143,1160,5,110,0,0,1144,1160,5,111,0,0,
        1145,1160,5,112,0,0,1146,1160,5,113,0,0,1147,1160,5,114,0,0,1148,
        1160,5,115,0,0,1149,1160,5,117,0,0,1150,1160,3,192,96,0,1151,1160,
        5,119,0,0,1152,1160,5,122,0,0,1153,1160,5,123,0,0,1154,1160,5,124,
        0,0,1155,1160,5,125,0,0,1156,1160,5,126,0,0,1157,1160,5,127,0,0,
        1158,1160,5,128,0,0,1159,1143,1,0,0,0,1159,1144,1,0,0,0,1159,1145,
        1,0,0,0,1159,1146,1,0,0,0,1159,1147,1,0,0,0,1159,1148,1,0,0,0,1159,
        1149,1,0,0,0,1159,1150,1,0,0,0,1159,1151,1,0,0,0,1159,1152,1,0,0,
        0,1159,1153,1,0,0,0,1159,1154,1,0,0,0,1159,1155,1,0,0,0,1159,1156,
        1,0,0,0,1159,1157,1,0,0,0,1159,1158,1,0,0,0,1160,195,1,0,0,0,1161,
        1173,5,98,0,0,1162,1163,5,23,0,0,1163,1168,3,70,35,0,1164,1165,5,
        16,0,0,1165,1167,3,70,35,0,1166,1164,1,0,0,0,1167,1170,1,0,0,0,1168,
        1166,1,0,0,0,1168,1169,1,0,0,0,1169,1171,1,0,0,0,1170,1168,1,0,0,
        0,1171,1172,5,24,0,0,1172,1174,1,0,0,0,1173,1162,1,0,0,0,1173,1174,
        1,0,0,0,1174,197,1,0,0,0,1175,1177,5,130,0,0,1176,1175,1,0,0,0,1177,
        1178,1,0,0,0,1178,1176,1,0,0,0,1178,1179,1,0,0,0,1179,199,1,0,0,
        0,133,208,210,224,228,233,239,243,246,251,257,264,268,281,289,294,
        304,307,313,321,324,334,343,345,351,372,386,389,396,400,402,407,
        412,415,421,425,429,434,444,446,453,463,469,480,483,489,492,500,
        503,509,512,520,523,529,533,544,549,554,562,567,581,583,588,598,
        619,631,636,642,646,649,661,668,674,678,681,688,708,730,734,739,
        743,747,752,757,761,795,844,850,854,867,873,875,887,892,895,902,
        910,914,922,928,932,934,945,968,973,983,987,993,997,1003,1015,1022,
        1036,1045,1051,1055,1065,1070,1082,1090,1094,1098,1101,1110,1113,
        1116,1120,1124,1134,1139,1159,1168,1173,1178
    ]

class SolidityParser ( Parser ):

    grammarFileName = "Solidity.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'pragma'", "';'", "'||'", "'^'", "'~'", 
                     "'>='", "'>'", "'<'", "'<='", "'='", "'as'", "'import'", 
                     "'*'", "'from'", "'{'", "','", "'}'", "'abstract'", 
                     "'contract'", "'interface'", "'library'", "'is'", "'('", 
                     "')'", "'error'", "'using'", "'for'", "'struct'", "'modifier'", 
                     "'function'", "'returns'", "'event'", "'enum'", "'['", 
                     "']'", "'address'", "'.'", "'mapping'", "'=>'", "'memory'", 
                     "'storage'", "'calldata'", "'if'", "'else'", "'try'", 
                     "'catch'", "'while'", "'unchecked'", "'_'", "'assembly'", 
                     "'do'", "'return'", "'throw'", "'emit'", "'revert'", 
                     "'var'", "'bool'", "'string'", "'byte'", "'++'", "'--'", 
                     "'new'", "':'", "'+'", "'-'", "'after'", "'delete'", 
                     "'!'", "'**'", "'/'", "'%'", "'<<'", "'>>'", "'&'", 
                     "'|'", "'=='", "'!='", "'&&'", "'?'", "'|='", "'^='", 
                     "'&='", "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", 
                     "'%='", "'let'", "':='", "'=:'", "'switch'", "'case'", 
                     "'default'", "'->'", "'callback'", "'override'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'anonymous'", "'break'", 
                     "'constant'", "'immutable'", "'continue'", "'leave'", 
                     "'external'", "'indexed'", "'internal'", "'payable'", 
                     "'private'", "'public'", "'virtual'", "'pure'", "'type'", 
                     "'view'", "'constructor'", "'fallback'", "'receive'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "Int", "Uint", 
                      "Byte", "Fixed", "Ufixed", "BooleanLiteral", "DecimalNumber", 
                      "HexNumber", "NumberUnit", "HexLiteralFragment", "ReservedKeyword", 
                      "AnonymousKeyword", "BreakKeyword", "ConstantKeyword", 
                      "ImmutableKeyword", "ContinueKeyword", "LeaveKeyword", 
                      "ExternalKeyword", "IndexedKeyword", "InternalKeyword", 
                      "PayableKeyword", "PrivateKeyword", "PublicKeyword", 
                      "VirtualKeyword", "PureKeyword", "TypeKeyword", "ViewKeyword", 
                      "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", 
                      "Identifier", "StringLiteralFragment", "VersionLiteral", 
                      "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_pragmaName = 2
    RULE_pragmaValue = 3
    RULE_version = 4
    RULE_versionOperator = 5
    RULE_versionConstraint = 6
    RULE_importDeclaration = 7
    RULE_importDirective = 8
    RULE_importPath = 9
    RULE_contractDefinition = 10
    RULE_inheritanceSpecifier = 11
    RULE_contractPart = 12
    RULE_stateVariableDeclaration = 13
    RULE_fileLevelConstant = 14
    RULE_customErrorDefinition = 15
    RULE_usingForDeclaration = 16
    RULE_structDefinition = 17
    RULE_modifierDefinition = 18
    RULE_modifierInvocation = 19
    RULE_functionDefinition = 20
    RULE_functionDescriptor = 21
    RULE_returnParameters = 22
    RULE_modifierList = 23
    RULE_eventDefinition = 24
    RULE_enumValue = 25
    RULE_enumDefinition = 26
    RULE_parameterList = 27
    RULE_parameter = 28
    RULE_eventParameterList = 29
    RULE_eventParameter = 30
    RULE_functionTypeParameterList = 31
    RULE_functionTypeParameter = 32
    RULE_variableDeclaration = 33
    RULE_typeName = 34
    RULE_userDefinedTypeName = 35
    RULE_mappingKey = 36
    RULE_mapping = 37
    RULE_functionTypeName = 38
    RULE_storageLocation = 39
    RULE_stateMutability = 40
    RULE_block = 41
    RULE_statement = 42
    RULE_expressionStatement = 43
    RULE_ifStatement = 44
    RULE_tryStatement = 45
    RULE_catchClause = 46
    RULE_whileStatement = 47
    RULE_simpleStatement = 48
    RULE_uncheckedStatement = 49
    RULE_placeholderStatement = 50
    RULE_forStatement = 51
    RULE_inlineAssemblyStatement = 52
    RULE_doWhileStatement = 53
    RULE_continueStatement = 54
    RULE_breakStatement = 55
    RULE_returnStatement = 56
    RULE_throwStatement = 57
    RULE_emitStatement = 58
    RULE_revertStatement = 59
    RULE_variableDeclarationStatement = 60
    RULE_variableDeclarationList = 61
    RULE_identifierList = 62
    RULE_elementaryTypeName = 63
    RULE_expression = 64
    RULE_primaryExpression = 65
    RULE_expressionList = 66
    RULE_nameValueList = 67
    RULE_nameValue = 68
    RULE_functionCallOptions = 69
    RULE_functionCallArguments = 70
    RULE_functionCall = 71
    RULE_assemblyBlock = 72
    RULE_assemblyItem = 73
    RULE_assemblyExpression = 74
    RULE_assemblyMember = 75
    RULE_assemblyCall = 76
    RULE_assemblyLocalDefinition = 77
    RULE_assemblyAssignment = 78
    RULE_assemblyIdentifierOrList = 79
    RULE_assemblyIdentifierList = 80
    RULE_assemblyStackAssignment = 81
    RULE_labelDefinition = 82
    RULE_assemblySwitch = 83
    RULE_assemblyCase = 84
    RULE_assemblyFunctionDefinition = 85
    RULE_assemblyFunctionReturns = 86
    RULE_assemblyFor = 87
    RULE_assemblyIf = 88
    RULE_assemblyLiteral = 89
    RULE_subAssembly = 90
    RULE_tupleExpression = 91
    RULE_typeNameExpression = 92
    RULE_numberLiteral = 93
    RULE_identifier = 94
    RULE_hexLiteral = 95
    RULE_visibilityKeyword = 96
    RULE_allKeywords = 97
    RULE_overrideSpecifier = 98
    RULE_stringLiteral = 99

    ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionOperator", "versionConstraint", "importDeclaration", 
                   "importDirective", "importPath", "contractDefinition", 
                   "inheritanceSpecifier", "contractPart", "stateVariableDeclaration", 
                   "fileLevelConstant", "customErrorDefinition", "usingForDeclaration", 
                   "structDefinition", "modifierDefinition", "modifierInvocation", 
                   "functionDefinition", "functionDescriptor", "returnParameters", 
                   "modifierList", "eventDefinition", "enumValue", "enumDefinition", 
                   "parameterList", "parameter", "eventParameterList", "eventParameter", 
                   "functionTypeParameterList", "functionTypeParameter", 
                   "variableDeclaration", "typeName", "userDefinedTypeName", 
                   "mappingKey", "mapping", "functionTypeName", "storageLocation", 
                   "stateMutability", "block", "statement", "expressionStatement", 
                   "ifStatement", "tryStatement", "catchClause", "whileStatement", 
                   "simpleStatement", "uncheckedStatement", "placeholderStatement", 
                   "forStatement", "inlineAssemblyStatement", "doWhileStatement", 
                   "continueStatement", "breakStatement", "returnStatement", 
                   "throwStatement", "emitStatement", "revertStatement", 
                   "variableDeclarationStatement", "variableDeclarationList", 
                   "identifierList", "elementaryTypeName", "expression", 
                   "primaryExpression", "expressionList", "nameValueList", 
                   "nameValue", "functionCallOptions", "functionCallArguments", 
                   "functionCall", "assemblyBlock", "assemblyItem", "assemblyExpression", 
                   "assemblyMember", "assemblyCall", "assemblyLocalDefinition", 
                   "assemblyAssignment", "assemblyIdentifierOrList", "assemblyIdentifierList", 
                   "assemblyStackAssignment", "labelDefinition", "assemblySwitch", 
                   "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
                   "assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", 
                   "tupleExpression", "typeNameExpression", "numberLiteral", 
                   "identifier", "hexLiteral", "visibilityKeyword", "allKeywords", 
                   "overrideSpecifier", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    Int=99
    Uint=100
    Byte=101
    Fixed=102
    Ufixed=103
    BooleanLiteral=104
    DecimalNumber=105
    HexNumber=106
    NumberUnit=107
    HexLiteralFragment=108
    ReservedKeyword=109
    AnonymousKeyword=110
    BreakKeyword=111
    ConstantKeyword=112
    ImmutableKeyword=113
    ContinueKeyword=114
    LeaveKeyword=115
    ExternalKeyword=116
    IndexedKeyword=117
    InternalKeyword=118
    PayableKeyword=119
    PrivateKeyword=120
    PublicKeyword=121
    VirtualKeyword=122
    PureKeyword=123
    TypeKeyword=124
    ViewKeyword=125
    ConstructorKeyword=126
    FallbackKeyword=127
    ReceiveKeyword=128
    Identifier=129
    StringLiteralFragment=130
    VersionLiteral=131
    WS=132
    COMMENT=133
    LINE_COMMENT=134

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDirectiveContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractDefinitionContext,i)


        def enumDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,i)


        def structDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,i)


        def functionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,i)


        def fileLevelConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FileLevelConstantContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FileLevelConstantContext,i)


        def customErrorDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CustomErrorDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CustomErrorDefinitionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceUnit" ):
                return visitor.visitSourceUnit(self)
            else:
                return visitor.visitChildren(self)




    def sourceUnit(self):

        localctx = SolidityParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1116897459201396738) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926525) != 0):
                self.state = 208
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 200
                    self.pragmaDirective()
                    pass

                elif la_ == 2:
                    self.state = 201
                    self.importDirective()
                    pass

                elif la_ == 3:
                    self.state = 202
                    self.contractDefinition()
                    pass

                elif la_ == 4:
                    self.state = 203
                    self.enumDefinition()
                    pass

                elif la_ == 5:
                    self.state = 204
                    self.structDefinition()
                    pass

                elif la_ == 6:
                    self.state = 205
                    self.functionDefinition()
                    pass

                elif la_ == 7:
                    self.state = 206
                    self.fileLevelConstant()
                    pass

                elif la_ == 8:
                    self.state = 207
                    self.customErrorDefinition()
                    pass


                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 213
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(SolidityParser.PragmaNameContext,0)


        def pragmaValue(self):
            return self.getTypedRuleContext(SolidityParser.PragmaValueContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaDirective" ):
                return visitor.visitPragmaDirective(self)
            else:
                return visitor.visitChildren(self)




    def pragmaDirective(self):

        localctx = SolidityParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self.match(SolidityParser.T__0)
            self.state = 216
            self.pragmaName()
            self.state = 217
            self.pragmaValue()
            self.state = 218
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaName" ):
                listener.enterPragmaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaName" ):
                listener.exitPragmaName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaName" ):
                return visitor.visitPragmaName(self)
            else:
                return visitor.visitChildren(self)




    def pragmaName(self):

        localctx = SolidityParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(SolidityParser.VersionContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaValue" ):
                return visitor.visitPragmaValue(self)
            else:
                return visitor.visitChildren(self)




    def pragmaValue(self):

        localctx = SolidityParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaValue)
        try:
            self.state = 224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 222
                self.version()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 223
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VersionConstraintContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersion" ):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)




    def version(self):

        localctx = SolidityParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.versionConstraint()
            self.state = 233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2040) != 0) or _la==105 or _la==131:
                self.state = 228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 227
                    self.match(SolidityParser.T__2)


                self.state = 230
                self.versionConstraint()
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionOperator" ):
                return visitor.visitVersionOperator(self)
            else:
                return visitor.visitChildren(self)




    def versionOperator(self):

        localctx = SolidityParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2032) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(SolidityParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(SolidityParser.VersionOperatorContext,0)


        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionConstraint" ):
                return visitor.visitVersionConstraint(self)
            else:
                return visitor.visitChildren(self)




    def versionConstraint(self):

        localctx = SolidityParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.state = 246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2032) != 0):
                    self.state = 238
                    self.versionOperator()


                self.state = 241
                self.match(SolidityParser.VersionLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2032) != 0):
                    self.state = 242
                    self.versionOperator()


                self.state = 245
                self.match(SolidityParser.DecimalNumber)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDeclaration" ):
                return visitor.visitImportDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def importDeclaration(self):

        localctx = SolidityParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.identifier()
            self.state = 251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 249
                self.match(SolidityParser.T__10)
                self.state = 250
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importPath(self):
            return self.getTypedRuleContext(SolidityParser.ImportPathContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDirective" ):
                return visitor.visitImportDirective(self)
            else:
                return visitor.visitChildren(self)




    def importDirective(self):

        localctx = SolidityParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 253
                self.match(SolidityParser.T__11)
                self.state = 254
                self.importPath()
                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 255
                    self.match(SolidityParser.T__10)
                    self.state = 256
                    self.identifier()


                self.state = 259
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 261
                self.match(SolidityParser.T__11)
                self.state = 264
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 262
                    self.match(SolidityParser.T__12)
                    pass
                elif token in [14, 25, 42, 55, 97, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129]:
                    self.state = 263
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 266
                    self.match(SolidityParser.T__10)
                    self.state = 267
                    self.identifier()


                self.state = 270
                self.match(SolidityParser.T__13)
                self.state = 271
                self.importPath()
                self.state = 272
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 274
                self.match(SolidityParser.T__11)
                self.state = 275
                self.match(SolidityParser.T__14)
                self.state = 276
                self.importDeclaration()
                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 277
                    self.match(SolidityParser.T__15)
                    self.state = 278
                    self.importDeclaration()
                    self.state = 283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 284
                self.match(SolidityParser.T__16)
                self.state = 285
                self.match(SolidityParser.T__13)
                self.state = 286
                self.importPath()
                self.state = 287
                self.match(SolidityParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self):
            return self.getToken(SolidityParser.StringLiteralFragment, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_importPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportPath" ):
                listener.enterImportPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportPath" ):
                listener.exitImportPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportPath" ):
                return visitor.visitImportPath(self)
            else:
                return visitor.visitChildren(self)




    def importPath(self):

        localctx = SolidityParser.ImportPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_importPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self.match(SolidityParser.StringLiteralFragment)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierContext,i)


        def contractPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractPartContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractDefinition" ):
                return visitor.visitContractDefinition(self)
            else:
                return visitor.visitChildren(self)




    def contractDefinition(self):

        localctx = SolidityParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 293
                self.match(SolidityParser.T__17)


            self.state = 296
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3670016) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 297
            self.identifier()
            self.state = 307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 298
                self.match(SolidityParser.T__21)
                self.state = 299
                self.inheritanceSpecifier()
                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 300
                    self.match(SolidityParser.T__15)
                    self.state = 301
                    self.inheritanceSpecifier()
                    self.state = 306
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 309
            self.match(SolidityParser.T__14)
            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1116897464096407552) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926525) != 0):
                self.state = 310
                self.contractPart()
                self.state = 315
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 316
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInheritanceSpecifier" ):
                return visitor.visitInheritanceSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def inheritanceSpecifier(self):

        localctx = SolidityParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.userDefinedTypeName()
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 319
                self.match(SolidityParser.T__22)
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -289356135933935103) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 17179864061) != 0):
                    self.state = 320
                    self.expressionList()


                self.state = 323
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.StateVariableDeclarationContext,0)


        def usingForDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.UsingForDeclarationContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ModifierDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,0)


        def customErrorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.CustomErrorDefinitionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractPart" ):
                listener.enterContractPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractPart" ):
                listener.exitContractPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractPart" ):
                return visitor.visitContractPart(self)
            else:
                return visitor.visitChildren(self)




    def contractPart(self):

        localctx = SolidityParser.ContractPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_contractPart)
        try:
            self.state = 334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 326
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 327
                self.usingForDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 328
                self.structDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 329
                self.modifierDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 330
                self.functionDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 331
                self.eventDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 332
                self.enumDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 333
                self.customErrorDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def ConstantKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ConstantKeyword)
            else:
                return self.getToken(SolidityParser.ConstantKeyword, i)

        def ImmutableKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ImmutableKeyword)
            else:
                return self.getToken(SolidityParser.ImmutableKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateVariableDeclaration" ):
                return visitor.visitStateVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def stateVariableDeclaration(self):

        localctx = SolidityParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.typeName(0)
            self.state = 345
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 343
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [121]:
                        self.state = 337
                        self.match(SolidityParser.PublicKeyword)
                        pass
                    elif token in [118]:
                        self.state = 338
                        self.match(SolidityParser.InternalKeyword)
                        pass
                    elif token in [120]:
                        self.state = 339
                        self.match(SolidityParser.PrivateKeyword)
                        pass
                    elif token in [112]:
                        self.state = 340
                        self.match(SolidityParser.ConstantKeyword)
                        pass
                    elif token in [113]:
                        self.state = 341
                        self.match(SolidityParser.ImmutableKeyword)
                        pass
                    elif token in [98]:
                        self.state = 342
                        self.overrideSpecifier()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 347
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

            self.state = 348
            self.identifier()
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 349
                self.match(SolidityParser.T__9)
                self.state = 350
                self.expression(0)


            self.state = 353
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileLevelConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_fileLevelConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileLevelConstant" ):
                listener.enterFileLevelConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileLevelConstant" ):
                listener.exitFileLevelConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileLevelConstant" ):
                return visitor.visitFileLevelConstant(self)
            else:
                return visitor.visitChildren(self)




    def fileLevelConstant(self):

        localctx = SolidityParser.FileLevelConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fileLevelConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.typeName(0)
            self.state = 356
            self.match(SolidityParser.ConstantKeyword)
            self.state = 357
            self.identifier()
            self.state = 358
            self.match(SolidityParser.T__9)
            self.state = 359
            self.expression(0)
            self.state = 360
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CustomErrorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_customErrorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCustomErrorDefinition" ):
                listener.enterCustomErrorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCustomErrorDefinition" ):
                listener.exitCustomErrorDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCustomErrorDefinition" ):
                return visitor.visitCustomErrorDefinition(self)
            else:
                return visitor.visitChildren(self)




    def customErrorDefinition(self):

        localctx = SolidityParser.CustomErrorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_customErrorDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(SolidityParser.T__24)
            self.state = 363
            self.identifier()
            self.state = 364
            self.parameterList()
            self.state = 365
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_usingForDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForDeclaration" ):
                listener.enterUsingForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForDeclaration" ):
                listener.exitUsingForDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingForDeclaration" ):
                return visitor.visitUsingForDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def usingForDeclaration(self):

        localctx = SolidityParser.UsingForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_usingForDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.match(SolidityParser.T__25)
            self.state = 368
            self.identifier()
            self.state = 369
            self.match(SolidityParser.T__26)
            self.state = 372
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 370
                self.match(SolidityParser.T__12)
                pass
            elif token in [14, 25, 30, 36, 38, 42, 55, 56, 57, 58, 59, 97, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129]:
                self.state = 371
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 374
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDefinition" ):
                return visitor.visitStructDefinition(self)
            else:
                return visitor.visitChildren(self)




    def structDefinition(self):

        localctx = SolidityParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.match(SolidityParser.T__27)
            self.state = 377
            self.identifier()
            self.state = 378
            self.match(SolidityParser.T__14)
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1116897450339090432) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926525) != 0):
                self.state = 379
                self.variableDeclaration()
                self.state = 380
                self.match(SolidityParser.T__1)
                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1116897450339090432) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926525) != 0):
                    self.state = 381
                    self.variableDeclaration()
                    self.state = 382
                    self.match(SolidityParser.T__1)
                    self.state = 388
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 391
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierDefinition" ):
                return visitor.visitModifierDefinition(self)
            else:
                return visitor.visitChildren(self)




    def modifierDefinition(self):

        localctx = SolidityParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.match(SolidityParser.T__28)
            self.state = 394
            self.identifier()
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 395
                self.parameterList()


            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==98 or _la==122:
                self.state = 400
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [122]:
                    self.state = 398
                    self.match(SolidityParser.VirtualKeyword)
                    pass
                elif token in [98]:
                    self.state = 399
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 407
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 405
                self.match(SolidityParser.T__1)
                pass
            elif token in [15]:
                self.state = 406
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierInvocation" ):
                return visitor.visitModifierInvocation(self)
            else:
                return visitor.visitChildren(self)




    def modifierInvocation(self):

        localctx = SolidityParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.identifier()
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 410
                self.match(SolidityParser.T__22)
                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -289356135933935103) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 17179864061) != 0):
                    self.state = 411
                    self.expressionList()


                self.state = 414
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDescriptor(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDescriptorContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(SolidityParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinition" ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = SolidityParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.functionDescriptor()
            self.state = 418
            self.parameterList()
            self.state = 419
            self.modifierList()
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 420
                self.returnParameters()


            self.state = 425
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 423
                self.match(SolidityParser.T__1)
                pass
            elif token in [15]:
                self.state = 424
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDescriptorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def ConstructorKeyword(self):
            return self.getToken(SolidityParser.ConstructorKeyword, 0)

        def FallbackKeyword(self):
            return self.getToken(SolidityParser.FallbackKeyword, 0)

        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_functionDescriptor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDescriptor" ):
                listener.enterFunctionDescriptor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDescriptor" ):
                listener.exitFunctionDescriptor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDescriptor" ):
                return visitor.visitFunctionDescriptor(self)
            else:
                return visitor.visitChildren(self)




    def functionDescriptor(self):

        localctx = SolidityParser.FunctionDescriptorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_functionDescriptor)
        self._la = 0 # Token type
        try:
            self.state = 434
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30]:
                self.enterOuterAlt(localctx, 1)
                self.state = 427
                self.match(SolidityParser.T__29)
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36033195099045888) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926401) != 0):
                    self.state = 428
                    self.identifier()


                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 2)
                self.state = 431
                self.match(SolidityParser.ConstructorKeyword)
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 3)
                self.state = 432
                self.match(SolidityParser.FallbackKeyword)
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 4)
                self.state = 433
                self.match(SolidityParser.ReceiveKeyword)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnParameters" ):
                listener.enterReturnParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnParameters" ):
                listener.exitReturnParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnParameters" ):
                return visitor.visitReturnParameters(self)
            else:
                return visitor.visitChildren(self)




    def returnParameters(self):

        localctx = SolidityParser.ReturnParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_returnParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(SolidityParser.T__30)
            self.state = 437
            self.parameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def visibilityKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VisibilityKeywordContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VisibilityKeywordContext,i)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierList" ):
                return visitor.visitModifierList(self)
            else:
                return visitor.visitChildren(self)




    def modifierList(self):

        localctx = SolidityParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_modifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 36033195099045888) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926403) != 0):
                self.state = 444
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 439
                    self.visibilityKeyword()
                    pass

                elif la_ == 2:
                    self.state = 440
                    self.match(SolidityParser.VirtualKeyword)
                    pass

                elif la_ == 3:
                    self.state = 441
                    self.stateMutability()
                    pass

                elif la_ == 4:
                    self.state = 442
                    self.modifierInvocation()
                    pass

                elif la_ == 5:
                    self.state = 443
                    self.overrideSpecifier()
                    pass


                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def eventParameterList(self):
            return self.getTypedRuleContext(SolidityParser.EventParameterListContext,0)


        def AnonymousKeyword(self):
            return self.getToken(SolidityParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventDefinition" ):
                return visitor.visitEventDefinition(self)
            else:
                return visitor.visitChildren(self)




    def eventDefinition(self):

        localctx = SolidityParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(SolidityParser.T__31)
            self.state = 450
            self.identifier()
            self.state = 451
            self.eventParameterList()
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 452
                self.match(SolidityParser.AnonymousKeyword)


            self.state = 455
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValue" ):
                listener.enterEnumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValue" ):
                listener.exitEnumValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = SolidityParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDefinition" ):
                return visitor.visitEnumDefinition(self)
            else:
                return visitor.visitChildren(self)




    def enumDefinition(self):

        localctx = SolidityParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self.match(SolidityParser.T__32)
            self.state = 460
            self.identifier()
            self.state = 461
            self.match(SolidityParser.T__14)
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36033195099045888) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926401) != 0):
                self.state = 462
                self.enumValue()


            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 465
                self.match(SolidityParser.T__15)
                self.state = 466
                self.enumValue()
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 472
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)




    def parameterList(self):

        localctx = SolidityParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.match(SolidityParser.T__22)
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1116897450339090432) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926525) != 0):
                self.state = 475
                self.parameter()
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 476
                    self.match(SolidityParser.T__15)
                    self.state = 477
                    self.parameter()
                    self.state = 482
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 485
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = SolidityParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.typeName(0)
            self.state = 489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 488
                self.storageLocation()


            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36033195099045888) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926401) != 0):
                self.state = 491
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameterList" ):
                return visitor.visitEventParameterList(self)
            else:
                return visitor.visitChildren(self)




    def eventParameterList(self):

        localctx = SolidityParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.match(SolidityParser.T__22)
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1116897450339090432) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926525) != 0):
                self.state = 495
                self.eventParameter()
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 496
                    self.match(SolidityParser.T__15)
                    self.state = 497
                    self.eventParameter()
                    self.state = 502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 505
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def IndexedKeyword(self):
            return self.getToken(SolidityParser.IndexedKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameter" ):
                return visitor.visitEventParameter(self)
            else:
                return visitor.visitChildren(self)




    def eventParameter(self):

        localctx = SolidityParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.typeName(0)
            self.state = 509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 508
                self.match(SolidityParser.IndexedKeyword)


            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36033195099045888) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926401) != 0):
                self.state = 511
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionTypeParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionTypeParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameterList" ):
                listener.enterFunctionTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameterList" ):
                listener.exitFunctionTypeParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeParameterList" ):
                return visitor.visitFunctionTypeParameterList(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeParameterList(self):

        localctx = SolidityParser.FunctionTypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_functionTypeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(SolidityParser.T__22)
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1116897450339090432) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926525) != 0):
                self.state = 515
                self.functionTypeParameter()
                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 516
                    self.match(SolidityParser.T__15)
                    self.state = 517
                    self.functionTypeParameter()
                    self.state = 522
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 525
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameter" ):
                listener.enterFunctionTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameter" ):
                listener.exitFunctionTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeParameter" ):
                return visitor.visitFunctionTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeParameter(self):

        localctx = SolidityParser.FunctionTypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_functionTypeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.typeName(0)
            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 7696581394432) != 0):
                self.state = 528
                self.storageLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaration" ):
                return visitor.visitVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaration(self):

        localctx = SolidityParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.typeName(0)
            self.state = 533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 532
                self.storageLocation()


            self.state = 535
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def mapping(self):
            return self.getTypedRuleContext(SolidityParser.MappingContext,0)


        def functionTypeName(self):
            return self.getTypedRuleContext(SolidityParser.FunctionTypeNameContext,0)


        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 538
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 539
                self.userDefinedTypeName()
                pass

            elif la_ == 3:
                self.state = 540
                self.mapping()
                pass

            elif la_ == 4:
                self.state = 541
                self.functionTypeName()
                pass

            elif la_ == 5:
                self.state = 542
                self.match(SolidityParser.T__35)
                self.state = 543
                self.match(SolidityParser.PayableKeyword)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 554
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SolidityParser.TypeNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 546
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 547
                    self.match(SolidityParser.T__33)
                    self.state = 549
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -289356135933935103) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 17179864061) != 0):
                        self.state = 548
                        self.expression(0)


                    self.state = 551
                    self.match(SolidityParser.T__34) 
                self.state = 556
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UserDefinedTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinedTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedTypeName" ):
                listener.enterUserDefinedTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedTypeName" ):
                listener.exitUserDefinedTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserDefinedTypeName" ):
                return visitor.visitUserDefinedTypeName(self)
            else:
                return visitor.visitChildren(self)




    def userDefinedTypeName(self):

        localctx = SolidityParser.UserDefinedTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_userDefinedTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.identifier()
            self.state = 562
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 558
                    self.match(SolidityParser.T__36)
                    self.state = 559
                    self.identifier() 
                self.state = 564
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mappingKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMappingKey" ):
                listener.enterMappingKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMappingKey" ):
                listener.exitMappingKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMappingKey" ):
                return visitor.visitMappingKey(self)
            else:
                return visitor.visitChildren(self)




    def mappingKey(self):

        localctx = SolidityParser.MappingKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_mappingKey)
        try:
            self.state = 567
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36, 56, 57, 58, 59, 99, 100, 101, 102, 103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 565
                self.elementaryTypeName()
                pass
            elif token in [14, 25, 42, 55, 97, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 566
                self.userDefinedTypeName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mappingKey(self):
            return self.getTypedRuleContext(SolidityParser.MappingKeyContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping" ):
                return visitor.visitMapping(self)
            else:
                return visitor.visitChildren(self)




    def mapping(self):

        localctx = SolidityParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_mapping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(SolidityParser.T__37)
            self.state = 570
            self.match(SolidityParser.T__22)
            self.state = 571
            self.mappingKey()
            self.state = 572
            self.match(SolidityParser.T__38)
            self.state = 573
            self.typeName(0)
            self.state = 574
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionTypeParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionTypeParameterListContext,i)


        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeName" ):
                return visitor.visitFunctionTypeName(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeName(self):

        localctx = SolidityParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_functionTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(SolidityParser.T__29)
            self.state = 577
            self.functionTypeParameterList()
            self.state = 583
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 581
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [118]:
                        self.state = 578
                        self.match(SolidityParser.InternalKeyword)
                        pass
                    elif token in [116]:
                        self.state = 579
                        self.match(SolidityParser.ExternalKeyword)
                        pass
                    elif token in [112, 119, 123, 125]:
                        self.state = 580
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 585
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

            self.state = 588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 586
                self.match(SolidityParser.T__30)
                self.state = 587
                self.functionTypeParameterList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_storageLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageLocation" ):
                listener.enterStorageLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageLocation" ):
                listener.exitStorageLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageLocation" ):
                return visitor.visitStorageLocation(self)
            else:
                return visitor.visitChildren(self)




    def storageLocation(self):

        localctx = SolidityParser.StorageLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_storageLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7696581394432) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateMutabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(SolidityParser.PureKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(SolidityParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateMutability" ):
                return visitor.visitStateMutability(self)
            else:
                return visitor.visitChildren(self)




    def stateMutability(self):

        localctx = SolidityParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            _la = self._input.LA(1)
            if not(((((_la - 112)) & ~0x3f) == 0 and ((1 << (_la - 112)) & 10369) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = SolidityParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.match(SolidityParser.T__14)
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -288233251056384511) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 17179864061) != 0):
                self.state = 595
                self.statement()
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 601
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(SolidityParser.IfStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(SolidityParser.TryStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SolidityParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(SolidityParser.ForStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def placeholderStatement(self):
            return self.getTypedRuleContext(SolidityParser.PlaceholderStatementContext,0)


        def inlineAssemblyStatement(self):
            return self.getTypedRuleContext(SolidityParser.InlineAssemblyStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(SolidityParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SolidityParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(SolidityParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SolidityParser.ReturnStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(SolidityParser.ThrowStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(SolidityParser.EmitStatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def uncheckedStatement(self):
            return self.getTypedRuleContext(SolidityParser.UncheckedStatementContext,0)


        def revertStatement(self):
            return self.getTypedRuleContext(SolidityParser.RevertStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = SolidityParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_statement)
        try:
            self.state = 619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 603
                self.ifStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 604
                self.tryStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 605
                self.whileStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 606
                self.forStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 607
                self.block()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 608
                self.placeholderStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 609
                self.inlineAssemblyStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 610
                self.doWhileStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 611
                self.continueStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 612
                self.breakStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 613
                self.returnStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 614
                self.throwStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 615
                self.emitStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 616
                self.simpleStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 617
                self.uncheckedStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 618
                self.revertStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = SolidityParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.expression(0)
            self.state = 622
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = SolidityParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.match(SolidityParser.T__42)
            self.state = 625
            self.match(SolidityParser.T__22)
            self.state = 626
            self.expression(0)
            self.state = 627
            self.match(SolidityParser.T__23)
            self.state = 628
            self.statement()
            self.state = 631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 629
                self.match(SolidityParser.T__43)
                self.state = 630
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStatement" ):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def tryStatement(self):

        localctx = SolidityParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.match(SolidityParser.T__44)
            self.state = 634
            self.expression(0)
            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 635
                self.returnParameters()


            self.state = 638
            self.block()
            self.state = 640 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 639
                self.catchClause()
                self.state = 642 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==46):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchClause" ):
                return visitor.visitCatchClause(self)
            else:
                return visitor.visitChildren(self)




    def catchClause(self):

        localctx = SolidityParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.match(SolidityParser.T__45)
            self.state = 649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36033195107434496) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926401) != 0):
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36033195099045888) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926401) != 0):
                    self.state = 645
                    self.identifier()


                self.state = 648
                self.parameterList()


            self.state = 651
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = SolidityParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.match(SolidityParser.T__46)
            self.state = 654
            self.match(SolidityParser.T__22)
            self.state = 655
            self.expression(0)
            self.state = 656
            self.match(SolidityParser.T__23)
            self.state = 657
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleStatement" ):
                return visitor.visitSimpleStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleStatement(self):

        localctx = SolidityParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_simpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 659
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 660
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UncheckedStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_uncheckedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedStatement" ):
                listener.enterUncheckedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedStatement" ):
                listener.exitUncheckedStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUncheckedStatement" ):
                return visitor.visitUncheckedStatement(self)
            else:
                return visitor.visitChildren(self)




    def uncheckedStatement(self):

        localctx = SolidityParser.UncheckedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_uncheckedStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(SolidityParser.T__47)
            self.state = 664
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceholderStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_placeholderStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlaceholderStatement" ):
                listener.enterPlaceholderStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlaceholderStatement" ):
                listener.exitPlaceholderStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlaceholderStatement" ):
                return visitor.visitPlaceholderStatement(self)
            else:
                return visitor.visitChildren(self)




    def placeholderStatement(self):

        localctx = SolidityParser.PlaceholderStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_placeholderStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.match(SolidityParser.T__48)
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 667
                self.match(SolidityParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = SolidityParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(SolidityParser.T__26)
            self.state = 671
            self.match(SolidityParser.T__22)
            self.state = 674
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 14, 23, 25, 30, 34, 36, 38, 42, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130]:
                self.state = 672
                self.simpleStatement()
                pass
            elif token in [2]:
                self.state = 673
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 678
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 14, 23, 25, 34, 36, 42, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130]:
                self.state = 676
                self.expressionStatement()
                pass
            elif token in [2]:
                self.state = 677
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -289356135933935103) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 17179864061) != 0):
                self.state = 680
                self.expression(0)


            self.state = 683
            self.match(SolidityParser.T__23)
            self.state = 684
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineAssemblyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def StringLiteralFragment(self):
            return self.getToken(SolidityParser.StringLiteralFragment, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_inlineAssemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAssemblyStatement" ):
                listener.enterInlineAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAssemblyStatement" ):
                listener.exitInlineAssemblyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineAssemblyStatement" ):
                return visitor.visitInlineAssemblyStatement(self)
            else:
                return visitor.visitChildren(self)




    def inlineAssemblyStatement(self):

        localctx = SolidityParser.InlineAssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_inlineAssemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.match(SolidityParser.T__49)
            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 687
                self.match(SolidityParser.StringLiteralFragment)


            self.state = 690
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoWhileStatement" ):
                return visitor.visitDoWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def doWhileStatement(self):

        localctx = SolidityParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.match(SolidityParser.T__50)
            self.state = 693
            self.statement()
            self.state = 694
            self.match(SolidityParser.T__46)
            self.state = 695
            self.match(SolidityParser.T__22)
            self.state = 696
            self.expression(0)
            self.state = 697
            self.match(SolidityParser.T__23)
            self.state = 698
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)




    def continueStatement(self):

        localctx = SolidityParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(SolidityParser.ContinueKeyword)
            self.state = 701
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStatement" ):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)




    def breakStatement(self):

        localctx = SolidityParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(SolidityParser.BreakKeyword)
            self.state = 704
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = SolidityParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(SolidityParser.T__51)
            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -289356135933935103) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 17179864061) != 0):
                self.state = 707
                self.expression(0)


            self.state = 710
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowStatement" ):
                return visitor.visitThrowStatement(self)
            else:
                return visitor.visitChildren(self)




    def throwStatement(self):

        localctx = SolidityParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(SolidityParser.T__52)
            self.state = 713
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmitStatement" ):
                return visitor.visitEmitStatement(self)
            else:
                return visitor.visitChildren(self)




    def emitStatement(self):

        localctx = SolidityParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_emitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(SolidityParser.T__53)
            self.state = 716
            self.functionCall()
            self.state = 717
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_revertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevertStatement" ):
                listener.enterRevertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevertStatement" ):
                listener.exitRevertStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevertStatement" ):
                return visitor.visitRevertStatement(self)
            else:
                return visitor.visitChildren(self)




    def revertStatement(self):

        localctx = SolidityParser.RevertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_revertStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(SolidityParser.T__54)
            self.state = 720
            self.functionCall()
            self.state = 721
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierListContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,0)


        def variableDeclarationList(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationListContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationStatement" ):
                return visitor.visitVariableDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationStatement(self):

        localctx = SolidityParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 723
                self.match(SolidityParser.T__55)
                self.state = 724
                self.identifierList()
                pass

            elif la_ == 2:
                self.state = 725
                self.variableDeclaration()
                pass

            elif la_ == 3:
                self.state = 726
                self.match(SolidityParser.T__22)
                self.state = 727
                self.variableDeclarationList()
                self.state = 728
                self.match(SolidityParser.T__23)
                pass


            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 732
                self.match(SolidityParser.T__9)
                self.state = 733
                self.expression(0)


            self.state = 736
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationList" ):
                return visitor.visitVariableDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationList(self):

        localctx = SolidityParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1116897450339090432) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926525) != 0):
                self.state = 738
                self.variableDeclaration()


            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 741
                self.match(SolidityParser.T__15)
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1116897450339090432) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926525) != 0):
                    self.state = 742
                    self.variableDeclaration()


                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = SolidityParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.match(SolidityParser.T__22)
            self.state = 757
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 752
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36033195099045888) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926401) != 0):
                        self.state = 751
                        self.identifier()


                    self.state = 754
                    self.match(SolidityParser.T__15) 
                self.state = 759
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36033195099045888) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926401) != 0):
                self.state = 760
                self.identifier()


            self.state = 763
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementaryTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int(self):
            return self.getToken(SolidityParser.Int, 0)

        def Uint(self):
            return self.getToken(SolidityParser.Uint, 0)

        def Byte(self):
            return self.getToken(SolidityParser.Byte, 0)

        def Fixed(self):
            return self.getToken(SolidityParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(SolidityParser.Ufixed, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementaryTypeName" ):
                return visitor.visitElementaryTypeName(self)
            else:
                return visitor.visitChildren(self)




    def elementaryTypeName(self):

        localctx = SolidityParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_elementaryTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1080863979288395776) != 0) or ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PrefixOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixOperation" ):
                listener.enterPrefixOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixOperation" ):
                listener.exitPrefixOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixOperation" ):
                return visitor.visitPrefixOperation(self)
            else:
                return visitor.visitChildren(self)


    class KeywordPrefixOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordPrefixOperation" ):
                listener.enterKeywordPrefixOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordPrefixOperation" ):
                listener.exitKeywordPrefixOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordPrefixOperation" ):
                return visitor.visitKeywordPrefixOperation(self)
            else:
                return visitor.visitChildren(self)


    class UnaryPrefixOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryPrefixOperation" ):
                listener.enterUnaryPrefixOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryPrefixOperation" ):
                listener.exitUnaryPrefixOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryPrefixOperation" ):
                return visitor.visitUnaryPrefixOperation(self)
            else:
                return visitor.visitChildren(self)


    class OrderComparisonContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderComparison" ):
                listener.enterOrderComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderComparison" ):
                listener.exitOrderComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderComparison" ):
                return visitor.visitOrderComparison(self)
            else:
                return visitor.visitChildren(self)


    class ConditionalContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional" ):
                listener.enterConditional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional" ):
                listener.exitConditional(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditional" ):
                return visitor.visitConditional(self)
            else:
                return visitor.visitChildren(self)


    class AddOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddOperation" ):
                listener.enterAddOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddOperation" ):
                listener.exitAddOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddOperation" ):
                return visitor.visitAddOperation(self)
            else:
                return visitor.visitChildren(self)


    class AssignmentContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)


    class TypeConversionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConversion" ):
                listener.enterTypeConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConversion" ):
                listener.exitTypeConversion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConversion" ):
                return visitor.visitTypeConversion(self)
            else:
                return visitor.visitChildren(self)


    class ShiftOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftOperation" ):
                listener.enterShiftOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftOperation" ):
                listener.exitShiftOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftOperation" ):
                return visitor.visitShiftOperation(self)
            else:
                return visitor.visitChildren(self)


    class PrimaryContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SolidityParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)


    class BitAndOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitAndOperation" ):
                listener.enterBitAndOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitAndOperation" ):
                listener.exitBitAndOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitAndOperation" ):
                return visitor.visitBitAndOperation(self)
            else:
                return visitor.visitChildren(self)


    class MulOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulOperation" ):
                listener.enterMulOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulOperation" ):
                listener.exitMulOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMulOperation" ):
                return visitor.visitMulOperation(self)
            else:
                return visitor.visitChildren(self)


    class IndexRangeAccessContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexRangeAccess" ):
                listener.enterIndexRangeAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexRangeAccess" ):
                listener.exitIndexRangeAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexRangeAccess" ):
                return visitor.visitIndexRangeAccess(self)
            else:
                return visitor.visitChildren(self)


    class PayableExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)
        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPayableExpression" ):
                listener.enterPayableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPayableExpression" ):
                listener.exitPayableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPayableExpression" ):
                return visitor.visitPayableExpression(self)
            else:
                return visitor.visitChildren(self)


    class NewExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpression" ):
                listener.enterNewExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpression" ):
                listener.exitNewExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewExpression" ):
                return visitor.visitNewExpression(self)
            else:
                return visitor.visitChildren(self)


    class IndexAccessContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexAccess" ):
                listener.enterIndexAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexAccess" ):
                listener.exitIndexAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexAccess" ):
                return visitor.visitIndexAccess(self)
            else:
                return visitor.visitChildren(self)


    class BitNotOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitNotOperation" ):
                listener.enterBitNotOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitNotOperation" ):
                listener.exitBitNotOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitNotOperation" ):
                return visitor.visitBitNotOperation(self)
            else:
                return visitor.visitChildren(self)


    class BitOrOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOrOperation" ):
                listener.enterBitOrOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOrOperation" ):
                listener.exitBitOrOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitOrOperation" ):
                return visitor.visitBitOrOperation(self)
            else:
                return visitor.visitChildren(self)


    class NotOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotOperation" ):
                listener.enterNotOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotOperation" ):
                listener.exitNotOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotOperation" ):
                return visitor.visitNotOperation(self)
            else:
                return visitor.visitChildren(self)


    class AndOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndOperation" ):
                listener.enterAndOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndOperation" ):
                listener.exitAndOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndOperation" ):
                return visitor.visitAndOperation(self)
            else:
                return visitor.visitChildren(self)


    class ModOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModOperation" ):
                listener.enterModOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModOperation" ):
                listener.exitModOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModOperation" ):
                return visitor.visitModOperation(self)
            else:
                return visitor.visitChildren(self)


    class OrOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrOperation" ):
                listener.enterOrOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrOperation" ):
                listener.exitOrOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrOperation" ):
                return visitor.visitOrOperation(self)
            else:
                return visitor.visitChildren(self)


    class SuffixOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuffixOperation" ):
                listener.enterSuffixOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuffixOperation" ):
                listener.exitSuffixOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuffixOperation" ):
                return visitor.visitSuffixOperation(self)
            else:
                return visitor.visitChildren(self)


    class MemberAccessContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccess" ):
                listener.enterMemberAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccess" ):
                listener.exitMemberAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccess" ):
                return visitor.visitMemberAccess(self)
            else:
                return visitor.visitChildren(self)


    class ValueExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)

        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpression" ):
                listener.enterValueExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpression" ):
                listener.exitValueExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueExpression" ):
                return visitor.visitValueExpression(self)
            else:
                return visitor.visitChildren(self)


    class ParenExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpression" ):
                listener.enterParenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpression" ):
                listener.exitParenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpression" ):
                return visitor.visitParenExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitXorOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitXorOperation" ):
                listener.enterBitXorOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitXorOperation" ):
                listener.exitBitXorOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitXorOperation" ):
                return visitor.visitBitXorOperation(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallWithOptionsContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)

        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)

        def functionCallOptions(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallOptionsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallWithOptions" ):
                listener.enterFunctionCallWithOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallWithOptions" ):
                listener.exitFunctionCallWithOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallWithOptions" ):
                return visitor.visitFunctionCallWithOptions(self)
            else:
                return visitor.visitChildren(self)


    class EqualityComparisonContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityComparison" ):
                listener.enterEqualityComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityComparison" ):
                listener.exitEqualityComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityComparison" ):
                return visitor.visitEqualityComparison(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                localctx = SolidityParser.NewExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 768
                self.match(SolidityParser.T__61)
                self.state = 769
                self.typeName(0)
                pass

            elif la_ == 2:
                localctx = SolidityParser.PayableExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 770
                self.match(SolidityParser.PayableKeyword)
                self.state = 771
                self.match(SolidityParser.T__22)
                self.state = 772
                self.expression(0)
                self.state = 773
                self.match(SolidityParser.T__23)
                pass

            elif la_ == 3:
                localctx = SolidityParser.TypeConversionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 775
                self.elementaryTypeName()
                self.state = 776
                self.match(SolidityParser.T__22)
                self.state = 777
                self.expression(0)
                self.state = 778
                self.match(SolidityParser.T__23)
                pass

            elif la_ == 4:
                localctx = SolidityParser.ParenExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 780
                self.match(SolidityParser.T__22)
                self.state = 781
                self.expression(0)
                self.state = 782
                self.match(SolidityParser.T__23)
                pass

            elif la_ == 5:
                localctx = SolidityParser.PrefixOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 784
                _la = self._input.LA(1)
                if not(_la==60 or _la==61):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 785
                self.expression(19)
                pass

            elif la_ == 6:
                localctx = SolidityParser.UnaryPrefixOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 786
                _la = self._input.LA(1)
                if not(_la==64 or _la==65):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 787
                self.expression(18)
                pass

            elif la_ == 7:
                localctx = SolidityParser.KeywordPrefixOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 788
                _la = self._input.LA(1)
                if not(_la==66 or _la==67):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 789
                self.expression(17)
                pass

            elif la_ == 8:
                localctx = SolidityParser.NotOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 790
                self.match(SolidityParser.T__67)
                self.state = 791
                self.expression(16)
                pass

            elif la_ == 9:
                localctx = SolidityParser.BitNotOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 792
                self.match(SolidityParser.T__4)
                self.state = 793
                self.expression(15)
                pass

            elif la_ == 10:
                localctx = SolidityParser.PrimaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 794
                self.primaryExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 875
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 873
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                    if la_ == 1:
                        localctx = SolidityParser.ModOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 797
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 798
                        self.match(SolidityParser.T__68)
                        self.state = 799
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = SolidityParser.MulOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 800
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 801
                        _la = self._input.LA(1)
                        if not(((((_la - 13)) & ~0x3f) == 0 and ((1 << (_la - 13)) & 432345564227567617) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 802
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = SolidityParser.AddOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 803
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 804
                        _la = self._input.LA(1)
                        if not(_la==64 or _la==65):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 805
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = SolidityParser.ShiftOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 806
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 807
                        _la = self._input.LA(1)
                        if not(_la==72 or _la==73):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 808
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = SolidityParser.BitAndOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 809
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 810
                        self.match(SolidityParser.T__73)
                        self.state = 811
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = SolidityParser.BitXorOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 812
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 813
                        self.match(SolidityParser.T__3)
                        self.state = 814
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = SolidityParser.BitOrOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 815
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 816
                        self.match(SolidityParser.T__74)
                        self.state = 817
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = SolidityParser.OrderComparisonContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 818
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 819
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 960) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 820
                        self.expression(8)
                        pass

                    elif la_ == 9:
                        localctx = SolidityParser.EqualityComparisonContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 821
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 822
                        _la = self._input.LA(1)
                        if not(_la==76 or _la==77):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 823
                        self.expression(7)
                        pass

                    elif la_ == 10:
                        localctx = SolidityParser.AndOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 824
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 825
                        self.match(SolidityParser.T__77)
                        self.state = 826
                        self.expression(6)
                        pass

                    elif la_ == 11:
                        localctx = SolidityParser.OrOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 827
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 828
                        self.match(SolidityParser.T__2)
                        self.state = 829
                        self.expression(5)
                        pass

                    elif la_ == 12:
                        localctx = SolidityParser.ConditionalContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 830
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 831
                        self.match(SolidityParser.T__78)
                        self.state = 832
                        self.expression(0)
                        self.state = 833
                        self.match(SolidityParser.T__62)
                        self.state = 834
                        self.expression(4)
                        pass

                    elif la_ == 13:
                        localctx = SolidityParser.AssignmentContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 836
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 837
                        _la = self._input.LA(1)
                        if not(_la==10 or ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 1023) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 838
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = SolidityParser.SuffixOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 839
                        if not self.precpred(self._ctx, 29):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 840
                        _la = self._input.LA(1)
                        if not(_la==60 or _la==61):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 15:
                        localctx = SolidityParser.IndexAccessContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 841
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 842
                        self.match(SolidityParser.T__33)
                        self.state = 844
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -289356135933935103) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 17179864061) != 0):
                            self.state = 843
                            self.expression(0)


                        self.state = 846
                        self.match(SolidityParser.T__34)
                        pass

                    elif la_ == 16:
                        localctx = SolidityParser.IndexRangeAccessContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 847
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 848
                        self.match(SolidityParser.T__33)
                        self.state = 850
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -289356135933935103) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 17179864061) != 0):
                            self.state = 849
                            self.expression(0)


                        self.state = 852
                        self.match(SolidityParser.T__62)
                        self.state = 854
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -289356135933935103) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 17179864061) != 0):
                            self.state = 853
                            self.expression(0)


                        self.state = 856
                        self.match(SolidityParser.T__34)
                        pass

                    elif la_ == 17:
                        localctx = SolidityParser.MemberAccessContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 857
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 858
                        self.match(SolidityParser.T__36)
                        self.state = 859
                        self.identifier()
                        pass

                    elif la_ == 18:
                        localctx = SolidityParser.ValueExpressionContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 860
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 861
                        self.match(SolidityParser.T__14)
                        self.state = 862
                        self.nameValueList()
                        self.state = 863
                        self.match(SolidityParser.T__16)
                        pass

                    elif la_ == 19:
                        localctx = SolidityParser.FunctionCallWithOptionsContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 865
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 867
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==15:
                            self.state = 866
                            self.functionCallOptions()


                        self.state = 869
                        self.match(SolidityParser.T__22)
                        self.state = 870
                        self.functionCallArguments()
                        self.state = 871
                        self.match(SolidityParser.T__23)
                        pass

             
                self.state = 877
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def BooleanLiteral(self):
            return self.getToken(SolidityParser.BooleanLiteral, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def tupleExpression(self):
            return self.getTypedRuleContext(SolidityParser.TupleExpressionContext,0)


        def typeNameExpression(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = SolidityParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_primaryExpression)
        try:
            self.state = 895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 878
                self.match(SolidityParser.TypeKeyword)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 879
                self.match(SolidityParser.PayableKeyword)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 880
                self.match(SolidityParser.BooleanLiteral)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 881
                self.numberLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 882
                self.hexLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 883
                self.tupleExpression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 884
                self.typeNameExpression()
                self.state = 887
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 885
                    self.match(SolidityParser.T__33)
                    self.state = 886
                    self.match(SolidityParser.T__34)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 889
                self.identifier()
                self.state = 892
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 890
                    self.match(SolidityParser.T__33)
                    self.state = 891
                    self.match(SolidityParser.T__34)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 894
                self.stringLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = SolidityParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.expression(0)
            self.state = 902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 898
                self.match(SolidityParser.T__15)
                self.state = 899
                self.expression(0)
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NameValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NameValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValueList" ):
                listener.enterNameValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValueList" ):
                listener.exitNameValueList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameValueList" ):
                return visitor.visitNameValueList(self)
            else:
                return visitor.visitChildren(self)




    def nameValueList(self):

        localctx = SolidityParser.NameValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_nameValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.nameValue()
            self.state = 910
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 906
                    self.match(SolidityParser.T__15)
                    self.state = 907
                    self.nameValue() 
                self.state = 912
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

            self.state = 914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 913
                self.match(SolidityParser.T__15)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValue" ):
                listener.enterNameValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValue" ):
                listener.exitNameValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameValue" ):
                return visitor.visitNameValue(self)
            else:
                return visitor.visitChildren(self)




    def nameValue(self):

        localctx = SolidityParser.NameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_nameValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.identifier()
            self.state = 917
            self.match(SolidityParser.T__62)
            self.state = 918
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCallOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOptions" ):
                listener.enterFunctionCallOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOptions" ):
                listener.exitFunctionCallOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallOptions" ):
                return visitor.visitFunctionCallOptions(self)
            else:
                return visitor.visitChildren(self)




    def functionCallOptions(self):

        localctx = SolidityParser.FunctionCallOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_functionCallOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.match(SolidityParser.T__14)
            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36033195099045888) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926401) != 0):
                self.state = 921
                self.nameValueList()


            self.state = 924
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCallArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArguments" ):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArguments" ):
                listener.exitFunctionCallArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallArguments" ):
                return visitor.visitFunctionCallArguments(self)
            else:
                return visitor.visitChildren(self)




    def functionCallArguments(self):

        localctx = SolidityParser.FunctionCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_functionCallArguments)
        self._la = 0 # Token type
        try:
            self.state = 934
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 926
                self.match(SolidityParser.T__14)
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36033195099045888) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926401) != 0):
                    self.state = 927
                    self.nameValueList()


                self.state = 930
                self.match(SolidityParser.T__16)
                pass
            elif token in [5, 14, 23, 24, 25, 34, 36, 42, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130]:
                self.enterOuterAlt(localctx, 2)
                self.state = 932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -289356135933935103) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 17179864061) != 0):
                    self.state = 931
                    self.expressionList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = SolidityParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.expression(0)
            self.state = 937
            self.match(SolidityParser.T__22)
            self.state = 938
            self.functionCallArguments()
            self.state = 939
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyItemContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyItemContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyBlock" ):
                listener.enterAssemblyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyBlock" ):
                listener.exitAssemblyBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyBlock" ):
                return visitor.visitAssemblyBlock(self)
            else:
                return visitor.visitChildren(self)




    def assemblyBlock(self):

        localctx = SolidityParser.AssemblyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_assemblyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            self.match(SolidityParser.T__14)
            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 618132312965562368) != 0) or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & 2199022567565) != 0):
                self.state = 942
                self.assemblyItem()
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 948
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyLocalDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLocalDefinitionContext,0)


        def assemblyAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyAssignmentContext,0)


        def assemblyStackAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyStackAssignmentContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(SolidityParser.LabelDefinitionContext,0)


        def assemblySwitch(self):
            return self.getTypedRuleContext(SolidityParser.AssemblySwitchContext,0)


        def assemblyFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionDefinitionContext,0)


        def assemblyFor(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyForContext,0)


        def assemblyIf(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIfContext,0)


        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def LeaveKeyword(self):
            return self.getToken(SolidityParser.LeaveKeyword, 0)

        def subAssembly(self):
            return self.getTypedRuleContext(SolidityParser.SubAssemblyContext,0)


        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyItem" ):
                listener.enterAssemblyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyItem" ):
                listener.exitAssemblyItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyItem" ):
                return visitor.visitAssemblyItem(self)
            else:
                return visitor.visitChildren(self)




    def assemblyItem(self):

        localctx = SolidityParser.AssemblyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_assemblyItem)
        try:
            self.state = 968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 950
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 951
                self.assemblyBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 952
                self.assemblyExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 953
                self.assemblyLocalDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 954
                self.assemblyAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 955
                self.assemblyStackAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 956
                self.labelDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 957
                self.assemblySwitch()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 958
                self.assemblyFunctionDefinition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 959
                self.assemblyFor()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 960
                self.assemblyIf()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 961
                self.match(SolidityParser.BreakKeyword)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 962
                self.match(SolidityParser.ContinueKeyword)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 963
                self.match(SolidityParser.LeaveKeyword)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 964
                self.subAssembly()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 965
                self.numberLiteral()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 966
                self.stringLiteral()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 967
                self.hexLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyCall(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyCallContext,0)


        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def assemblyMember(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyMemberContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyExpression" ):
                listener.enterAssemblyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyExpression" ):
                listener.exitAssemblyExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyExpression" ):
                return visitor.visitAssemblyExpression(self)
            else:
                return visitor.visitChildren(self)




    def assemblyExpression(self):

        localctx = SolidityParser.AssemblyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_assemblyExpression)
        try:
            self.state = 973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 970
                self.assemblyCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 971
                self.assemblyLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 972
                self.assemblyMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyMember" ):
                listener.enterAssemblyMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyMember" ):
                listener.exitAssemblyMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyMember" ):
                return visitor.visitAssemblyMember(self)
            else:
                return visitor.visitChildren(self)




    def assemblyMember(self):

        localctx = SolidityParser.AssemblyMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_assemblyMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.identifier()
            self.state = 976
            self.match(SolidityParser.T__36)
            self.state = 977
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCall" ):
                listener.enterAssemblyCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCall" ):
                listener.exitAssemblyCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyCall" ):
                return visitor.visitAssemblyCall(self)
            else:
                return visitor.visitChildren(self)




    def assemblyCall(self):

        localctx = SolidityParser.AssemblyCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_assemblyCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.state = 979
                self.match(SolidityParser.T__51)
                pass
            elif token in [36]:
                self.state = 980
                self.match(SolidityParser.T__35)
                pass
            elif token in [59]:
                self.state = 981
                self.match(SolidityParser.T__58)
                pass
            elif token in [14, 25, 42, 55, 97, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129]:
                self.state = 982
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 997
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 985
                self.match(SolidityParser.T__22)
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 616997615749316608) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 17179863809) != 0):
                    self.state = 986
                    self.assemblyExpression()


                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 989
                    self.match(SolidityParser.T__15)
                    self.state = 990
                    self.assemblyExpression()
                    self.state = 995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 996
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLocalDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLocalDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLocalDefinition" ):
                listener.enterAssemblyLocalDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLocalDefinition" ):
                listener.exitAssemblyLocalDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyLocalDefinition" ):
                return visitor.visitAssemblyLocalDefinition(self)
            else:
                return visitor.visitChildren(self)




    def assemblyLocalDefinition(self):

        localctx = SolidityParser.AssemblyLocalDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_assemblyLocalDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.match(SolidityParser.T__89)
            self.state = 1000
            self.assemblyIdentifierOrList()
            self.state = 1003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 1001
                self.match(SolidityParser.T__90)
                self.state = 1002
                self.assemblyExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyAssignment" ):
                listener.enterAssemblyAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyAssignment" ):
                listener.exitAssemblyAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyAssignment" ):
                return visitor.visitAssemblyAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assemblyAssignment(self):

        localctx = SolidityParser.AssemblyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_assemblyAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.assemblyIdentifierOrList()
            self.state = 1006
            self.match(SolidityParser.T__90)
            self.state = 1007
            self.assemblyExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierOrListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyMember(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyMemberContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierOrList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierOrList" ):
                listener.enterAssemblyIdentifierOrList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierOrList" ):
                listener.exitAssemblyIdentifierOrList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyIdentifierOrList" ):
                return visitor.visitAssemblyIdentifierOrList(self)
            else:
                return visitor.visitChildren(self)




    def assemblyIdentifierOrList(self):

        localctx = SolidityParser.AssemblyIdentifierOrListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assemblyIdentifierOrList)
        try:
            self.state = 1015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1009
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1010
                self.assemblyMember()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1011
                self.match(SolidityParser.T__22)
                self.state = 1012
                self.assemblyIdentifierList()
                self.state = 1013
                self.match(SolidityParser.T__23)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierList" ):
                listener.enterAssemblyIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierList" ):
                listener.exitAssemblyIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyIdentifierList" ):
                return visitor.visitAssemblyIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def assemblyIdentifierList(self):

        localctx = SolidityParser.AssemblyIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_assemblyIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.identifier()
            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 1018
                self.match(SolidityParser.T__15)
                self.state = 1019
                self.identifier()
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyStackAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyStackAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStackAssignment" ):
                listener.enterAssemblyStackAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStackAssignment" ):
                listener.exitAssemblyStackAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyStackAssignment" ):
                return visitor.visitAssemblyStackAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assemblyStackAssignment(self):

        localctx = SolidityParser.AssemblyStackAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_assemblyStackAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.match(SolidityParser.T__91)
            self.state = 1026
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelDefinition" ):
                return visitor.visitLabelDefinition(self)
            else:
                return visitor.visitChildren(self)




    def labelDefinition(self):

        localctx = SolidityParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.identifier()
            self.state = 1029
            self.match(SolidityParser.T__62)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblySwitchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyCaseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyCaseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblySwitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblySwitch" ):
                listener.enterAssemblySwitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblySwitch" ):
                listener.exitAssemblySwitch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblySwitch" ):
                return visitor.visitAssemblySwitch(self)
            else:
                return visitor.visitChildren(self)




    def assemblySwitch(self):

        localctx = SolidityParser.AssemblySwitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_assemblySwitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.match(SolidityParser.T__92)
            self.state = 1032
            self.assemblyExpression()
            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==94 or _la==95:
                self.state = 1033
                self.assemblyCase()
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCase" ):
                listener.enterAssemblyCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCase" ):
                listener.exitAssemblyCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyCase" ):
                return visitor.visitAssemblyCase(self)
            else:
                return visitor.visitChildren(self)




    def assemblyCase(self):

        localctx = SolidityParser.AssemblyCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_assemblyCase)
        try:
            self.state = 1045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1039
                self.match(SolidityParser.T__93)
                self.state = 1040
                self.assemblyLiteral()
                self.state = 1041
                self.assemblyBlock()
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1043
                self.match(SolidityParser.T__94)
                self.state = 1044
                self.assemblyBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def assemblyFunctionReturns(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionReturnsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionDefinition" ):
                listener.enterAssemblyFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionDefinition" ):
                listener.exitAssemblyFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFunctionDefinition" ):
                return visitor.visitAssemblyFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFunctionDefinition(self):

        localctx = SolidityParser.AssemblyFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_assemblyFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(SolidityParser.T__29)
            self.state = 1048
            self.identifier()
            self.state = 1049
            self.match(SolidityParser.T__22)
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36033195099045888) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 8589926401) != 0):
                self.state = 1050
                self.assemblyIdentifierList()


            self.state = 1053
            self.match(SolidityParser.T__23)
            self.state = 1055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 1054
                self.assemblyFunctionReturns()


            self.state = 1057
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionReturnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionReturns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionReturns" ):
                listener.enterAssemblyFunctionReturns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionReturns" ):
                listener.exitAssemblyFunctionReturns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFunctionReturns" ):
                return visitor.visitAssemblyFunctionReturns(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFunctionReturns(self):

        localctx = SolidityParser.AssemblyFunctionReturnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_assemblyFunctionReturns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.match(SolidityParser.T__95)
            self.state = 1060
            self.assemblyIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def assemblyBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFor" ):
                listener.enterAssemblyFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFor" ):
                listener.exitAssemblyFor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFor" ):
                return visitor.visitAssemblyFor(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFor(self):

        localctx = SolidityParser.AssemblyForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_assemblyFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.match(SolidityParser.T__26)
            self.state = 1065
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 1063
                self.assemblyBlock()
                pass
            elif token in [14, 25, 36, 42, 52, 55, 59, 97, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130]:
                self.state = 1064
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1067
            self.assemblyExpression()
            self.state = 1070
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 1068
                self.assemblyBlock()
                pass
            elif token in [14, 25, 36, 42, 52, 55, 59, 97, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130]:
                self.state = 1069
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1072
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIf" ):
                listener.enterAssemblyIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIf" ):
                listener.exitAssemblyIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyIf" ):
                return visitor.visitAssemblyIf(self)
            else:
                return visitor.visitChildren(self)




    def assemblyIf(self):

        localctx = SolidityParser.AssemblyIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_assemblyIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.match(SolidityParser.T__42)
            self.state = 1075
            self.assemblyExpression()
            self.state = 1076
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLiteral" ):
                listener.enterAssemblyLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLiteral" ):
                listener.exitAssemblyLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyLiteral" ):
                return visitor.visitAssemblyLiteral(self)
            else:
                return visitor.visitChildren(self)




    def assemblyLiteral(self):

        localctx = SolidityParser.AssemblyLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_assemblyLiteral)
        try:
            self.state = 1082
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1078
                self.stringLiteral()
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1079
                self.match(SolidityParser.DecimalNumber)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1080
                self.match(SolidityParser.HexNumber)
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1081
                self.hexLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubAssemblyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_subAssembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubAssembly" ):
                listener.enterSubAssembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubAssembly" ):
                listener.exitSubAssembly(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubAssembly" ):
                return visitor.visitSubAssembly(self)
            else:
                return visitor.visitChildren(self)




    def subAssembly(self):

        localctx = SolidityParser.SubAssemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_subAssembly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.match(SolidityParser.T__49)
            self.state = 1085
            self.identifier()
            self.state = 1086
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupleExpression" ):
                return visitor.visitTupleExpression(self)
            else:
                return visitor.visitChildren(self)




    def tupleExpression(self):

        localctx = SolidityParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.state = 1116
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1088
                self.match(SolidityParser.T__22)
                self.state = 1101
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 1090
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -289356135933935103) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 17179864061) != 0):
                        self.state = 1089
                        self.expression(0)


                    self.state = 1098
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==16:
                        self.state = 1092
                        self.match(SolidityParser.T__15)
                        self.state = 1094
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -289356135933935103) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 17179864061) != 0):
                            self.state = 1093
                            self.expression(0)


                        self.state = 1100
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1103
                self.match(SolidityParser.T__23)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1104
                self.match(SolidityParser.T__33)
                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -289356135933935103) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 17179864061) != 0):
                    self.state = 1105
                    self.expression(0)
                    self.state = 1110
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==16:
                        self.state = 1106
                        self.match(SolidityParser.T__15)
                        self.state = 1107
                        self.expression(0)
                        self.state = 1112
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1115
                self.match(SolidityParser.T__34)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeNameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameExpression" ):
                listener.enterTypeNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameExpression" ):
                listener.exitTypeNameExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeNameExpression" ):
                return visitor.visitTypeNameExpression(self)
            else:
                return visitor.visitChildren(self)




    def typeNameExpression(self):

        localctx = SolidityParser.TypeNameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_typeNameExpression)
        try:
            self.state = 1120
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36, 56, 57, 58, 59, 99, 100, 101, 102, 103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1118
                self.elementaryTypeName()
                pass
            elif token in [14, 25, 42, 55, 97, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1119
                self.userDefinedTypeName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def NumberUnit(self):
            return self.getToken(SolidityParser.NumberUnit, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = SolidityParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            _la = self._input.LA(1)
            if not(_la==105 or _la==106):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1124
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1123
                self.match(SolidityParser.NumberUnit)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def allKeywords(self):
            return self.getTypedRuleContext(SolidityParser.AllKeywordsContext,0)


        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def Identifier(self):
            return self.getToken(SolidityParser.Identifier, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = SolidityParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 1126
                self.allKeywords()
                pass

            elif la_ == 2:
                self.state = 1127
                self.match(SolidityParser.T__13)
                pass

            elif la_ == 3:
                self.state = 1128
                self.match(SolidityParser.T__41)
                pass

            elif la_ == 4:
                self.state = 1129
                self.match(SolidityParser.ReceiveKeyword)
                pass

            elif la_ == 5:
                self.state = 1130
                self.match(SolidityParser.T__96)
                pass

            elif la_ == 6:
                self.state = 1131
                self.match(SolidityParser.T__54)
                pass

            elif la_ == 7:
                self.state = 1132
                self.match(SolidityParser.T__24)
                pass

            elif la_ == 8:
                self.state = 1133
                self.match(SolidityParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HexLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexLiteralFragment(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.HexLiteralFragment)
            else:
                return self.getToken(SolidityParser.HexLiteralFragment, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_hexLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexLiteral" ):
                listener.enterHexLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexLiteral" ):
                listener.exitHexLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHexLiteral" ):
                return visitor.visitHexLiteral(self)
            else:
                return visitor.visitChildren(self)




    def hexLiteral(self):

        localctx = SolidityParser.HexLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_hexLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1136
                    self.match(SolidityParser.HexLiteralFragment)

                else:
                    raise NoViableAltException(self)
                self.state = 1139 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PublicKeyword(self):
            return self.getToken(SolidityParser.PublicKeyword, 0)

        def PrivateKeyword(self):
            return self.getToken(SolidityParser.PrivateKeyword, 0)

        def ExternalKeyword(self):
            return self.getToken(SolidityParser.ExternalKeyword, 0)

        def InternalKeyword(self):
            return self.getToken(SolidityParser.InternalKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_visibilityKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibilityKeyword" ):
                listener.enterVisibilityKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibilityKeyword" ):
                listener.exitVisibilityKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibilityKeyword" ):
                return visitor.visitVisibilityKeyword(self)
            else:
                return visitor.visitChildren(self)




    def visibilityKeyword(self):

        localctx = SolidityParser.VisibilityKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_visibilityKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            _la = self._input.LA(1)
            if not(((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & 53) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllKeywordsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AnonymousKeyword(self):
            return self.getToken(SolidityParser.AnonymousKeyword, 0)

        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def ImmutableKeyword(self):
            return self.getToken(SolidityParser.ImmutableKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def LeaveKeyword(self):
            return self.getToken(SolidityParser.LeaveKeyword, 0)

        def IndexedKeyword(self):
            return self.getToken(SolidityParser.IndexedKeyword, 0)

        def visibilityKeyword(self):
            return self.getTypedRuleContext(SolidityParser.VisibilityKeywordContext,0)


        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def VirtualKeyword(self):
            return self.getToken(SolidityParser.VirtualKeyword, 0)

        def PureKeyword(self):
            return self.getToken(SolidityParser.PureKeyword, 0)

        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(SolidityParser.ViewKeyword, 0)

        def ConstructorKeyword(self):
            return self.getToken(SolidityParser.ConstructorKeyword, 0)

        def FallbackKeyword(self):
            return self.getToken(SolidityParser.FallbackKeyword, 0)

        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_allKeywords

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllKeywords" ):
                listener.enterAllKeywords(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllKeywords" ):
                listener.exitAllKeywords(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllKeywords" ):
                return visitor.visitAllKeywords(self)
            else:
                return visitor.visitChildren(self)




    def allKeywords(self):

        localctx = SolidityParser.AllKeywordsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_allKeywords)
        try:
            self.state = 1159
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1143
                self.match(SolidityParser.AnonymousKeyword)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1144
                self.match(SolidityParser.BreakKeyword)
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1145
                self.match(SolidityParser.ConstantKeyword)
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1146
                self.match(SolidityParser.ImmutableKeyword)
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1147
                self.match(SolidityParser.ContinueKeyword)
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1148
                self.match(SolidityParser.LeaveKeyword)
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1149
                self.match(SolidityParser.IndexedKeyword)
                pass
            elif token in [116, 118, 120, 121]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1150
                self.visibilityKeyword()
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1151
                self.match(SolidityParser.PayableKeyword)
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1152
                self.match(SolidityParser.VirtualKeyword)
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1153
                self.match(SolidityParser.PureKeyword)
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1154
                self.match(SolidityParser.TypeKeyword)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1155
                self.match(SolidityParser.ViewKeyword)
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1156
                self.match(SolidityParser.ConstructorKeyword)
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1157
                self.match(SolidityParser.FallbackKeyword)
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1158
                self.match(SolidityParser.ReceiveKeyword)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverrideSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UserDefinedTypeNameContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_overrideSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverrideSpecifier" ):
                listener.enterOverrideSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverrideSpecifier" ):
                listener.exitOverrideSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverrideSpecifier" ):
                return visitor.visitOverrideSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def overrideSpecifier(self):

        localctx = SolidityParser.OverrideSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_overrideSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.match(SolidityParser.T__97)
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 1162
                self.match(SolidityParser.T__22)
                self.state = 1163
                self.userDefinedTypeName()
                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 1164
                    self.match(SolidityParser.T__15)
                    self.state = 1165
                    self.userDefinedTypeName()
                    self.state = 1170
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1171
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.StringLiteralFragment)
            else:
                return self.getToken(SolidityParser.StringLiteralFragment, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = SolidityParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1175
                    self.match(SolidityParser.StringLiteralFragment)

                else:
                    raise NoViableAltException(self)
                self.state = 1178 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[34] = self.typeName_sempred
        self._predicates[64] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 21)
         




